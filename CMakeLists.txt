project(IqrfDaemon)

cmake_minimum_required(VERSION 3.0)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

if(NOT CMAKE_BUILD_TOOL MATCHES "(msdev|devenv|nmake|MSBuild)")
  include(CheckCXXCompilerFlag)
  CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
  CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
  if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -std=c++11 -pthread")
  elseif(COMPILER_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -std=c++0x -pthread")
  else()
    message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
  endif()
endif()

FIND_PACKAGE(shape REQUIRED)

message(STATUS "CMAKE_MODULE_PATH: ${CMAKE_MODULE_PATH}")
include(${CMAKE_MODULE_PATH}/ShapeComponentDeclaration.cmake)

#include_directories(${shape_INCLUDE_DIRS})
include_directories(${CMAKE_SOURCE_DIR}/include)


add_subdirectory(libraries/clibdpa  EXCLUDE_FROM_ALL)
#TODO pass to clibdpa
include(${CMAKE_CURRENT_BINARY_DIR}/libraries/clibdpa/clibdpaConfig.cmake)

add_subdirectory(include)
add_subdirectory(start-IqrfDaemon)
add_subdirectory(DaemonController)
add_subdirectory(Scheduler)
add_subdirectory(IqrfCdc)
add_subdirectory(IqrfSpi)
add_subdirectory(IqrfDpa)
add_subdirectory(BaseService)
add_subdirectory(JsonSerializer)
add_subdirectory(MqMessaging)
add_subdirectory(MqttMessaging)
add_subdirectory(WebsocketMessaging)
add_subdirectory(UdpMessaging)
add_subdirectory(Ide4Counterpart)
add_subdirectory(JsonSplitter)
add_subdirectory(JsonDpaApi)
add_subdirectory(JsCache)
