//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v9.10.56.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------

namespace iqmeshNetwork_ReadTrConf_Response
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class IqmeshNetwork_ReadTrConf_Response 
    {
        /// <summary>IQMESH Network management - Read TR configuration response.</summary>
        [Newtonsoft.Json.JsonProperty("mType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IqmeshNetwork_ReadTrConf_ResponseMType MType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Data Data { get; set; } = new Data();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IqmeshNetwork_ReadTrConf_Response FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IqmeshNetwork_ReadTrConf_Response>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum IqmeshNetwork_ReadTrConf_ResponseMType
    {
        [System.Runtime.Serialization.EnumMember(Value = "iqmeshNetwork_ReadTrConf")]
    
        IqmeshNetwork_ReadTrConf = 0,
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Data 
    {
        /// <summary>Message identification for binding request with response.</summary>
        [Newtonsoft.Json.JsonProperty("msgId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string MsgId { get; set; }
    
        /// <summary>Returns following values, see its description.</summary>
        [Newtonsoft.Json.JsonProperty("rsp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rsp Rsp { get; set; }
    
        /// <summary>Returns array of objects req-cnf-rsp, see its description.</summary>
        [Newtonsoft.Json.JsonProperty("raw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous> Raw { get; set; }
    
        /// <summary>IQRF GW daemon instance identification.</summary>
        [Newtonsoft.Json.JsonProperty("insId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsId { get; set; }
    
        /// <summary>IQRF GW daemon API (general or mType) status.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status { get; set; }
    
        /// <summary>IQRF GW daemon API (general or mType) status in string form.</summary>
        [Newtonsoft.Json.JsonProperty("statusStr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusStr { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Data FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Data>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Rsp 
    {
        /// <summary>Device address to read the configuration from.</summary>
        [Newtonsoft.Json.JsonProperty("deviceAddr", Required = Newtonsoft.Json.Required.Always)]
        public int DeviceAddr { get; set; }
    
        /// <summary>Embedded peripherals enabled on the node.</summary>
        [Newtonsoft.Json.JsonProperty("embPers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmbPers EmbPers { get; set; }
    
        /// <summary>Used RF band.</summary>
        [Newtonsoft.Json.JsonProperty("rfBand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RfBand { get; set; }
    
        /// <summary>Main RF channel A of the main network. Valid numbers depend on used RF band.</summary>
        [Newtonsoft.Json.JsonProperty("rfChannelA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RfChannelA { get; set; }
    
        /// <summary>Same as above but second B channel. Used at RFPGM only.</summary>
        [Newtonsoft.Json.JsonProperty("rfChannelB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RfChannelB { get; set; }
    
        /// <summary>Main RF channel A of the optional subordinate network in case the node also plays a role of the coordinator of such network. Valid numbers depend on used RF band.</summary>
        [Newtonsoft.Json.JsonProperty("rfSubChannelA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RfSubChannelA { get; set; }
    
        /// <summary>Same as above but second B channel.</summary>
        [Newtonsoft.Json.JsonProperty("rfSubChannelB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RfSubChannelB { get; set; }
    
        /// <summary>RF output power. Valid numbers 0-7.</summary>
        [Newtonsoft.Json.JsonProperty("txPower", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TxPower { get; set; }
    
        /// <summary>RF signal filter. Valid numbers 0-64.</summary>
        [Newtonsoft.Json.JsonProperty("rxFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RxFilter { get; set; }
    
        /// <summary>Timeout for receiving RF packets at LP mode at N device.</summary>
        [Newtonsoft.Json.JsonProperty("lpRxTimeout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LpRxTimeout { get; set; }
    
        /// <summary>A nonzero value specifies an alternative DPA service mode channel.</summary>
        [Newtonsoft.Json.JsonProperty("rfPgmAltChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RfPgmAltChannel { get; set; }
    
        /// <summary>If sets, then activates RFPGM invoking by TR module reset.</summary>
        [Newtonsoft.Json.JsonProperty("rfPgmEnableAfterReset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RfPgmEnableAfterReset { get; set; }
    
        /// <summary>If sets, then terminates RFPGM automatically ~1 minute after reset.</summary>
        [Newtonsoft.Json.JsonProperty("rfPgmTerminateAfter1Min", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RfPgmTerminateAfter1Min { get; set; }
    
        /// <summary>If sets, then terminates RFPGM by dedicated pin of the TR module.</summary>
        [Newtonsoft.Json.JsonProperty("rfPgmTerminateMcuPin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RfPgmTerminateMcuPin { get; set; }
    
        /// <summary>If sets, then enables single or dual channel function.</summary>
        [Newtonsoft.Json.JsonProperty("rfPgmDualChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RfPgmDualChannel { get; set; }
    
        /// <summary>RFPGM receiving mode setting. If set, then LP (low power) Rx mode is used during RFPGM. Otherwise STD (standard) Rx mode is used.</summary>
        [Newtonsoft.Json.JsonProperty("rfPgmLpMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RfPgmLpMode { get; set; }
    
        /// <summary>Read only. Indicates that the last RFPGM has successfully been completed.</summary>
        [Newtonsoft.Json.JsonProperty("rfPgmIncorrectUpload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RfPgmIncorrectUpload { get; set; }
    
        /// <summary>If set, then a Custom DPA handler is called in case of an event.</summary>
        [Newtonsoft.Json.JsonProperty("customDpaHandler", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CustomDpaHandler { get; set; }
    
        /// <summary>If set, then Node device can be controlled by a SPI or UART interface.</summary>
        [Newtonsoft.Json.JsonProperty("nodeDpaInterface", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NodeDpaInterface { get; set; }
    
        /// <summary>Baud rate of the UART interface if one is used.</summary>
        [Newtonsoft.Json.JsonProperty("uartBaudrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UartBaudrate { get; set; }
    
        /// <summary>If set, then DPA Autoexec is run at a later stage of the module boot time.</summary>
        [Newtonsoft.Json.JsonProperty("dpaAutoexec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DpaAutoexec { get; set; }
    
        /// <summary>If set, then the Node device does not route packets on the background.</summary>
        [Newtonsoft.Json.JsonProperty("routingOff", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RoutingOff { get; set; }
    
        /// <summary>If set, then DPA IO Setup is run at an early stage of the module boot time.</summary>
        [Newtonsoft.Json.JsonProperty("ioSetup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IoSetup { get; set; }
    
        /// <summary>If set, then device receives also peer-to-peer (non-networking) packets and raises PeerToPeer event.</summary>
        [Newtonsoft.Json.JsonProperty("peerToPeer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PeerToPeer { get; set; }
    
        /// <summary>If set, then unbonded Node using default IQRF buttons never sleeps during the button bonding. From DPA v3.03</summary>
        [Newtonsoft.Json.JsonProperty("neverSleep", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NeverSleep { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Rsp FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Rsp>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>Binary buffer with DPA request.</summary>
        [Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Request { get; set; }
    
        /// <summary>YYYY-MM-DDTHH:MM:SS.MS</summary>
        [Newtonsoft.Json.JsonProperty("requestTs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string RequestTs { get; set; }
    
        /// <summary>Binary buffer with DPA confirmation.</summary>
        [Newtonsoft.Json.JsonProperty("confirmation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Confirmation { get; set; }
    
        /// <summary>YYYY-MM-DDTHH:MM:SS.MS</summary>
        [Newtonsoft.Json.JsonProperty("confirmationTs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ConfirmationTs { get; set; }
    
        /// <summary>Binary buffer with DPA response.</summary>
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Response { get; set; }
    
        /// <summary>YYYY-MM-DDTHH:MM:SS.MS</summary>
        [Newtonsoft.Json.JsonProperty("responseTs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ResponseTs { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class EmbPers 
    {
        /// <summary>An array of 32 bits. Each bit enables/disables one of the embedded 32 predefined peripherals.</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> Values { get; set; }
    
        /// <summary>If coordinator is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("coordinator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Coordinator { get; set; }
    
        /// <summary>If node is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("node", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Node { get; set; }
    
        /// <summary>If OS is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("os", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Os { get; set; }
    
        /// <summary>If EEPROM is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("eeprom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Eeprom { get; set; }
    
        /// <summary>If EEEPROM is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("eeeprom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Eeeprom { get; set; }
    
        /// <summary>If RAM is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("ram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Ram { get; set; }
    
        /// <summary>If LEDR is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("ledr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Ledr { get; set; }
    
        /// <summary>If LEDG is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("ledg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Ledg { get; set; }
    
        /// <summary>If SPI is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("spi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Spi { get; set; }
    
        /// <summary>If IO is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("io", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Io { get; set; }
    
        /// <summary>If thermometer is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("thermometer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Thermometer { get; set; }
    
        /// <summary>If PWM is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("pwm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pwm { get; set; }
    
        /// <summary>If UART is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("uart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Uart { get; set; }
    
        /// <summary>If FRC is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("frc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Frc { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EmbPers FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmbPers>(data);
        }
    
    }
}