//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v9.10.56.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------

namespace MyNamespace
{
    #pragma warning disable // Disable all warnings

    /// <summary>First response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class IqmeshNetwork_EnumDevice1 : System.ComponentModel.INotifyPropertyChanged
    {
        private bool _discovered;
        private int _vrn;
        private int _zone;
        private int _parent;
    
        /// <summary>Device is discovered.</summary>
        [Newtonsoft.Json.JsonProperty("discovered", Required = Newtonsoft.Json.Required.Always)]
        public bool Discovered
        {
            get { return _discovered; }
            set 
            {
                if (_discovered != value)
                {
                    _discovered = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Device VRN integer.</summary>
        [Newtonsoft.Json.JsonProperty("vrn", Required = Newtonsoft.Json.Required.Always)]
        public int Vrn
        {
            get { return _vrn; }
            set 
            {
                if (_vrn != value)
                {
                    _vrn = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Device zone.</summary>
        [Newtonsoft.Json.JsonProperty("zone", Required = Newtonsoft.Json.Required.Always)]
        public int Zone
        {
            get { return _zone; }
            set 
            {
                if (_zone != value)
                {
                    _zone = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Device parent.</summary>
        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Always)]
        public int Parent
        {
            get { return _parent; }
            set 
            {
                if (_parent != value)
                {
                    _parent = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IqmeshNetwork_EnumDevice1 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IqmeshNetwork_EnumDevice1>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Second response - reduced or full eperOsRead.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class IqmeshNetwork_EnumDevice2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _mid;
        private string _osVersion;
        private string _trMcuType;
        private string _osBuild;
        private int _rssi;
        private string _supplyVoltage;
        private int _flags;
        private int _slotLimits;
    
        /// <summary>TR Module ID.</summary>
        [Newtonsoft.Json.JsonProperty("mid", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Mid
        {
            get { return _mid; }
            set 
            {
                if (_mid != value)
                {
                    _mid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>IQRF OS version.</summary>
        [Newtonsoft.Json.JsonProperty("osVersion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OsVersion
        {
            get { return _osVersion; }
            set 
            {
                if (_osVersion != value)
                {
                    _osVersion = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>TR MCU type.</summary>
        [Newtonsoft.Json.JsonProperty("trMcuType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrMcuType
        {
            get { return _trMcuType; }
            set 
            {
                if (_trMcuType != value)
                {
                    _trMcuType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>IQRF OS build.</summary>
        [Newtonsoft.Json.JsonProperty("osBuild", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OsBuild
        {
            get { return _osBuild; }
            set 
            {
                if (_osBuild != value)
                {
                    _osBuild = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>See lastRSSI at IQRF OS Reference Guide.</summary>
        [Newtonsoft.Json.JsonProperty("rssi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rssi
        {
            get { return _rssi; }
            set 
            {
                if (_rssi != value)
                {
                    _rssi = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Module supply voltage</summary>
        [Newtonsoft.Json.JsonProperty("supplyVoltage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplyVoltage
        {
            get { return _supplyVoltage; }
            set 
            {
                if (_supplyVoltage != value)
                {
                    _supplyVoltage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>See DPA guide.</summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Flags
        {
            get { return _flags; }
            set 
            {
                if (_flags != value)
                {
                    _flags = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>See DPA guide.</summary>
        [Newtonsoft.Json.JsonProperty("slotLimits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SlotLimits
        {
            get { return _slotLimits; }
            set 
            {
                if (_slotLimits != value)
                {
                    _slotLimits = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IqmeshNetwork_EnumDevice2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IqmeshNetwork_EnumDevice2>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Third response - reduced or full eperExploreEnum.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class IqmeshNetwork_EnumDevice3 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _dpaVer;
        private int _perNr;
        private System.Collections.ObjectModel.ObservableCollection<int> _embPers = new System.Collections.ObjectModel.ObservableCollection<int>();
        private string _hwpId;
        private int _hwpIdVer;
        private int _flags;
        private System.Collections.ObjectModel.ObservableCollection<int> _userPers = new System.Collections.ObjectModel.ObservableCollection<int>();
    
        /// <summary>DPA version.</summary>
        [Newtonsoft.Json.JsonProperty("dpaVer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DpaVer
        {
            get { return _dpaVer; }
            set 
            {
                if (_dpaVer != value)
                {
                    _dpaVer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of all non-embedded peripherals implemented by Custom DPA Handler.</summary>
        [Newtonsoft.Json.JsonProperty("perNr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PerNr
        {
            get { return _perNr; }
            set 
            {
                if (_perNr != value)
                {
                    _perNr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Bits array (starting from LSb of the 1st byte) specifying which of 32 embedded peripherals are enabled in the HWP Configuration.</summary>
        [Newtonsoft.Json.JsonProperty("embPers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> EmbPers
        {
            get { return _embPers; }
            set 
            {
                if (_embPers != value)
                {
                    _embPers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Hardware profile identification.</summary>
        [Newtonsoft.Json.JsonProperty("hwpId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string HwpId
        {
            get { return _hwpId; }
            set 
            {
                if (_hwpId != value)
                {
                    _hwpId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Hardware profile version.</summary>
        [Newtonsoft.Json.JsonProperty("hwpIdVer", Required = Newtonsoft.Json.Required.Always)]
        public int HwpIdVer
        {
            get { return _hwpIdVer; }
            set 
            {
                if (_hwpIdVer != value)
                {
                    _hwpIdVer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Various flags.</summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Flags
        {
            get { return _flags; }
            set 
            {
                if (_flags != value)
                {
                    _flags = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Bits array (starting from LSb of the 1st byte) specifying which of non-embedded peripherals are implemented.</summary>
        [Newtonsoft.Json.JsonProperty("userPers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> UserPers
        {
            get { return _userPers; }
            set 
            {
                if (_userPers != value)
                {
                    _userPers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IqmeshNetwork_EnumDevice3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IqmeshNetwork_EnumDevice3>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Fourth response - reduced or full eperOsReadCfg.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class IqmeshNetwork_EnumDevice4 : System.ComponentModel.INotifyPropertyChanged
    {
        private int _checkSum;
        private System.Collections.ObjectModel.ObservableCollection<int> _cfgBytes = new System.Collections.ObjectModel.ObservableCollection<int>();
        private int _rfPgm;
        private int _undocumented;
    
        /// <summary>Checksum of the Configuration part.</summary>
        [Newtonsoft.Json.JsonProperty("checkSum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CheckSum
        {
            get { return _checkSum; }
            set 
            {
                if (_checkSum != value)
                {
                    _checkSum = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Content the configuration memory block from address 0x01 to 0x1F.</summary>
        [Newtonsoft.Json.JsonProperty("cfgBytes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<int> CfgBytes
        {
            get { return _cfgBytes; }
            set 
            {
                if (_cfgBytes != value)
                {
                    _cfgBytes = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>See parameter of setupRFPGM IQRF OS function.</summary>
        [Newtonsoft.Json.JsonProperty("rfPgm", Required = Newtonsoft.Json.Required.Always)]
        public int RfPgm
        {
            get { return _rfPgm; }
            set 
            {
                if (_rfPgm != value)
                {
                    _rfPgm = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("undocumented", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Undocumented
        {
            get { return _undocumented; }
            set 
            {
                if (_undocumented != value)
                {
                    _undocumented = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IqmeshNetwork_EnumDevice4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IqmeshNetwork_EnumDevice4>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>Sixth response - validation and updates.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class IqmeshNetwork_EnumDevice6 : System.ComponentModel.INotifyPropertyChanged
    {
        private Validation _validation = new Validation();
        private Updates _updates = new Updates();
    
        /// <summary>IQRF OS version + build, DPA version, TX power, RX filter same as Coordinator.</summary>
        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Validation Validation
        {
            get { return _validation; }
            set 
            {
                if (_validation != value)
                {
                    _validation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Available updates from IQRF repository.</summary>
        [Newtonsoft.Json.JsonProperty("updates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Updates Updates
        {
            get { return _updates; }
            set 
            {
                if (_updates != value)
                {
                    _updates = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IqmeshNetwork_EnumDevice6 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IqmeshNetwork_EnumDevice6>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UnionResponses : System.ComponentModel.INotifyPropertyChanged
    {
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UnionResponses FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnionResponses>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous : System.ComponentModel.INotifyPropertyChanged
    {
        private MType _mType;
        private Data _data = new Data();
    
        /// <summary>IQMESH Network management - Enumerate Device response.</summary>
        [Newtonsoft.Json.JsonProperty("mType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MType MType
        {
            get { return _mType; }
            set 
            {
                if (_mType != value)
                {
                    _mType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Data Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Validation : System.ComponentModel.INotifyPropertyChanged
    {
        private bool _valid;
        private string _osVer;
        private string _osBuild;
        private string _dpaVer;
        private int _txPower;
        private int _rxFilter;
    
        /// <summary>All is fine.</summary>
        [Newtonsoft.Json.JsonProperty("valid", Required = Newtonsoft.Json.Required.Always)]
        public bool Valid
        {
            get { return _valid; }
            set 
            {
                if (_valid != value)
                {
                    _valid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>IQRF OS version.</summary>
        [Newtonsoft.Json.JsonProperty("osVer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OsVer
        {
            get { return _osVer; }
            set 
            {
                if (_osVer != value)
                {
                    _osVer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>IQRF OS build.</summary>
        [Newtonsoft.Json.JsonProperty("osBuild", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OsBuild
        {
            get { return _osBuild; }
            set 
            {
                if (_osBuild != value)
                {
                    _osBuild = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>IQRF DPA version.</summary>
        [Newtonsoft.Json.JsonProperty("dpaVer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DpaVer
        {
            get { return _dpaVer; }
            set 
            {
                if (_dpaVer != value)
                {
                    _dpaVer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>TX power.</summary>
        [Newtonsoft.Json.JsonProperty("txPower", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TxPower
        {
            get { return _txPower; }
            set 
            {
                if (_txPower != value)
                {
                    _txPower = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>RX filter.</summary>
        [Newtonsoft.Json.JsonProperty("rxFilter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RxFilter
        {
            get { return _rxFilter; }
            set 
            {
                if (_rxFilter != value)
                {
                    _rxFilter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Validation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Validation>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Updates : System.ComponentModel.INotifyPropertyChanged
    {
        private string _dpaHandlerPath;
        private string _dpaPluginPath;
        private string _osDpaPluginPath;
    
        /// <summary>Path to the up to date DPA handler.</summary>
        [Newtonsoft.Json.JsonProperty("dpaHandlerPath", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DpaHandlerPath
        {
            get { return _dpaHandlerPath; }
            set 
            {
                if (_dpaHandlerPath != value)
                {
                    _dpaHandlerPath = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Path to the up to date DPA plugin.</summary>
        [Newtonsoft.Json.JsonProperty("dpaPluginPath", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DpaPluginPath
        {
            get { return _dpaPluginPath; }
            set 
            {
                if (_dpaPluginPath != value)
                {
                    _dpaPluginPath = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Path to the up to date OS+DPA plugin.</summary>
        [Newtonsoft.Json.JsonProperty("osDpaPluginPath", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OsDpaPluginPath
        {
            get { return _osDpaPluginPath; }
            set 
            {
                if (_osDpaPluginPath != value)
                {
                    _osDpaPluginPath = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Updates FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Updates>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MType
    {
        [System.Runtime.Serialization.EnumMember(Value = "iqmeshNetwork_EnumerateDevice")]
    
        IqmeshNetwork_EnumerateDevice = 0,
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Data : System.ComponentModel.INotifyPropertyChanged
    {
        private string _msgId;
        private Rsp _rsp = new Rsp();
        private System.Collections.ObjectModel.ObservableCollection<Anonymous2> _raw = new System.Collections.ObjectModel.ObservableCollection<Anonymous2>();
        private string _insId;
        private int _status;
        private string _statusStr;
    
        /// <summary>Message identification for binding request with response.</summary>
        [Newtonsoft.Json.JsonProperty("msgId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MsgId
        {
            get { return _msgId; }
            set 
            {
                if (_msgId != value)
                {
                    _msgId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Returns following values, see its description.</summary>
        [Newtonsoft.Json.JsonProperty("rsp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rsp Rsp
        {
            get { return _rsp; }
            set 
            {
                if (_rsp != value)
                {
                    _rsp = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Returns array of objects req-cnf-rsp, see its description.</summary>
        [Newtonsoft.Json.JsonProperty("raw", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous2> Raw
        {
            get { return _raw; }
            set 
            {
                if (_raw != value)
                {
                    _raw = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>IQRF GW daemon instance identification.</summary>
        [Newtonsoft.Json.JsonProperty("insId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsId
        {
            get { return _insId; }
            set 
            {
                if (_insId != value)
                {
                    _insId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>IQRF GW daemon API (general or mType) status.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>IQRF GW daemon API (general or mType) status in string form.</summary>
        [Newtonsoft.Json.JsonProperty("statusStr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusStr
        {
            get { return _statusStr; }
            set 
            {
                if (_statusStr != value)
                {
                    _statusStr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Data FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Data>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Rsp : System.ComponentModel.INotifyPropertyChanged
    {
        private int _deviceAddr;
        private UnionResponses _result;
    
        /// <summary>Device address to enumerate.</summary>
        [Newtonsoft.Json.JsonProperty("deviceAddr", Required = Newtonsoft.Json.Required.Always)]
        public int DeviceAddr
        {
            get { return _deviceAddr; }
            set 
            {
                if (_deviceAddr != value)
                {
                    _deviceAddr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Always)]
        public UnionResponses Result
        {
            get { return _result; }
            set 
            {
                if (_result != value)
                {
                    _result = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Rsp FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Rsp>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _request;
        private string _requestTs;
        private string _confirmation;
        private string _confirmationTs;
        private string _response;
        private string _responseTs;
    
        /// <summary>Binary buffer with DPA request.</summary>
        [Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Request
        {
            get { return _request; }
            set 
            {
                if (_request != value)
                {
                    _request = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>YYYY-MM-DDTHH:MM:SS.MS</summary>
        [Newtonsoft.Json.JsonProperty("requestTs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RequestTs
        {
            get { return _requestTs; }
            set 
            {
                if (_requestTs != value)
                {
                    _requestTs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Binary buffer with DPA confirmation.</summary>
        [Newtonsoft.Json.JsonProperty("confirmation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Confirmation
        {
            get { return _confirmation; }
            set 
            {
                if (_confirmation != value)
                {
                    _confirmation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>YYYY-MM-DDTHH:MM:SS.MS</summary>
        [Newtonsoft.Json.JsonProperty("confirmationTs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ConfirmationTs
        {
            get { return _confirmationTs; }
            set 
            {
                if (_confirmationTs != value)
                {
                    _confirmationTs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Binary buffer with DPA response.</summary>
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Response
        {
            get { return _response; }
            set 
            {
                if (_response != value)
                {
                    _response = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>YYYY-MM-DDTHH:MM:SS.MS</summary>
        [Newtonsoft.Json.JsonProperty("responseTs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ResponseTs
        {
            get { return _responseTs; }
            set 
            {
                if (_responseTs != value)
                {
                    _responseTs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous2>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
}