//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v9.10.56.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------

namespace iqmeshNetwork_BondNodeLocal_Response
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class iqmeshNetwork_BondNodeLocal_Response : System.ComponentModel.INotifyPropertyChanged
    {
        private MType _mType;
        private Data _data = new Data();
    
        /// <summary>IQMESH Network management - Bond Node Local response.</summary>
        [Newtonsoft.Json.JsonProperty("mType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MType MType
        {
            get { return _mType; }
            set 
            {
                if (_mType != value)
                {
                    _mType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Data Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static iqmeshNetwork_BondNodeLocal_Response FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<iqmeshNetwork_BondNodeLocal_Response>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MType
    {
        [System.Runtime.Serialization.EnumMember(Value = "iqmeshNetwork_BondNodeLocal")]
    
        IqmeshNetwork_BondNodeLocal = 0,
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Data : System.ComponentModel.INotifyPropertyChanged
    {
        private string _msgId;
        private Rsp _rsp = new Rsp();
        private System.Collections.ObjectModel.ObservableCollection<Anonymous2> _raw = new System.Collections.ObjectModel.ObservableCollection<Anonymous2>();
        private string _insId;
        private int _status;
        private string _statusStr;
    
        /// <summary>Message identification for binding request with response.</summary>
        [Newtonsoft.Json.JsonProperty("msgId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MsgId
        {
            get { return _msgId; }
            set 
            {
                if (_msgId != value)
                {
                    _msgId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Returns following values, see its description.</summary>
        [Newtonsoft.Json.JsonProperty("rsp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rsp Rsp
        {
            get { return _rsp; }
            set 
            {
                if (_rsp != value)
                {
                    _rsp = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Returns array of objects req-cnf-rsp, see its description.</summary>
        [Newtonsoft.Json.JsonProperty("raw", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous2> Raw
        {
            get { return _raw; }
            set 
            {
                if (_raw != value)
                {
                    _raw = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>IQRF GW daemon instance identification.</summary>
        [Newtonsoft.Json.JsonProperty("insId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsId
        {
            get { return _insId; }
            set 
            {
                if (_insId != value)
                {
                    _insId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>IQRF GW daemon API (general or mType) status.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>IQRF GW daemon API (general or mType) status in string form.</summary>
        [Newtonsoft.Json.JsonProperty("statusStr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusStr
        {
            get { return _statusStr; }
            set 
            {
                if (_statusStr != value)
                {
                    _statusStr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Data FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Data>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Rsp : System.ComponentModel.INotifyPropertyChanged
    {
        private int _assignedAddr;
        private int _nodesNr;
        private int _hwpId;
        private string _manufacturer;
        private string _product;
        private OsRead _osRead = new OsRead();
    
        /// <summary>Assigned address to the node.</summary>
        [Newtonsoft.Json.JsonProperty("assignedAddr", Required = Newtonsoft.Json.Required.Always)]
        public int AssignedAddr
        {
            get { return _assignedAddr; }
            set 
            {
                if (_assignedAddr != value)
                {
                    _assignedAddr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of nodes in the network.</summary>
        [Newtonsoft.Json.JsonProperty("nodesNr", Required = Newtonsoft.Json.Required.Always)]
        public int NodesNr
        {
            get { return _nodesNr; }
            set 
            {
                if (_nodesNr != value)
                {
                    _nodesNr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Profile integer.</summary>
        [Newtonsoft.Json.JsonProperty("hwpId", Required = Newtonsoft.Json.Required.Always)]
        public int HwpId
        {
            get { return _hwpId; }
            set 
            {
                if (_hwpId != value)
                {
                    _hwpId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Manufacture name.</summary>
        [Newtonsoft.Json.JsonProperty("manufacturer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Manufacturer
        {
            get { return _manufacturer; }
            set 
            {
                if (_manufacturer != value)
                {
                    _manufacturer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Product name.</summary>
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Product
        {
            get { return _product; }
            set 
            {
                if (_product != value)
                {
                    _product = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Returns following values, see its description.</summary>
        [Newtonsoft.Json.JsonProperty("osRead", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OsRead OsRead
        {
            get { return _osRead; }
            set 
            {
                if (_osRead != value)
                {
                    _osRead = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Rsp FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Rsp>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _request;
        private string _requestTs;
        private string _confirmation;
        private string _confirmationTs;
        private string _response;
        private string _responseTs;
    
        /// <summary>Binary buffer with DPA request.</summary>
        [Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Request
        {
            get { return _request; }
            set 
            {
                if (_request != value)
                {
                    _request = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>YYYY-MM-DDTHH:MM:SS.MS</summary>
        [Newtonsoft.Json.JsonProperty("requestTs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RequestTs
        {
            get { return _requestTs; }
            set 
            {
                if (_requestTs != value)
                {
                    _requestTs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Binary buffer with DPA confirmation.</summary>
        [Newtonsoft.Json.JsonProperty("confirmation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Confirmation
        {
            get { return _confirmation; }
            set 
            {
                if (_confirmation != value)
                {
                    _confirmation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>YYYY-MM-DDTHH:MM:SS.MS</summary>
        [Newtonsoft.Json.JsonProperty("confirmationTs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ConfirmationTs
        {
            get { return _confirmationTs; }
            set 
            {
                if (_confirmationTs != value)
                {
                    _confirmationTs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Binary buffer with DPA response.</summary>
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Response
        {
            get { return _response; }
            set 
            {
                if (_response != value)
                {
                    _response = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>YYYY-MM-DDTHH:MM:SS.MS</summary>
        [Newtonsoft.Json.JsonProperty("responseTs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ResponseTs
        {
            get { return _responseTs; }
            set 
            {
                if (_responseTs != value)
                {
                    _responseTs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous2>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OsRead : System.ComponentModel.INotifyPropertyChanged
    {
        private int _mid;
        private int _osVersion;
        private int _trMcuType;
        private int _osBuild;
        private int _rssi;
        private int _supplyVoltage;
        private int _flags;
        private int _slotLimits;
    
        /// <summary>TR Module ID.</summary>
        [Newtonsoft.Json.JsonProperty("mid", Required = Newtonsoft.Json.Required.Always)]
        public int Mid
        {
            get { return _mid; }
            set 
            {
                if (_mid != value)
                {
                    _mid = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>IQRF OS version.</summary>
        [Newtonsoft.Json.JsonProperty("osVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OsVersion
        {
            get { return _osVersion; }
            set 
            {
                if (_osVersion != value)
                {
                    _osVersion = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>TR MCU type.</summary>
        [Newtonsoft.Json.JsonProperty("trMcuType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TrMcuType
        {
            get { return _trMcuType; }
            set 
            {
                if (_trMcuType != value)
                {
                    _trMcuType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>IQRF OS build.</summary>
        [Newtonsoft.Json.JsonProperty("osBuild", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OsBuild
        {
            get { return _osBuild; }
            set 
            {
                if (_osBuild != value)
                {
                    _osBuild = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>See lastRSSI at IQRF OS Reference Guide.</summary>
        [Newtonsoft.Json.JsonProperty("rssi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rssi
        {
            get { return _rssi; }
            set 
            {
                if (_rssi != value)
                {
                    _rssi = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Module supply voltage, contains real voltage value.</summary>
        [Newtonsoft.Json.JsonProperty("supplyVoltage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SupplyVoltage
        {
            get { return _supplyVoltage; }
            set 
            {
                if (_supplyVoltage != value)
                {
                    _supplyVoltage = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>See DPA guide.</summary>
        [Newtonsoft.Json.JsonProperty("flags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Flags
        {
            get { return _flags; }
            set 
            {
                if (_flags != value)
                {
                    _flags = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>See DPA guide.</summary>
        [Newtonsoft.Json.JsonProperty("slotLimits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SlotLimits
        {
            get { return _slotLimits; }
            set 
            {
                if (_slotLimits != value)
                {
                    _slotLimits = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OsRead FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OsRead>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
}