//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v9.10.56.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------

namespace iqmeshNetwork_ReadTrConf_Response
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class iqmeshNetwork_ReadTrConf_Response : System.ComponentModel.INotifyPropertyChanged
    {
        private MType _mType;
        private Data _data = new Data();
    
        /// <summary>IQMESH Network management - Read TR configuration response.</summary>
        [Newtonsoft.Json.JsonProperty("mType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MType MType
        {
            get { return _mType; }
            set 
            {
                if (_mType != value)
                {
                    _mType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Data Data
        {
            get { return _data; }
            set 
            {
                if (_data != value)
                {
                    _data = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static iqmeshNetwork_ReadTrConf_Response FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<iqmeshNetwork_ReadTrConf_Response>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MType
    {
        [System.Runtime.Serialization.EnumMember(Value = "iqmeshNetwork_ReadTrConf")]
    
        IqmeshNetwork_ReadTrConf = 0,
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Data : System.ComponentModel.INotifyPropertyChanged
    {
        private string _msgId;
        private Rsp _rsp = new Rsp();
        private System.Collections.ObjectModel.ObservableCollection<Anonymous2> _raw = new System.Collections.ObjectModel.ObservableCollection<Anonymous2>();
        private string _insId;
        private int _status;
        private string _statusStr;
    
        /// <summary>Message identification for binding request with response.</summary>
        [Newtonsoft.Json.JsonProperty("msgId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MsgId
        {
            get { return _msgId; }
            set 
            {
                if (_msgId != value)
                {
                    _msgId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Returns following values, see its description.</summary>
        [Newtonsoft.Json.JsonProperty("rsp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rsp Rsp
        {
            get { return _rsp; }
            set 
            {
                if (_rsp != value)
                {
                    _rsp = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Returns array of objects req-cnf-rsp, see its description.</summary>
        [Newtonsoft.Json.JsonProperty("raw", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous2> Raw
        {
            get { return _raw; }
            set 
            {
                if (_raw != value)
                {
                    _raw = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>IQRF GW daemon instance identification.</summary>
        [Newtonsoft.Json.JsonProperty("insId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsId
        {
            get { return _insId; }
            set 
            {
                if (_insId != value)
                {
                    _insId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>IQRF GW daemon API (general or mType) status.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>IQRF GW daemon API (general or mType) status in string form.</summary>
        [Newtonsoft.Json.JsonProperty("statusStr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusStr
        {
            get { return _statusStr; }
            set 
            {
                if (_statusStr != value)
                {
                    _statusStr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Data FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Data>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Rsp : System.ComponentModel.INotifyPropertyChanged
    {
        private int _deviceAddr;
        private System.Collections.ObjectModel.ObservableCollection<int> _embPerBits = new System.Collections.ObjectModel.ObservableCollection<int>();
        private string _rfBand;
        private int _rfChannelA;
        private int _rfChannelB;
        private int _rfSubChannelA;
        private int _rfSubChannelB;
        private int _txPower;
        private int _rxFilter;
        private int _lpRxTimeout;
        private int _rfPgmAltChannel;
        private bool _rfPgmEnableAfterReset;
        private bool _rfPgmTerminateAfter1Min;
        private bool _rfPgmTerminateMcuPin;
        private bool _rfPgmDualChannel;
        private bool _rfPgmLpMode;
        private bool _rfPgmIncorrectUpload;
        private bool _customDpaHandler;
        private bool _nodeDpaInterface;
        private int _uartBaudrate;
        private bool _dpaAutoexec;
        private bool _routingOff;
        private bool _ioSetup;
        private bool _peerToPeer;
    
        /// <summary>Device address to read the configuration from.</summary>
        [Newtonsoft.Json.JsonProperty("deviceAddr", Required = Newtonsoft.Json.Required.Always)]
        public int DeviceAddr
        {
            get { return _deviceAddr; }
            set 
            {
                if (_deviceAddr != value)
                {
                    _deviceAddr = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>An array of 32 bits. Each bit enables/disables one of the embedded 32 predefined peripherals.</summary>
        [Newtonsoft.Json.JsonProperty("embPerBits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> EmbPerBits
        {
            get { return _embPerBits; }
            set 
            {
                if (_embPerBits != value)
                {
                    _embPerBits = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Used RF band.</summary>
        [Newtonsoft.Json.JsonProperty("rfBand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RfBand
        {
            get { return _rfBand; }
            set 
            {
                if (_rfBand != value)
                {
                    _rfBand = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Main RF channel A of the main network. Valid numbers depend on used RF band.</summary>
        [Newtonsoft.Json.JsonProperty("rfChannelA", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RfChannelA
        {
            get { return _rfChannelA; }
            set 
            {
                if (_rfChannelA != value)
                {
                    _rfChannelA = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Same as above but second B channel. Used at RFPGM only.</summary>
        [Newtonsoft.Json.JsonProperty("rfChannelB", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RfChannelB
        {
            get { return _rfChannelB; }
            set 
            {
                if (_rfChannelB != value)
                {
                    _rfChannelB = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Main RF channel A of the optional subordinate network in case the node also plays a role of the coordinator of such network. Valid numbers depend on used RF band.</summary>
        [Newtonsoft.Json.JsonProperty("rfSubChannelA", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RfSubChannelA
        {
            get { return _rfSubChannelA; }
            set 
            {
                if (_rfSubChannelA != value)
                {
                    _rfSubChannelA = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Same as above but second B channel.</summary>
        [Newtonsoft.Json.JsonProperty("rfSubChannelB", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RfSubChannelB
        {
            get { return _rfSubChannelB; }
            set 
            {
                if (_rfSubChannelB != value)
                {
                    _rfSubChannelB = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>RF output power. Valid numbers 0-7.</summary>
        [Newtonsoft.Json.JsonProperty("txPower", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TxPower
        {
            get { return _txPower; }
            set 
            {
                if (_txPower != value)
                {
                    _txPower = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>RF signal filter. Valid numbers 0-64.</summary>
        [Newtonsoft.Json.JsonProperty("rxFilter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RxFilter
        {
            get { return _rxFilter; }
            set 
            {
                if (_rxFilter != value)
                {
                    _rxFilter = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Timeout for receiving RF packets at LP mode at N device.</summary>
        [Newtonsoft.Json.JsonProperty("lpRxTimeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LpRxTimeout
        {
            get { return _lpRxTimeout; }
            set 
            {
                if (_lpRxTimeout != value)
                {
                    _lpRxTimeout = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A nonzero value specifies an alternative DPA service mode channel.</summary>
        [Newtonsoft.Json.JsonProperty("rfPgmAltChannel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RfPgmAltChannel
        {
            get { return _rfPgmAltChannel; }
            set 
            {
                if (_rfPgmAltChannel != value)
                {
                    _rfPgmAltChannel = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If sets, then activates RFPGM invoking by TR module reset.</summary>
        [Newtonsoft.Json.JsonProperty("rfPgmEnableAfterReset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RfPgmEnableAfterReset
        {
            get { return _rfPgmEnableAfterReset; }
            set 
            {
                if (_rfPgmEnableAfterReset != value)
                {
                    _rfPgmEnableAfterReset = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If sets, then terminates RFPGM automatically ~1 minute after reset.</summary>
        [Newtonsoft.Json.JsonProperty("rfPgmTerminateAfter1Min", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RfPgmTerminateAfter1Min
        {
            get { return _rfPgmTerminateAfter1Min; }
            set 
            {
                if (_rfPgmTerminateAfter1Min != value)
                {
                    _rfPgmTerminateAfter1Min = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If sets, then terminates RFPGM by dedicated pin of the TR module.</summary>
        [Newtonsoft.Json.JsonProperty("rfPgmTerminateMcuPin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RfPgmTerminateMcuPin
        {
            get { return _rfPgmTerminateMcuPin; }
            set 
            {
                if (_rfPgmTerminateMcuPin != value)
                {
                    _rfPgmTerminateMcuPin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If sets, then enables single or dual channel function.</summary>
        [Newtonsoft.Json.JsonProperty("rfPgmDualChannel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RfPgmDualChannel
        {
            get { return _rfPgmDualChannel; }
            set 
            {
                if (_rfPgmDualChannel != value)
                {
                    _rfPgmDualChannel = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>RFPGM receiving mode setting. If set, then LP (low power) Rx mode is used during RFPGM. Otherwise STD (standard) Rx mode is used.</summary>
        [Newtonsoft.Json.JsonProperty("rfPgmLpMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RfPgmLpMode
        {
            get { return _rfPgmLpMode; }
            set 
            {
                if (_rfPgmLpMode != value)
                {
                    _rfPgmLpMode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Read only. Indicates that the last RFPGM has successfully been completed.</summary>
        [Newtonsoft.Json.JsonProperty("rfPgmIncorrectUpload", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RfPgmIncorrectUpload
        {
            get { return _rfPgmIncorrectUpload; }
            set 
            {
                if (_rfPgmIncorrectUpload != value)
                {
                    _rfPgmIncorrectUpload = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If set, then a Custom DPA handler is called in case of an event.</summary>
        [Newtonsoft.Json.JsonProperty("customDpaHandler", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CustomDpaHandler
        {
            get { return _customDpaHandler; }
            set 
            {
                if (_customDpaHandler != value)
                {
                    _customDpaHandler = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If set, then Node device can be controlled by a SPI or UART interface.</summary>
        [Newtonsoft.Json.JsonProperty("nodeDpaInterface", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool NodeDpaInterface
        {
            get { return _nodeDpaInterface; }
            set 
            {
                if (_nodeDpaInterface != value)
                {
                    _nodeDpaInterface = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Baud rate of the UART interface if one is used.</summary>
        [Newtonsoft.Json.JsonProperty("uartBaudrate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int UartBaudrate
        {
            get { return _uartBaudrate; }
            set 
            {
                if (_uartBaudrate != value)
                {
                    _uartBaudrate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If set, then DPA Autoexec is run at a later stage of the module boot time.</summary>
        [Newtonsoft.Json.JsonProperty("dpaAutoexec", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DpaAutoexec
        {
            get { return _dpaAutoexec; }
            set 
            {
                if (_dpaAutoexec != value)
                {
                    _dpaAutoexec = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If set, then the Node device does not route packets on the background.</summary>
        [Newtonsoft.Json.JsonProperty("routingOff", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RoutingOff
        {
            get { return _routingOff; }
            set 
            {
                if (_routingOff != value)
                {
                    _routingOff = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If set, then DPA IO Setup is run at an early stage of the module boot time.</summary>
        [Newtonsoft.Json.JsonProperty("ioSetup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IoSetup
        {
            get { return _ioSetup; }
            set 
            {
                if (_ioSetup != value)
                {
                    _ioSetup = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If set, then device receives also peer-to-peer (non-networking) packets and raises PeerToPeer event.</summary>
        [Newtonsoft.Json.JsonProperty("peerToPeer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PeerToPeer
        {
            get { return _peerToPeer; }
            set 
            {
                if (_peerToPeer != value)
                {
                    _peerToPeer = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Rsp FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Rsp>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.56.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous2 : System.ComponentModel.INotifyPropertyChanged
    {
        private string _request;
        private string _requestTs;
        private string _confirmation;
        private string _confirmationTs;
        private string _response;
        private string _responseTs;
    
        /// <summary>Binary buffer with DPA request.</summary>
        [Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Request
        {
            get { return _request; }
            set 
            {
                if (_request != value)
                {
                    _request = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>YYYY-MM-DDTHH:MM:SS.MS</summary>
        [Newtonsoft.Json.JsonProperty("requestTs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RequestTs
        {
            get { return _requestTs; }
            set 
            {
                if (_requestTs != value)
                {
                    _requestTs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Binary buffer with DPA confirmation.</summary>
        [Newtonsoft.Json.JsonProperty("confirmation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Confirmation
        {
            get { return _confirmation; }
            set 
            {
                if (_confirmation != value)
                {
                    _confirmation = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>YYYY-MM-DDTHH:MM:SS.MS</summary>
        [Newtonsoft.Json.JsonProperty("confirmationTs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ConfirmationTs
        {
            get { return _confirmationTs; }
            set 
            {
                if (_confirmationTs != value)
                {
                    _confirmationTs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Binary buffer with DPA response.</summary>
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Response
        {
            get { return _response; }
            set 
            {
                if (_response != value)
                {
                    _response = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>YYYY-MM-DDTHH:MM:SS.MS</summary>
        [Newtonsoft.Json.JsonProperty("responseTs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ResponseTs
        {
            get { return _responseTs; }
            set 
            {
                if (_responseTs != value)
                {
                    _responseTs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous2>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
}