{
  "bonding": {
    "reqAddr": {
      "title": "Requested address",
      "description": "A requested address for the bonded node. The address must not be used (bonded) yet. If this parameter equals to 0, then the 1st free address is assigned to the node.",
      "type": "integer",
      "minimum": 0,
      "maximum": 239,
      "default": 0
    },
    "bondingTestRetries": {
      "title": "Bonding test retries",
      "description": "Maximum number of FRCs used to test whether the Node was successfully bonded. If value is 0, then no test is performed and the command always succeeds.",
      "type": "integer",
      "minimum": 0,
      "maximum": 255,
      "default": 0
    },
    "userData": {
      "title": "User data",
      "description": "Optional data passed to the bonded node. [Byte array]",
      "type": "array",
      "items": {
        "type": "integer",
        "minimum": 0,
        "maximum": 255
      },
      "maxItems": 4,
      "default": [0,0,0,0]
    },
    "assignedAddr": {
      "description": "The address assigned to the node.",
      "type": "integer",
      "minimum": 1,
      "maximum": 255
    }
  },
  "device": {
    "hwpId": {
      "title": "HWPID",
      "description": "Hardware profile ID.",
      "type": "integer",
      "minimum": 0,
      "maximum": 65535
    },
    "hwpIdVersion": {
      "title": "Hardware profile ID version",
      "type": "integer",
      "minimum": 0,
      "maximum": 65535
    },
    "manufacturer": {
      "description": "Manufacturer name.",
      "type": "string"
    },
    "metadata": {
      "oneOf": [
        {
          "title": "Metadata",
          "description": "Arbitrary user defined device meta data.",
          "type": "object"
        },
        { "type": "null" }
      ]
    },
    "product": {
      "description": "Product name.",
      "type": "string"
    },
    "supplyVoltageStr": {
      "description": "Module supply voltage",
      "type": "string"
    },
    "voltage": {
      "oneOf": [
        { "type": "null" },
        {
          "description": "Voltage of a network device.",
          "type": "number"
        }
      ]
    }
  },
  "dpa": {
    "customHandler": {
      "description": "Whether a Custom DPA handler is called in case of an event.",
      "type": "boolean"
    },
    "interface": {
      "title": "Node DPA interface",
      "description": "Whether Node device can be controlled by a SPI or UART interface. Valid only in DPA version < 4.00",
      "type": "boolean"
    },
    "peerToPeer": {
      "description": "Whether DP2P is enabled at [N].",
      "type": "boolean"
    },
    "timeout": {
      "title": "Request timeout",
      "description": "Timeout to wait for IQRF DPA response.",
      "type": "integer",
      "minimum": 0
    },
    "version": {
      "title": "DPA version.",
      "type": "integer",
      "minimum": 0,
      "maximum": 65535
    },
    "versionStr": {
      "description": "DPA version.",
      "type": "string"
    }
  },
  "enumeration": {
    "flags": {
      "title": "Enumeration flags",
      "description": "A byte containing various enumeration flags. For details see Peripheral enumeration in DPA Technical Guide.",
      "type": "integer",
      "minimum": 0,
      "maximum": 255
    },
    "flagsParsed": {
      "description": "Enumeration flags.",
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/enumeration/flags"
        },
        "rfModeStd": {
          "title": "STD-RX mode",
          "type": "boolean"
        },
        "rfModeLp": {
          "title": "LP-RX mode",
          "type": "boolean"
        },
        "stdAndLpNetwork": {
          "title": "STD+LP network",
          "type": "boolean"
        }
      }
    },
    "standards": {
      "description": "List of standards supported by the device.",
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  },
  "frc": {
    "extendedFormat": {
      "title": "Extended format",
      "description": "Return the data in the extended format.",
      "type": "boolean",
      "default": false
    },
    "extraResult": {
      "title": "Get extra result",
      "description": "If set Extra result DPA message is sent and processed.",
      "type": "boolean",
      "default": true
    },
    "inaccessibleCnt": {
      "title": "Inaccessible node count",
      "description": "Number of nodes that don't reply to FRC.",
      "type": "integer",
      "minimum": 0,
      "maximum": 239
    },
    "localReception": {
      "description": "Local FRC reception is enabled at the node.",
      "type": "boolean"
    },
    "metadata": {
      "title": "Metadata",
      "description": "Arbitrary user defined meta data.",
      "oneOf": [
        { "type": "object" },
        { "type": "null" }
      ]
    },
    "selectedNodes": {
      "title": "Selected nodes",
      "description": "Optional array of indexes of the selected nodes.",
      "type": "array",
      "items": {
        "type": "integer",
        "minimum": 1,
        "maximum": 239
      },
      "minItems": 0,
      "maxItems": 239,
      "uniqueItems": true
    }
  },
  "interoperability": {
    "sensor": {
      "decimalPlaces": {
        "title": "Precision",
        "description": "Number of valid decimal places.",
        "type": "integer",
        "minimum": 0
      },
      "frcCommand": {
        "title": "FRC command",
        "description": "One of predefined standard sensor FRC commands. Use FRC commands available from Sensor enumeration.",
        "type": "integer",
        "minimum": 0,
        "maximum": 255
      },
      "genericReadout": {
        "title": "Generic readout",
        "description": "Parsed generic sensor readout.",
        "items": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": { "$ref": "#/interoperability/sensor/id" },
            "type": { "$ref": "#/interoperability/sensor/type" },
            "name": { "$ref": "#/interoperability/sensor/name" },
            "shortName": { "$ref": "#/interoperability/sensor/shortName" },
            "value": { "$ref": "#/interoperability/sensor/value" },
            "unit": { "$ref": "#/interoperability/sensor/unit" },
            "decimalPlaces": { "$ref": "#/interoperability/sensor/decimalPlaces" }
          }
        }
      },
      "id": {
        "title": "Sensor ID",
        "description": "Value type as text id.",
        "type": "string"
      },
      "index": {
        "title": "Sensor index",
        "description": "Index of the sensor. When the sensor type is specified, then its is an index among of all sensors of the specified type. Some FRC commands might use top 3 bits of this parameter for passing additional data.",
        "type": "integer",
        "minimum": 0,
        "maximum": 255
      },
      "indexes": {
        "title": "Sensor indexes",
        "description": "Indexes of requested sensors.",
        "oneOf": [
          { "type": "null" },
          { "type": "integer" },
          {
            "type": "array",
            "additionalItems": false,
            "uniqueItems": true,
            "items": {
              "type": "integer",
              "minimum": 0,
              "maximum": 31
            }
          }
        ]
      },
      "name": {
        "title": "Quantity name",
        "description": "Quantity measured by the sensor.",
        "type": "string"
      },
      "shortName": {
        "title": "Sensor short name",
        "description": "Short name of the sensor (quantity). Typically it is a symbol used at physics.",
        "type": "string"
      },
      "type": {
        "title": "Sensor type",
        "description": "Numerical value corresponding to sensor type and quantity.",
        "type": "integer",
        "minimum": 1,
        "maximum": 255
      },
      "unit": {
        "title": "Quantity unit",
        "description": "Unit in which the quantity is measured. Dimensionless quantities has \"\".",
        "type": "string"
      },
      "value": {
        "oneOf": [
          {
            "title": "Sensor value",
            "description": "Last measured value of the sensor.",
            "type": "number"
          },
          {
            "title": "Sensor values",
            "description": "List of last measured values of the sensor.",
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255
            }
          },
          { "type": "null" }
        ]
      }
    },
    "light": {
      "ldiCommand": {
        "title": "LDI (DALI) command",
        "description": "2-byte LDI (DALI) commands in the standard YAAAAAAS+DDDDDDDD format.",
        "type": "integer",
        "minimum": 0,
        "maximum": 65535
      },
      "status": {
        "title": "Light (DALI) digital status",
        "type": "integer",
        "minimum": 0,
        "maximum": 255
      },
      "value": {
        "title": "Light (DALI) digital value",
        "type": "integer",
        "minimum": 0,
        "maximum": 255
      }
    }
  },
  "iqmesh": {
    "action": {
      "title": "Action",
      "description": "Defines the action which shall be performed, either retrieve current value (GET) or set a new value (SET).",
      "type": "string",
      "enum": [
        "get",
        "set"
      ]
    },
    "repeat": {
      "title": "Repeat request",
      "description": "Number of repetitions of DPA messages.",
      "type": "integer",
      "default": 1
    },
    "progress": {
      "title": "Progress",
      "description": "Estimation of algorithm progress [%].",
      "type": "integer",
      "minimum": 0,
      "maximum": 100
    },
    "dpaHops": {
      "action": {
        "description": "Whether to GET the current DPA hops setting or SET a new configuration.",
        "$ref": "#/iqmesh/action"
      },
      "requestHops": {
        "title": "Request hops",
        "description": "Request hops.",
        "type": "integer",
        "minimum": 0,
        "maximum": 255,
        "default": 255
      },
      "responseHops": {
        "title": "Response hops",
        "description": "Response hops.",
        "type": "integer",
        "minimum": 1,
        "maximum": 255,
        "default": 255
      }
    },
    "dpaValue": {
      "action": {
        "description": "Whether to GET the current DPA value type or SET a new type. Set action without explicit type will reset DPA value type to default.",
        "$ref": "#/iqmesh/action"
      },
      "type": {
        "title": "Type",
        "description": "DPA value type. [0 - RSSI, 1 - Supply Voltage, 2 - System, 3 - User].",
        "type": "integer",
        "minimum": 0,
        "maximum": 3,
        "default": 0
      }
    },
    "frcParams": {
      "action": {
        "description": "Whether to GET the current FRC parameters or SET a new configuration. Set action without explicit type will reset FRC parameters to default.",
        "$ref": "#/iqmesh/action"
      },
      "responseTime": {
        "title": "FRC response time",
        "description": "FRC response time in milliseconds. [0 - 40ms, 16 - 360ms, 32 - 680ms, 48 - 1320ms, 64 - 2600ms, 80 - 5160ms, 96 - 10280ms, 112 - 20620ms].",
        "type": "integer",
        "enum": [
          0,
          16,
          32,
          48,
          64,
          80,
          96,
          112
        ],
        "default": 0
      },
      "offlineFrc": {
        "title": "Offline FRC",
        "description": "Whether to perform offline FRC (for beaming sensors only).",
        "type": "boolean"
      }
    },
    "ota": {
      "loadingAction": {
        "title": "Loading action",
        "description": "Loading action: WithoutCodeLoading, WithCodeLoading.",
        "type": "string"
      }
    }
  },
  "iqrfDb": {
    "binouts": {
      "title": "BinaryOutput standard",
      "description": "Include binary outputs if the device implements BinaryOutput standard.",
      "type": "boolean",
      "default": false
    },
    "brief": {
      "title": "Brief information",
      "description": "Brief information about a device.",
      "type": "boolean",
      "default": false
    },
    "sensors": {
      "title": "Sensor standard",
      "description": "Include sensors if the device implements Sensor standard.",
      "type": "boolean",
      "default": false
    }
  },
  "message": {
    "id": {
      "title": "Message ID",
      "description": "Message identification for binding request with response.",
      "type": "string"
    },
    "type": {
      "title": "Message type",
      "description": "Daemon API message"
    }
  },
  "node": {
    "address": {
      "title": "Node address",
      "description": "Network device address.",
      "type": "integer",
      "minimum": 0,
      "maximum": 255
    },
    "count": {
      "title": "Node count",
      "description": "Number of nodes in the network.",
      "type": "integer",
      "minimum": 0,
      "maximum": 239
    },
    "discovered": {
      "title": "Discovery status",
      "description": "Whether is the device discovered.",
      "type": "boolean"
    },
    "ibk": {
      "title": "IBK",
      "description": "Individual Bonding Key [Byte array].",
      "type": "array",
      "items": {
        "type": "integer",
        "minimum": 0,
        "maximum": 255
      },
      "maxItems": 16
    },
    "parent": {
      "oneOf": [
        {
          "title": "Parent device",
          "type": "integer",
          "minimum": 0,
          "maximum": 255
        },
        {
          "title": "No parents",
          "type": "null"
        }
      ]
    },
    "peerToPeer": {
      "description": "Whether the device receives also peer-to-peer (non-networking) packets and raises PeerToPeer event.",
      "type": "boolean"
    },
    "routingOff": {
      "description": "Node device does not route packets on the background.",
      "type": "boolean"
    },
    "rssi": {
      "title": "RSSI",
      "description": "The signal level of the last received message. See lastRSSI register at IQRF OS Reference Guide.",
      "type": "integer",
      "minimum": 0,
      "maximum": 255
    },
    "rssiStr": {
      "title": "RSSI",
      "description": "The signal level of the last received message. See lastRSSI register at IQRF OS Reference Guide.",
      "type": "string"
    },
    "stdAndLpNetwork": {
      "description": "Denotes that the Coordinator maintains STD+LP network; otherwise, it controls the STD network. The bit can only be changed if the network is empty (no [Ns] are bonded) otherwise the network will stop working. From DPA v4.00",
      "type": "boolean"
    },
    "timeslotLimits": {
      "title": "Timeslot limits",
      "description": "A byte specifying the timeslot limits. For details see DPA Technical Guide.",
      "type": "integer",
      "minimum": 0,
      "maximum": 255
    },
    "timeslotLimitsParsed": {
      "title": "Timeslot limits",
      "description": "For details see DPA Technical Guide.",
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/node/timeslotLimits"
        },
        "shortestTimeslot": {
          "description": "Shortest timeslot length in 10 ms units.",
          "type": "string"
        },
        "longestTimeslot": {
          "description": "Longest timeslot length in 10 ms units.",
          "type": "string"
        }
      }
    },
    "vrn": {
      "title": "Virtual routing number",
      "type": "integer",
      "minimum": 0,
      "maximum": 255
    },
    "zone": {
      "title": "Zone",
      "type": "integer",
      "minimum": 0,
      "maximum": 255
    }
  },
  "os": {
    "build": {
      "title": "IQRF OS build",
      "type": "integer",
      "minimum": 0,
      "maximum": 65535
    },
    "buildStr": {
      "description": "IQRF OS build.",
      "type": "string"
    },
    "flags": {
      "title": "Flags",
      "description": "A byte containing OS flags. For the meaning of individual bits see DPA Technical Guide.",
      "type": "integer",
      "minimum": 0,
      "maximum": 255
    },
    "flagsParsed": {
      "description": "OS Flags, for detail see DPA Guide",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "value": {
          "$ref": "#/os/flags"
        },
        "insufficientOsBuild": {
          "description": "Flags.0 - Insufficient OsBuild. (DPA < 4.17)",
          "type": "boolean"
        },
        "insufficientOsVersion": {
          "description": "Flags.0 - Insufficient OsVersion. (DPA >= 4.17)",
          "type": "boolean"
        },
        "interfaceType": {
          "description": "Flags.1 - Interface type.",
          "type": "string"
        },
        "dpaHandlerDetected": {
          "description": "Flags.2 - Custom DPA handler was detected.",
          "type": "boolean"
        },
        "dpaHandlerNotDetectedButEnabled": {
          "description": "Flags.3 - Custom DPA Handler is not detected but enabled.",
          "type": "boolean"
        },
        "noInterfaceSupported": {
          "description": "Flags.4 - No interface supported.",
          "type": "boolean"
        },
        "iqrfOsChanged": {
          "description": "Flags.5 - IQRF OS is changed from the originally manufactured version.",
          "type": "boolean"
        },
        "frcAggregationEnabled": {
          "description": "Flags.6 - is 1 if the FRC Aggregation feature is enabled by the TR manufacturer.",
          "type": "boolean"
        }
      }
    },
    "versionStr": {
      "description": "IQRF OS version.",
      "type": "string"
    }
  },
  "peripheral": {
    "command": {
      "title": "Peripheral command",
      "description": "Peripheral command number.",
      "type": "integer",
      "minimum": 0,
      "maximum": 255
    },
    "embedded": {
      "title": "Enabled embedded peripherals",
      "description": "Array of embedded peripherals (their ordinal numbers), which are enabled in the TR configuration.",
      "type": "array",
      "items": {
        "type": "integer",
        "minimum": 0,
        "maximum": 31
      },
      "maxItems": 32,
      "uniqueItems": true
    },
    "embeddedParsed": {
      "title": "Enabled embedded peripherals",
      "description": "Embedded peripherals, which are implemented on the node.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "values": {
          "description": "An array of 32 bits. Each bit enables/disables one of the embedded 32 predefined peripherals.",
          "type": "array",
          "items": {
            "type": "integer"
          },
          "maxItems": 4
        },
        "coordinator": {
          "description": "Coordinator is enabled.",
          "type": "boolean"
        },
        "node": {
          "description": "Node is enabled.",
          "type": "boolean"
        },
        "os": {
          "description": "OS is enabled.",
          "type": "boolean"
        },
        "eeprom": {
          "description": "EEPROM is enabled.",
          "type": "boolean"
        },
        "eeeprom": {
          "description": "EEEPROM is enabled.",
          "type": "boolean"
        },
        "ram": {
          "description": "RAM is enabled.",
          "type": "boolean"
        },
        "ledr": {
          "description": "LEDR is enabled.",
          "type": "boolean"
        },
        "ledg": {
          "description": "LEDG is enabled.",
          "type": "boolean"
        },
        "spi": {
          "description": "SPI is enabled.",
          "type": "boolean"
        },
        "io": {
          "description": "IO is enabled.",
          "type": "boolean"
        },
        "thermometer": {
          "description": "Thermometer is enabled.",
          "type": "boolean"
        },
        "pwm": {
          "description": "PWM is enabled.",
          "type": "boolean"
        },
        "uart": {
          "description": "UART is enabled.",
          "type": "boolean"
        },
        "frc": {
          "description": "FRC is enabled.",
          "type": "boolean"
        }
      }
    },
    "information": {
      "title": "Information about a peripheral",
      "type": "object",
      "required": [
        "perT",
        "perTe",
        "par1",
        "par2"
      ],
      "additionalProperties": false,
      "properties": {
        "perTe": {
          "type": "integer",
          "description": "Extended peripheral characteristic.",
          "minimum": 0,
          "maximum": 3
        },
        "perT": {
          "type": "integer",
          "description": "Peripheral type. If the peripheral is not supported or enabled, then PERIPHERAL_TYPE_DUMMY (0x00).",
          "minimum": 0,
          "maximum": 255
        },
        "par1": {
          "type": "integer",
          "description": "Optional peripheral specific information.",
          "minimum": 0,
          "maximum": 255
        },
        "par2": {
          "type": "integer",
          "description": "Optional peripheral specific information.",
          "minimum": 0,
          "maximum": 255
        }
      }
    },
    "number": {
      "title": "Peripheral number",
      "type": "integer",
      "minimum": 0,
      "maximum": 255
    },
    "user": {
      "title": "Non-embedded peripherals",
      "description": "Array of implemented non-embedded peripherals (their ordinal numbers).",
      "type": "array",
      "items": {
        "type": "integer",
        "minimum": 0,
        "maximum": 255
      },
      "uniqueItems": true
    },
    "userCnt": {
      "description": "Number of all non-embedded peripherals implemented by Custom DPA Handler.",
      "type": "integer",
      "minimum": 0,
      "maximum": 255
    }
  },
  "request": {
    "hwpId": {
      "allOf": [
        { "default": 65535 },
        { "$ref": "#/device/hwpId" }
      ]
    },
    "returnVerbose": {
      "title": "Verbose response",
      "description": "API response will be more verbose.",
      "type": "boolean"
    }
  },
  "response": {
    "dpaVal": {
      "oneOf": [
        {
          "title": "DPA value",
          "type": "integer",
          "minimum": 0
        },
        {
          "type": "null"
        }
      ]
    },
    "errorStr": {
      "title": "Error string",
      "description": "Human readable description of the error.",
      "type": "string"
    },
    "hwpId": {
      "oneOf": [
        { "$ref": "#/device/hwpId" },
        { "type": "null" }
      ]
    },
    "insId": {
      "title": "Instance ID",
      "description": "IQRF GW daemon instance identification.",
      "type": "string"
    },
    "product": {
      "oneOf": [
        { "$ref": "#/device/product" },
        { "type": "null" }
      ]
    },
    "raw": {
      "title": "Raw DPA messages",
      "description": "Returns array of objects req-cnf-rsp, see its description.",
      "type": "array",
      "additionalItems": false,
      "items": {
        "title": "Raw DPA messages object",
        "description": "Object containing Request, Confirmation and Response DPA messages and their timestamps.",
        "type": "object",
        "required": [
          "request",
          "requestTs",
          "confirmation",
          "confirmationTs",
          "response",
          "responseTs"
        ],
        "additionalProperties": false,
        "properties": {
          "request": {
            "title": "Request DPA",
            "description": "DPA request string.",
            "type": "string"
          },
          "requestTs": {
            "title": "Request timestamp",
            "description": "YYYY-MM-DDTHH:MM:SS.SSS±HH:MM",
            "type": "string"
          },
          "confirmation": {
            "title": "Confirmation DPA",
            "description": "DPA confirmation string.",
            "type": "string"
          },
          "confirmationTs": {
            "title": "Confirmation timestamp",
            "description": "YYYY-MM-DDTHH:MM:SS.SSS±HH:MM",
            "type": "string"
          },
          "response": {
            "title": "Response DPA",
            "description": "DPA response string",
            "type": "string"
          },
          "responseTs": {
            "title": "Response timestamp",
            "description": "YYYY-MM-DDTHH:MM:SS.SSS±HH:MM",
            "type": "string"
          }
        }
      }
    },
    "rCode": {
      "oneOf": [
        {
          "title": "Return code",
          "description": "DPA error code.",
          "type": "integer",
          "minimum": 0
        },
        { "type": "null" }
      ]
    },
    "status": {
      "title": "Status code",
      "description": "Status of operation.",
      "type": "integer"
    },
    "statusStr": {
      "title": "Status string",
      "description": "IQRF GW daemon API (general or mType) status in string form.",
      "type": "string"
    }
  },
  "scheduler": {
    "clientId": {
      "title": "Client ID",
      "description": "Client identifier.",
      "type": "string"
    },
    "description": {
      "title": "Description",
      "description": "Scheduler task description.",
      "type": "string"
    },
    "enabled": {
      "title": "Start scheduler task",
      "description": "Schedule task immediately.",
      "type": "boolean",
      "default": false
    },
    "persist": {
      "title": "Persistent scheduler task",
      "description": "Task will persist through daemon restarts and shutdowns.",
      "type": "boolean",
      "default": false
    },
    "task": {
      "title": "Scheduler task",
      "type": "object",
      "required": [
        "message",
        "messaging"
      ],
      "additionalProperties": false,
      "properties": {
        "message": {
          "title": "Task message",
          "description": "Supported Daemon API json request.",
          "type": "object"
        },
        "messaging": {
          "title": "Messaging services",
          "description": "List of messaging services.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "title": "Messaging service instance",
            "type": "object",
            "required": [
              "instance",
              "type"
            ],
            "additionalProperties": false,
            "properties": {
              "instance": {
                "title": "Messaging instance name",
                "type": "string",
                "example": "default"
              },
              "type": {
                "title": "Messaging type",
                "type": "string",
                "enum": [
                  "mqtt",
                  "ws"
                ]
              }
            }
          }
        }
      }
    },
    "taskId": {
      "title": "Scheduler task ID",
      "description": "Unique identifier of the scheduler task.",
      "type": "string",
      "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
    },
    "timeSpec": {
      "title": "Time specification",
      "description": "Time-based task execution conditions.",
      "type": "object",
      "required": [
        "cronTime",
        "periodic",
        "period",
        "exactTime",
        "startTime"
      ],
      "additionalProperties": false,
      "properties": {
        "cronTime": {
          "title": "Cron time",
          "description": "Array of 7 cron format values or cron alias string",
          "oneOf": [
            {
              "type": "array",
              "minItems": 7,
              "maxItems": 7,
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "periodic": {
          "title": "Periodic",
          "description": "Periodic task execution.",
          "type": "boolean"
        },
        "period": {
          "title": "Period",
          "description": "Task execution period in seconds.",
          "type": "integer"
        },
        "exactTime": {
          "title": "One shot",
          "description": "Single task execution now or at a specified time (startTime).",
          "type": "boolean"
        },
        "startTime": {
          "title": "Start time",
          "description": "One shot task start time in ISO8601 date-time format.",
          "type": "string"
        }
      }
    }
  },
  "sensorData": {
    "asyncReports": {
      "title": "Asynchronous reports",
      "description": "Sends asynchronous messages reporting results when sensor read concludes.",
      "type": "boolean"
    },
    "autoRun": {
      "title": "Run worker automatically",
      "description": "Start sensor data reading worker on startup.",
      "type": "boolean"
    },
    "messagingList": {
      "title": "Messaging instance list",
      "description": "List of messaging instances to use for asynchronous reporting.",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "title": "Messaging instance",
        "description": "Messaging service instance.",
        "type": "object",
        "required": [
          "type",
          "instance"
        ],
        "additionalProperties": false,
        "properties": {
          "type": {
            "title": "Messaging type",
            "type": "string",
            "enum": ["mqtt", "ws"]
          },
          "instance": {
            "title": "Messaging instance name",
            "type": "string",
            "example": "default"
          }
        }
      }
    },
    "period": {
      "title": "Reading period",
      "description": "Time between data reads in minutes.",
      "type": "integer",
      "minimum": 1
    },
    "retryPeriod": {
      "title": "Retry period",
      "description": "Time between reading retry after a failure.",
      "type": "integer",
      "minimum": 1
    },
    "rssi": {
      "oneOf": [
        {
          "description": "The signal level of the last received message.",
          "type": "integer"
        },
        { "type": "null" }
      ]
    }
  },
  "transciever": {
    "config": {
      "dpaAutoexec": {
        "description": "Whether DPA Autoexec is run at a later stage of the module boot time.",
        "type": "boolean"
      },
      "ioSetup": {
        "description": "Whether DPA IO Setup is run at an early stage of the module boot time.",
        "type": "boolean"
      },
      "neverSleep": {
        "description": "Whether an unbonded Node using default IQRF buttons never sleeps during the button bonding. From DPA v3.03",
        "type": "boolean"
      },
      "uartBaudrate": {
        "description": "Baud rate of the UART interface.",
        "type": "integer"
      }
    },
    "id": {
      "title": "TR Module ID",
      "type": "integer",
      "minimum": 0,
      "maximum": 4294967295
    },
    "idStr": {
      "title": "TR Module ID",
      "type": "string",
      "maxLength": 8,
      "minLength": 8,
      "pattern": "^[a-fA-F0-9]{8}$"
    },
    "ilType": {
      "description": "Transciever is IL type for Israel region.",
      "type": "boolean"
    },
    "radio": {
      "altDsmChannel": {
        "description": "A nonzero value specifies an alternative DPA service mode channel.",
        "type": "integer"
      },
      "channelA": {
        "description": "Main RF channel A of the main network. Valid numbers depend on used RF band.",
        "type": "integer"
      },
      "channelB": {
        "description": "Same as above but second B channel. Used at RFPGM only.",
        "type": "integer"
      },
      "lpRxTimeout": {
        "description": "Timeout for receiving RF packets at LP mode at N device.",
        "type": "integer"
      },
      "rxFilter": {
        "description": "RF signal filter. Valid numbers 0-64.",
        "type": "integer"
      },
      "subChannelA": {
        "description": "Main RF channel A of the optional subordinate network in case the node also plays a role of the coordinator of such network. Valid numbers depend on used RF band. Available for DPA<400.",
        "type": "integer"
      },
      "subChannelB": {
        "description": "Same as above but second B channel.",
        "type": "integer"
      },
      "txPower": {
        "description": "RF output power. Valid numbers 0-7.",
        "type": "integer"
      }
    },
    "rfpgm": {
      "dualChannel": {
        "description": "Enables single or dual channel function.",
        "type": "boolean"
      },
      "enableAfterReset": {
        "description": "Activates RFPGM invoking by TR module reset.",
        "type": "boolean"
      },
      "incorrectUpload": {
        "description": "Read only. Indicates that the last RFPGM has successfully been completed.",
        "type": "boolean"
      },
      "lpMode": {
        "description": "RFPGM receiving mode setting. If set, then LP (low power) Rx mode is used during RFPGM. Otherwise STD (standard) Rx mode is used.",
        "type": "boolean"
      },
      "terminateAfter1Min": {
        "description": "Terminates RFPGM automatically ~1 minute after reset.",
        "type": "boolean"
      },
      "terminateMcuPin": {
        "description": "Terminates RFPGM by dedicated pin of the TR module.",
        "type": "boolean"
      }
    },
    "serialEepromPresent": {
      "description": "Serial EEPROM chip is present.",
      "type": "boolean"
    },
    "thermometerSensorPresent": {
      "description": "On-board thermometer sensor chip is present.",
      "type": "boolean"
    },
    "type": {
      "title": "TR & MCU type",
      "description": "A byte value defining the TR and MCU types. For details see moduleInfo in IQRF OS Reference Guide.",
      "type": "integer",
      "minimum": 0,
      "maximum": 255
    },
    "typeParsed": {
      "title": "TR & MCU type",
      "description": "Transciever module and microcontroller types.",
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/transciever/type"
        },
        "trType": {
          "description": "TR module type.",
          "type": "string"
        },
        "fccCertified": {
          "description": "TR module is FCC certified.",
          "type": "boolean"
        },
        "mcuType": {
          "description": "TR module MCU type.",
          "type": "string"
        }
      }
    }
  }
}
