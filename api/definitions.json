{
	"general": {
		"msgId": {
			"$id": "#/general/msgId",
			"title": "Message ID",
			"description": "Message identification for binding request with response.",
			"type": "string"
		},
		"mType": {
			"$id": "#/general/mType",
			"title": "Message type"
		},
		"timeout": {
			"$id": "#/general/timeout",
			"title": "Request timeout",
			"description": "Timeout to wait for IQRF DPA response.",
			"type": "integer",
			"minimum": 500
		},
		"nAdr": {
			"$id": "#/general/nAdr",
			"title": "Node address",
			"description": "Network device address.",
			"type": "integer",
			"minimum": 0,
			"maximum": 239
		},
		"pNum": {
			"$id": "#/general/pNum",
			"title": "Peripheral number",
			"description": "Integer that corresponds to the respective peripheral.",
			"type": "integer",
			"oneOf": [
				{
					"enum": [0,1,2,3,4,5,6,7,9,10,12,13,74,75,94,113]
				},
				{
					"minimum": 32,
					"maximum": 62
				}
			]
		},
		"metaData": {
			"$id": "#/general/metaData",
			"title": "Device metadata",
			"description": "Arbitrary user defined meta data.",
			"type": "object"
		},
		"backupIndex": {
			"$id": "#/general/backupIndex",
			"title": "Backup block index",
			"description": "Index of the block of backup data to start reading from. The last byte of read data specifies number of remaining data blocks to read.",
			"type": "integer",
			"minimum": 0,
			"maximum": 255
		},
		"networkData": {
			"$id": "#/general/networkData",
			"title": "Backup network data",
			"type": "array",
			"minItems": 1,
			"maxItems": 49,
			"additionalItems": false,
			"items": {
				"title": "Data block",
				"description": "One block of coordinator network info data.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			}
		},
		"request": {
			"hwpId": {
				"$id": "#/request/hwpId",
				"title": "Device HWPID",
				"description": "Hardware profile identification.",
				"type": "integer",
				"minimum": 0,
				"maximum": 65535,
				"default": 65535
			},
			"pCmd": {
				"$id": "#/general/request/pCmd",
				"title": "Peripheral command",
				"description": "Integer that corresponds to the respective peripheral command.",
				"type": "integer",
				"minimum": 0,
				"maximum": 127
			},
			"pData": {
				"$id": "#/general/request/pData",
				"title": "Request packet data",
				"description": "Binary buffer with DPA request data.",
				"type": "array",
				"additionalItems": false,
				"minItems": 0,
				"maxItems": 58,
				"items": {
					"$id": "#/general/pData/items",
					"title": "Data byte",
					"description": "Single packet data byte.",
					"type": "integer",
					"minimum": 0,
					"maximum": 255
				}
			},
			"returnVerbose": {
				"$id": "#/general/request/returnVerbose",
				"title": "Verbose response",
				"description": "Flag that includes additional parameters in the response.",
				"type": "boolean"
			},
			"selectedNodes": {
				"$id": "#/general/request/selectedNodes",
				"title": "Array of nodes",
				"description": "Array of integer values corresponding to the selected node addresses. Use default value to select all nodes and use sleepAfterFrc parameter.",
				"type": "array",
				"additionalItems": false,
				"items": {
					"$id": "#/general/request/selectedNodes/items",
					"title": "Node address",
					"description": "Address of node device in network.",
					"type": "integer",
					"minimum": 0,
					"maximum": 239
				}
			}
		},
		"response": {
			"hwpId": {
				"$id": "#/response/hwpId",
				"title": "Device HWPID",
				"description": "Hardware profile identification.",
				"type": "integer",
				"minimum": -1,
				"maximum": 65535,
				"default": 65535
			},
			"pCmd": {
				"$id": "#/general/response/pCmd",
				"title": "Peripheral command response",
				"description": "Integer that corresponds to the respective peripheral command response.",
				"type": "integer",
				"minimum": 128,
				"maximum": 255
			},
			"pData": {
				"$id": "#/general/response/pData",
				"title": "Response packet data",
				"description": "Binary buffer with DPA response data.",
				"type": "array",
				"additionalItems": false,
				"minItems": 0,
				"maxItems": 56,
				"items": {
					"$id": "#/general/response/pData/items",
					"title": "Data byte",
					"description": "Single packet data byte.",
					"type": "integer",
					"minimum": 0,
					"maximum": 255
				}
			},
			"rCode": {
				"$id": "#/general/response/rCode",
				"title": "Return code",
				"description": "DPA error code.",
				"type": "integer",
				"minimum": 0
			},
			"dpaVal": {
				"$id": "#/general/response/dpaVal",
				"title": "DPA value",
				"description": "DPA value.",
				"type": "integer",
				"minimum": 0
			},
			"errorStr": {
				"$id": "#/general/response/errorStr",
				"title": "Error string",
				"description": "Error description from JS drivers.",
				"type": "string"							
			},
			"insId": {
				"$id": "#/general/response/insId",
				"title": "Instance ID",
				"description": "IQRF GW daemon instance identification.",
				"ty,pe": "string"
			},
			"status": {
				"$id": "#/general/response/status",
				"title": "Status code",
				"description": "Status of operation.",
				"type": "integer"
			},
			"statusStr": {
				"$id": "#/general/response/statusStr",
				"title": "Status string",
				"description": "IQRF GW daemon API (general or mType) status in string form.",
				"type": "string"
			},
			"raw": {
				"$id": "#/general/response/raw",
				"title": "Raw DPA messages",
				"description": "Returns array of objects req-cnf-rsp, see its description.",
				"type": "array",
				"additionalItems": false,
				"items": {
					"$id": "#/general/response/raw/items",
					"title": "Raw DPA messages object",
					"description": "Object containing Request, Confirmation and Response DPA messages and their timestamps.",
					"type": "object",
					"required": [
						"request",
						"requestTs",
						"confirmation",
						"confirmationTs",
						"response",
						"responseTs"
					],
					"additionalProperties": false,
					"properties": {
						"request": {
							"$id": "#/general/response/raw/items/properties/request",
							"title": "Request DPA",
							"oneOf": [
								{
									"$ref": "#/patterns/requestDpa"
								},
								{
									"const": ""
								}
							]
						},
						"requestTs": {
							"$id": "#/general/response/raw/items/properties/requestTs",
							"title": "Request timestamp",
							"description": "YYYY-MM-DDTHH:MM:SS.SSS±HH:MM",
							"oneOf": [
								{
									"$ref": "#/patterns/timestamp"
								},
								{
									"const": ""
								}
							]
						},
						"confirmation": {
							"$id": "#/general/response/raw/items/properties/confirmation",
							"title": "Confirmation DPA",
							"$ref": "#/patterns/confirmationDpa"
						},
						"confirmationTs": {
							"$id": "#/general/response/raw/items/properties/confirmationTs",
							"title": "Confirmation timestamp",
							"description": "YYYY-MM-DDTHH:MM:SS.SSS±HH:MM",
							"oneOf": [
								{
									"$ref": "#/patterns/timestamp"
								},
								{
									"const": ""
								}
							]
						},
						"response": {
							"$id": "#/general/response/raw/items/properties/response",
							"title": "Response DPA",
							"oneOf": [
								{
									"$ref": "#/patterns/responseDpa"
								},
								{
									"const": ""
								}
							]
						},
						"responseTs": {
							"$id": "#/general/response/raw/items/properties/responseTs",
							"title": "Response timestamp",
							"description": "YYYY-MM-DDTHH:MM:SS.SSS±HH:MM",
							"oneOf": [
								{
									"$ref": "#/patterns/timestamp"
								},
								{
									"const": ""
								}
							]
						}
					}
				}
			}
		}
	},
	"remoteBonding": {
		"control": {
			"$id": "#/remoteBonding/control",
			"title": "Bonding control",
			"description": "Enables remote bonding mode. If enabled then previously bonded nodes are forgotten.",
			"type": "integer",
			"enum": [0, 1]
		},
		"userData": {
			"$id": "#/remoteBonding/userData",
			"title": "User data",
			"description": "Optional data that can be used at Reset Custom DPA Handler event.",
			"type": "array",
			"maxItems": 4,
			"additionalItems": false,
			"items": {
				"title": "User data byte",
				"description": "Byte of user data.",
				"type": "integer",
				"minimum": 0,
				"maximum": 1
			}
		}
	},
	"embed": {
		"coordinator": {
			"nAdr": {
				"$id": "#/embed/coordinator/nAdr",
				"title": "Coordinator address",
				"description": "Coordinator device network address.",
				"type": "integer",
				"const": 0
			},
			"devNr": {
				"$id": "#/embed/coordinator/devNr",
				"title": "Node count",
				"type": "integer",
				"minimum": 0,
				"maximum": 239
			},
			"nodeArray": {
				"$id": "#/embed/coordinator/nodeArray",
				"title": "Node array",
				"type": "array",
				"maxItems": 239,
				"additionalItems": false,
				"items": {
					"title": "Node address",
					"description": "Node device network address",
					"type": "integer",
					"minimum": 1,
					"maximum": 239
				}
			},
			"reqAddr": {
				"$id": "#/embed/coordinator/reqAddr",
				"title": "Node address",
				"type": "integer",
				"minimum": 0,
				"maximum": 239
			},
			"bondingMask": {
				"$id": "#/embed/coordinator/bondingMask",
				"title": "Bonding mask",
				"description": "Bonding mask. See IQRF OS User's and Reference guides (remote bonding, function bondNewNode). For DPA < 4.00.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			},
			"bondingTestRetries": {
				"$id": "#/embed/coordinator/bondingTestRetries",
				"title": "Bonding test retries",
				"description": "Maximum number of FRCs to test whether the node was successfully bonded. For DPA >= 4.00.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			},
			"txPower": {
				"$id": "#/embed/coordinator/txPower",
				"title": "TX Power",
				"description": "TX power used for discovery.",
				"type": "integer",
				"minimum": 0,
				"maximum": 7
			},
			"dpaParam": {
				"$id": "#/embed/coordinator/dpaParam",
				"title": "DPA param.",
				"type": "integer",
				"minimum": 0,
				"maximum": 3
			},
			"requestHops": {
				"$id": "#/embed/coordinator/requestHops",
				"title": "Request hops",
				"type": "integer",
				"minimum": 0,
				"maximum": 255,
				"default": 255
			},
			"responseHops": {
				"$id": "#/embed/coordinator/responseHops",
				"title": "Response hops",
				"type": "integer",
				"minimum": 1,
				"maximum": 255,
				"default": 255
			}
		},
		"node": {
			"nAdr": {
				"$id": "#/embed/node/nAdr",
				"title": "Node address.",
				"description": "Address of node device in network.",
				"type": "integer",
				"minimum": 1,
				"maximum": 239
			}
		},
		"explore": {
			"per": {
				"$id": "#/embed/explore/per",
				"title": "Peripheral number",
				"description": "Peripheral number to get information about.",
				"type": "integer",
				"minimum": 0,
				"maximum": 13
			},
			"par": {
				"$id": "#/embed/explore/par",
				"title": "Peripheral information",
				"description": "Optional peripheral specific information. See DPA framework technical guide for details.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			},
			"perT": {
				"$id": "#/embed/explore/per",
				"title": "Peripheral type",
				"description": "Peripheral type number, see DPA framework technical guide for peripheral type constants. If peripheral is not supported or enabled, the value is PERIPHERAL_TYPE_DUMMY (0).",
				"type": "integer",
				"minimum": 0,
				"maximum": 14
			},
			"perTe": {
				"$id": "#/embed/explore/perTe",
				"title": "Peripheral characteristics",
				"description": "Extended peripheral characteristic.",
				"type": "integer",
				"minimum": 0,
				"maximum": 3
			}
		},
		"os": {
			"osVersion": {
				"$id": "#/embed/os/osVersion",
				"title": "OS version",
				"description": "IQRF OS version.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			},
			"osBuild": {
				"$id": "#/embed/os/osBuild",
				"title": "OS build",
				"description": "IQRF OS build.",
				"type": "integer",
				"minimum": 0,
				"maximum": 65535
			},
			"trMcuType": {
				"$id": "#/embed/os/trMcuType",
				"title": "MCU type",
				"description": "Transciever MCU type.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			},
			"rssi": {
				"$id": "#/embed/os/rssi",
				"title": "RSSI",
				"description": "Gets the RF signal level. See lastRSSI at IQRF OS Reference Guide.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			},
			"supplyVoltage": {
				"$id": "#/embed/os/supplyVoltage",
				"title": "Supply voltage.",
				"description": "Module supply voltage, contains real voltage value.",
				"type": "number",
				"minimum": 0,
				"maximum": 3.84
			},
			"osFlags": {
				"$id": "#/embed/os/osFlags",
				"title": "OS flags",
				"description": "Bit 0: 1 = insufficient OS build for the used DPA version; Bit 1: Supported interface - 0 = SPI / 1 = UART; Bit 2: 1 = Custom DPA Handler detected; Bit 3: 1 = Custom DPA Handler not detected, but enabled in TR config; Bit 4: No interface supported; Bit 5: IQRF OS changed from factory state; Bit 6-7: reserved.",
				"type": "integer",
				"minimum": 0,
				"maximum": 57
			},
			"slotLimits": {
				"$id": "#/embed/os/slotLimits",
				"title": "Time slot limits",
				"description": "Lower nibble contains shortest timeslot length in 10 ms units. Upper nibble contains longest timeslot length.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			},
			"dpaVer": {
				"$id": "#/embed/os/dpaVer",
				"title": "DPA version",
				"description": "DPA version represented by an integer value.",
				"type": "integer",
				"minimum": 0,
				"maximum": 65535
			},
			"userPerNr": {
				"$id": "#/embed/os/userPerNr",
				"title": "User peripherals count",
				"description": "Number of all non-embedded peripherals implemented by Custom DPA Handler.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			},
			"embeddedPers": {
				"$id": "#/embed/os/embeddedPers",
				"title": "Embedded peripherals",
				"description": "Array of embedded peripheral type numbers.",
				"type": "array",
				"maxItems": 32,
				"additionalItems": false,
				"items": {
					"title": "Peripheral number",
					"description": "Embedded peripheral type number.",
					"type": "integer",
					"enum": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13]
				}
			},
			"hwpidVer": {
				"$id": "#/embed/os/hwpidVer",
				"title": "HWPID version",
				"description": "Hardware profile version represented by an integer value.",
				"type": "integer",
				"minimum": 0,
				"maximum": 65535
			},
			"flags": {
				"$id": "#/embed/os/flags",
				"title": "Flags",
				"description": "Device operational mode flags.",
				"type": "integer",
				"minimum": 0,
				"maximum": 7
			},
			"userPer": {
				"$id": "#/embed/os/userPer",
				"title": "User peripherals",
				"description": "Array of implemented non-embedded user peripherals.",
				"type": "array",
				"minItems": 0,
				"maxItems": 12,
				"additionalItems": false,
				"items": {
					"title": "User peripheral number",
					"description": "Peripheral type number of non-embedded user peripheral.",
					"type": "integer",
					"oneOf": [
						{
							"minimum": 32,
							"maximum": 62
						},
						{
							"enum": [74, 75, 94, 113]
						}
					]
				}
			},
			"ibk": {
				"$id": "#/embed/os/ibk",
				"title": "Module IBK",
				"description": "TR module individual bonding key.",
				"type": "array",
				"minItems": 16,
				"maxItems": 16,
				"additionalItems": false,
				"items": {
					"title": "IBK byte.",
					"description": "Individual bonding key byte.",
					"type": "integer",
					"minimum": 0,
					"maximum": 255
				}
			},
			"mid": {
				"$id": "#/embed/os/mid",
				"title": "Device MID",
				"type": "integer",
				"minimum": 0,
				"maximum": 4294967295
			},
			"rxFilter": {
				"$id": "#/embed/os/rxFilter",
				"title": "RX filter",
				"description": "RX filter (0-63) to be passed as a parameter to checkRF IQRF OS function. Set value to 255 to get data from previous measurement.",
				"type": "integer",
				"oneOf": [
					{
						"minimum": 0,
						"maximum": 63
					},
					{
						"const": 255
					}
				]
			},
			"checksum": {
				"$id": "#/embed/os/checksum",
				"title": "Checksum",
				"description": "Checksum of the Configuration part. XORed with all configuration bytes results in value 0x5F.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			},
			"configuration": {
				"$id": "#/embed/os/configuration",
				"title": "Configuration array",
				"description": "Content the configuration memory block from address 0x01 to 0x1F.",
				"type": "array",
				"minItems": 31,
				"maxItems": 31,
				"additionalItems": false,
				"items": {
					"title": "Configuration byte",
					"description": "Single byte of TR configuration block",
					"type": "integer",
					"minimum": 0,
					"maximum": 255
				}
			},
			"rfpgm": {
				"$id": "#/embed/os/rfpgm",
				"title": "RFPGM configuration.",
				"description":"See parameter of setupRFPGM IQRF OS function.",
				"type": "integer",
				"minimum": 0,
				"maximum": 215
			}
		},
		"memories": {
			"data": {
				"$id": "#/embed/memories/data",
				"title": "Data byte.",
				"description": "Byte of memory data.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			}
		},
		"led": {
			"onOff": {
				"$id": "#/embed/led/onOff",
				"title": "LED status",
				"description": "LED ON/OFF status.",
				"type": "boolean"
			}
		},
		"spiUart": {
			"readTimeout": {
				"$id": "#/embed/spiUart/readTimeout",
				"title": "Read timeout",
				"description": "Timeout in 10ms unit to wait for data to be read after data is written. Set to 255 to read no data.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			},
			"writtenData": {
				"$id": "#/embed/spiUart/writtenData",
				"title": "Data to write",
				"description": "Data to be written to TX buffer.",
				"type": "array",
				"minItems": 1,
				"maxItems": 58,
				"additionalItems": false,
				"items": {
					"title": "Data byte",
					"description": "Byte of data to be written to TX buffer.",
					"type": "integer",
					"minimum": 0,
					"maximum": 255
				}
			},
			"readData": {
				"$id": "#/embed/spiUart/readData",
				"title": "Data read",
				"description": "Data read from the RX buffer.",
				"type": "array",
				"maxItems": 56,
				"additionalItems": false,
				"items": {
					"title": "Data byte",
					"description": "Data byte read from the RX buffer.",
					"type": "integer",
					"minimum": 0,
					"maximum": 255
				}
			}
		},
		"io": {
			"mask": {
				"$id": "#/embed/io/mask",
				"title": "Pin mask",
				"description": "Masks pins of the port, allowing for filtering which pins are set.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			}
		},
		"frc": {
			"frcCommand": {
				"$id": "#/embed/frc/frcCommand",
				"title": "FRC command",
				"description": "Specifies data to be collected.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			},
			"selectedNodes": {
				"$id": "#/embed/frc/selectedNodes",
				"title": "Node array",
				"description": "Array of node device addresses.",
				"type": "array",
				"minItems": 1,
				"maxItems": 239,
				"additionalItems": false,
				"items": {
					"title": "Node address",
					"description": "Address of node device in network.",
					"type": "integer",
					"minimum": 1,
					"maximum": 239
				}
			},
			"status": {
				"$id": "#/embed/frc/status",
				"title": "FRC status",
				"description": "Return code of Send FRC operation. Equal to number of responding nodes, or an error code if the value is >= 240. See IQRF OS documentation for details.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			},
			"frcByte": {
				"$id": "#/embed/frc/frcByte",
				"title": "Data byte",
				"description": "FRC data byte.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			},
			"userByte": {
				"$id": "#/embed/frc/userByte",
				"title": "Data byte",
				"description": "Byte of user defined data.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			}
		}
	},
	"iqmesh": {
		"general": {
			"repeat": {
				"$id": "#/iqmesh/general/repeat",
				"title": "DPA request repeat",
				"description": "Maximum number of DPA request retries in case of a failure.",
				"type": "integer",
				"minimum": 1
			},
			"progress": {
				"$id": "#/iqmesh/general/progress",
				"title": "Operation progress",
				"description": "Operation algorithm progress in percentages.",
				"type": "integer",
				"minimum": 0,
				"maximum": 100
			}
		},
		"device": {
			"manufacturer": {
				"$id": "#/iqmesh/device/manufacturer",
				"title": "Manufacturer",
				"description": "Name of manufacturer.",
				"type": "string"
			},
			"product": {
				"$id": "#/iqmesh/device/product",
				"title": "Product",
				"description": "Name of product.",
				"type": "string"
			},
			"standards": {
				"$id": "#/iqmesh/device/standards",
				"title": "Standards",
				"description": "Array of implemented standard peripherals.",
				"type": "array",
				"additionalItems": false,
				"items": {
					"title": "Standard",
					"description": "Implemented standard peripheral.",
					"type": "string"
				}
			},
			"rssi": {
				"$id": "#/iqmesh/device/rssi",
				"title": "RSSI",
				"description": "RSSI in a string representation.",
				"type": "string",
				"pattern": "^(-)\\d+ dBm$"
			},
			"supplyVoltage": {
				"$id": "#/iqmesh/device/supplyVoltage",
				"title": "Supply voltage",
				"description": "Supply voltage in a string representation.",
				"type": "string",
				"pattern": "^\\d(\\.\\d)? V$"
			},
			"os": {
				"mid": {
					"$id": "#/iqmesh/device/os/mid",
					"title": "MID string",
					"description": "Module ID in a hexadecimal string representation.",
					"type": "string",
					"pattern": "^[0-9a-fA-F]{8}$"
				},
				"version": {
					"$id": "#/iqmesh/device/os/version",
					"title": "OS version string",
					"description": "OS version in a string representation.",
					"type": "string",
					"pattern": "^\\d\\.\\d{2}[DG]$"
				},
				"build": {
					"$id": "#/iqmesh/device/os/build",
					"title": "OS build",
					"description": "OS build in a string representation.",
					"type": "string",
					"pattern": "^[0-9a-fA-F]{4}$"
				}
			},
			"trMcu": {
				"trType": {
					"$id": "#/iqmesh/device/trMcu/trType",
					"title": "TR MCU type",
					"description": "Transciever type in a string representation.",
					"type": "string",
					"pattern": "^(\\(DC\\))?TR-\\d{2}[DG](x)?$"
				},
				"mcuType": {
					"$id": "#/iqmesh/device/trMcu/mcuType",
					"title": "MCU type",
					"description": "MCU type in a string representation.",
					"type": "string",
					"enum": [
						"PIC16LF1938",
						"PIC16LF18877"
					]
				},
				"fccCertified": {
					"$id": "#/iqmesh/device/trMcu/fccCertified",
					"title": "FCC certification",
					"description": "Indicates whether device is FCC certified.",
					"type": "boolean"
				}
			},
			"flags": {
				"insufficientOsBuild": {
					"$id": "#/iqmesh/device/flags/insufficientOsBuild",
					"title": "Insufficient OS build",
					"description": "Indicates whether the OS build is insufficient for the used DPA version.",
					"type": "boolean"
				},
				"interfaceType": {
					"$id": "#/iqmesh/device/flags/interfaceType",
					"title": "Supported interface",
					"description": "Specifies interface supported by the uploaded DPA plugin.",
					"type": "string",
					"enum": [
						"SPI",
						"UART"
					]
				},
				"dpaHandlerDetected": {
					"$id": "#/iqmesh/device/flags/dpaHandlerDetected",
					"title": "DPA handler detected",
					"description": "Indicates that a Custom DPA Handler has been uploaded to the device.",
					"type": "boolean"
				},
				"dpaHandlerNotDetectedButEnabled": {
					"$id": "#/iqmesh/device/flags/dpaHandlerNotDetectedButEnabled",
					"title": "Missing DPA handler",
					"description": "Indicates that a Custom DPA Handler hasn't been detected, but is enabled in TR configuration.",
					"type": "boolean"
				},
				"noInterfaceSupported": {
					"$id": "#/iqmesh/device/flags/noInterfaceSupported",
					"title": "No interface supported",
					"description": "Indicates that no interface is supported by the uploaded DPA plugin.",
					"type": "boolean"
				},
				"iqrfOsChanged": {
					"$id": "#/iqmesh/device/flags/iqrfOsChanged",
					"title": "IQRF OS changed",
					"description": "Indicates whether IQRF OS has changed from factory configuration.",
					"type": "boolean"
				},
				"frcAggregationEnabled": {
					"$id": "#/iqmesh/device/flags/frcAggregationEnabled",
					"title": "FRC aggregation",
					"description": "Indicates whether FRC aggregation is enabled.",
					"type": "boolean"
				}
			},
			"slotLimits": {
				"shortestTimeslot": {
					"$id": "#/iqmesh/device/slotLimits/shortestTimeslot",
					"title": "Shortest timeslot",
					"description": "Shortest timeslot length.",
					"type": "string",
					"pattern": "^([3-9][0-9]|1[0-7][0-9]|180) ms$"
				},
				"longestTimeslot": {
					"$id": "#/iqmesh/device/slotLimits/longestTimeslot",
					"title": "Longest timeslot",
					"description": "Longest timeslot length.",
					"type": "string",
					"pattern": "^([3-9][0-9]|1[0-7][0-9]|180) ms$"
				}
			},
			"dpaVer": {
				"$id": "#/iqmesh/device/dpaVer",
				"title": "DPA version",
				"description": "DPA version in a string representation.",
				"type": "string",
				"pattern": "^\\d\\.\\d{2}$"
			},
			"enumFlags": {
				"rfModeStd": {
					"$id": "#/iqmesh/device/enumFlags/rfModeStd",
					"title": "STD-RX mode",
					"description": "Device works in STD-RX mode.",
					"type": "boolean"
				},
				"rfModeLp": {
					"$id": "#/iqmesh/device/enumFlags/rfModeLp",
					"title": "LP-RX mode",
					"description": "Device works in LP-RX mode.",
					"type": "boolean"
				},
				"stdAndLpNetwork": {
					"$id": "#/iqmesh/device/enumFlags/stdAndLpNetwork",
					"title": "STD+LP network",
					"description": "STD+LP network is running, otherwise STD network.",
					"type": "boolean"
				}
			}
		},
		"backupRestore": {
			"data": {
				"$id": "#/iqmesh/backupRestore/data",
				"title": "Backup data",
				"description": "Device Backup Data (hex-string format).",
				"type": "string",
				"pattern": "^[0-9a-fA-F]+$"
			}
		}
	},
	"raw": {
		"request": {
			"$id": "#/raw/request",
			"title": "Request DPA",
			"$ref": "#/patterns/requestDpa"
		},
		"response": {
			"$id": "#/raw/response",
			"title": "Response DPA",
			"$ref": "#/patterns/responseDpa"
		}
	},
	"standard": {
		"index": {
			"$id": "#/standard/index",
			"title": "Device index",
			"description": "Zero based index of the device to set.",
			"type": "integer",
			"minimum": 0,
			"maximum": 31
		},
		"time": {
			"$id": "#/standard/time",
			"title": "ON timer",
			"description": "Time in seconds. Allowed values are <1;127> or 60*<1;127>.",
			"type": "integer",
			"anyOf": [
				{
					"minimum": 1,
					"maximum": 127
				},
				{
					"minimum": 60,
					"maximum": 7620,
					"multipleOf": 60
				}
			]
		},
		"dali": {
			"commands": {
				"$id": "#/standard/dali/commands",
				"title": "Array of DALI commands",
				"description": "Array of 2 bytes (16 bits) wide values, each representing one DALI command at the standard DALI format YAAAAAAS+DDDDDDDD.",
				"type": "array",
				"additionalItems": false,
				"minItems": 1,
				"items": {
					"title": "DALI command",
					"description": "16bit DALI command value",
					"type": "integer",
					"minimum": 0,
					"maximum": 65535
				}
			},
			"status": {
				"$id": "#/standard/dali/status",
				"title": "DALI status",
				"description": "DALI command status: See IQRF DALI standard for details.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			},
			"value": {
				"$id": "#/standard/dali/value",
				"title": "DALI value",
				"description": "DALI command value: See IQRF DALI standard for details.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			}
		},
		"light": {
			"power": {
				"$id": "#/standard/light/power",
				"title": "Light power",
				"type": "integer",
				"oneOf": [
					{
						"minimum": 0,
						"maximum": 100
					},
					{
						"const": 127
					}
				]
			},
			"prevVals": {
				"$id": "#/standard/light/prevVals",
				"title": "Previous power",
				"description": "Array integers corresponding to the previous power level of each selected light. If the unimplemented light was selected the returned value is 0.",
				"type": "array",
				"additionalItems": false,
				"items": {
					"title": "Light power",
					"description": "Power of a selected light",
					"type": "integer",
					"minimum": 0,
					"maximum": 100
				}
			}
		}
	},
	"scheduler": {
		"clientId": {
			"$id": "#/scheduler/clientId",
			"title": "Client ID",
			"description": "Client identifier associated with a subset of scheduler tasks.",
			"type": "string"
		},
		"taskId": {
			"$id": "#/scheduler/taskId",
			"title": "Task ID",
			"description": "Scheduler task identifier.",
			"type": "integer",
			"minimum": 0
		},
		"task": {
			"$id": "#/scheduler/task",
			"title": "Scheduler task(s)",
			"description": "Scheduler task object or array of scheduler task objects.",
			"oneOf": [
				{
					"$ref": "#/scheduler/taskDetail"
				},
				{
					"title": "Scheduler tasks",
					"description": "Array of scheduler task objects.",
					"type": "array",
					"minItems": 1,
					"additionalItems": false,
					"items": {
						"$ref": "#/scheduler/taskDetail"
					}
				}
			]
		},
		"taskDetail": {
			"$id": "#/scheduler/taskDetail",
			"title": "Scheduler task",
			"description": "Scheduler task object.",
			"type": "object",
			"required": [
				"messaging",
				"message"
			],
			"additionalProperties": false,
			"properties": {
				"messaging": {
					"title": "Messaging",
					"description": "Messaging service identifier(s), used to determine which service shall send messages.",
					"oneOf": [
						{
							"type": "string",
							"example": "MqttMessaging"
						},
						{
							"type": "array",
							"minItems": 1,
							"additionalItems": false,
							"items": {
								"type": "string",
								"pattern": "^[^&]+$"
							},
							"example": [
								"MqMessaging",
								"MqttMessaging"
							]
						}
					]
				},
				"message": {
					"oneOf": [
						{
							"$ref": "file://infoDaemon_Enumeration-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_GetBinaryOutputs-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_GetDalis-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_GetLights-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_GetMidMetaData-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_GetNodeMetaData-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_GetNodes-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_GetSensors-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_MidMetaDataAnnotate-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_OrphanedMids-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_Reset-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_SetMidMetaData-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_SetNodeMetaData-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_AutoNetwork-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_Backup-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_BondNodeLocal-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_EnumerateDevice-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_OtaUpload-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_ReadTrConf-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_RemoveBond-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_RemoveBondOnlyInC-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_Restore-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_SmartConnect-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_WriteTrConf-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfBinaryoutput_Enumerate-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfBinaryoutput_SetOutput-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfDali_Frc-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfDali_SendCommands-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfDali_SendCommandsAsync-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_AddrInfo-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_AuthorizeBond-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_Backup-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_BondNode-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_BondedDevices-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_ClearAllBonds-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_ClearRemotelyBondedMid-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_DiscoveredDevices-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_Discovery-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_DiscoveryData-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_EnableRemoteBonding-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_ReadRemotelyBondedMid-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_RebondNode-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_RemoveBond-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_Restore-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_SetDpaParams-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_SetHops-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_SetMID-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_SmartConnect-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedEeeprom_Read-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedEeeprom_Write-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedEeprom_Read-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedEeprom_Write-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedExplore_Enumerate-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedExplore_MorePeripheralsInformation-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedExplore_PeripheralInformation-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedFrc_ExtraResult-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedFrc_Send-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedFrc_SendSelective-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedFrc_SetParams-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedIo_Direction-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedIo_Get-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedIo_Set-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedLedg_Flashing-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedLedg_Get-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedLedg_Pulse-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedLedg_Set-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedLedr_Flashing-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedLedr_Get-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedLedr_Pulse-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedLedr_Set-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedNode_Backup-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedNode_ClearRemotelyBondedMid-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedNode_EnableRemoteBonding-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedNode_Read-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedNode_ReadRemotelyBondedMid-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedNode_RemoveBond-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedNode_Restore-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedNode_ValidateBonds-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_Batch-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_FactorySettings-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_Indicate-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_LoadCode-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_Read-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_ReadCfg-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_Reset-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_Restart-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_Rfpgm-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_SelectiveBatch-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_SetSecurity-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_Sleep-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_TestRfSignal-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_WriteCfg-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_WriteCfgByte-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedRam_Read-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedRam_Write-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedSpi_WriteRead-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedThermometer_Read-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedUart_ClearWriteRead-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedUart_Close-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedUart_Open-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedUart_WriteRead-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfLight_DecrementPower-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfLight_Enumerate-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfLight_IncrementPower-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfLight_SetPower-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfRaw-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfRawHdp-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfSensor_Enumerate-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfSensor_Frc-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfSensor_ReadSensorsWithTypes-request-1-0-0.json"
						}
					]
				}
			}
		},
		"timeSpec": {
			"$id": "#/scheduler/timeSpec",
			"title": "Time specification",
			"description": "Configuration of time-based task execution.",
			"type": "object",
			"required": [
				"cronTime",
				"exactTime",
				"startTime",
				"periodic",
				"period"
			],
			"additionalProperties": false,
			"properties": {
				"cronTime": {
					"title": "Cron time",
					"description": "7 field cron time syntax.",
					"type": "array",
					"minItems": 7,
					"maxItems": 7,
					"additionalItems": false,
					"items": [
						{
							"title": "Seconds field",
							"description": "5 = 5 seconds past minute, * = every second, */5 = every 5 seconds.",
							"type": "string",
							"pattern": "^([0-9]|[1-5][0-9])|\\*(/\\d+)?$"
						},
						{
							"title": "Minutes field",
							"description": "5 = 5 minutes past hour, * = every minute, */5 = every 5 minutes.",
							"type": "string",
							"pattern": "^([0-9]|[1-5][0-9])|\\*(/\\d+)?$"
						},
						{
							"title": "Hours field",
							"description": "5 = at 5 AM, * = every hour, */5 = every 5 hours.",
							"type": "string",
							"pattern": "^([0-9]|1[0-9]|2[0-3])|\\*(/\\d+)?$"
						},
						{
							"title": "Days of month field",
							"description": "5 = 5th day of the month, * = every day, */5 = every 5 days.",
							"type": "string",
							"pattern": "^([12][0-9]|3[01])|\\*(/\\d+)?$"
						},
						{
							"title": "Months field",
							"description": "5 = 5th month of the year, * = every month, */5 = every 5 months.",
							"type": "string",
							"pattern": "^([0-9]|1[0-2])|\\*(/\\d+)?$"
						},
						{
							"title": "Day of the week field",
							"description": "5 = only on Friday, * = every week day, */5 = every 5 days a week; 0 sunday, 1 - monday, 6 - saturday.",
							"type": "string",
							"pattern": "^[0-6]|\\*(/\\d+)?$"
						},
						{
							"title": "Years field",
							"description": "2025 = only in year 2025, * = every year, */5 = every 5 years; 1970+.",
							"type": "string",
							"pattern": "^19[789]\\d|2\\d{3}|\\*(/\\d+)?$"
						}
					]
				},
				"exactTime": {
					"title": "Oneshot task",
					"description": "Schedule task to execute once at a specific time.",
					"type": "boolean"
				},
				"startTime": {
					"title": "Scheduled time",
					"description": "Scheduled execution time for oneshot task.",
					"oneOf": [
						{
							"$ref": "#/patterns/timestamp"
						},
						{
							"const": ""
						}
					]
				},
				"periodic": {
					"title": "Periodic task",
					"description": "Schedule task to be executed periodically.",
					"type": "boolean"
				},
				"period": {
					"title": "Task period",
					"description": "Period to wait between executing a task.",
					"type": "integer",
					"minimum": 0
				}
			}
		},
		"persist": {
			"$id": "#/scheduler/persist",
			"title": "Task persistence.",
			"description": "If set to true, task will persist through Daemon restart.",
			"type": "boolean"
		}
	},
	"patterns": {
		"requestDpa": {
			"$id": "#/patterns/requestDpa",
			"type": "string",
			"description": "Binary buffer with DPA request",
			"pattern": "^([0-9a-fA-F]){2}\\.00\\.(0[0-9a-dA-D]|2[0-9a-fA-F]|3[0-9a-fA-F]|4[aAbB]|5[eE]|71|7[fF]|[fF][eE]|[fF]{2})\\.[0-7][0-9a-fA-F](\\.[0-9a-fA-F]{2}){2}(\\.[0-9a-fA-F]{2}){0,58}(.)?$"
		},
		"confirmationDpa": {
			"$id": "#/patterns/confirmationDpa",
			"type": "string",
			"description": "Binary buffer with DPA confirmation",
			"oneOf": [
				{
					"pattern": "^([0-9a-fA-F]){2}\\.00\\.(0[0-9a-dA-D]|2[0-9a-fA-F]|3[0-9a-fA-F]|4[aAbB]|5[eE]|71|7[fF]|[fF][eE]|[fF]{2})\\.[0-7][0-9a-fA-F](\\.[0-9a-fA-F]{2}){2}\\.[fF]{2}(\\.[0-9a-fA-F]{2}){4}(.)?$"
				},
				{
					"const": ""
				}
			]
		},
		"responseDpa": {
			"$id": "#/patterns/responseDpa",
			"type": "string",
			"description": "Binary buffer with DPA response",
			"pattern": "^([0-9a-fA-F]){2}\\.00\\.(0[0-9a-dA-D]|2[0-9a-fA-F]|3[0-9a-eA-E]|4[aAbB]|5[eE]|71|7[fF]|[fF][eE]|[fF]{2})\\.(3[fF]|[8-9a-fA-F][0-9a-fA-F])(\\.[0-9a-fA-F]{2}){2}\\.(0[0-9]|10|[23][0-9a-fA-F]|40|80|[fF]{2})\\.[0-9a-fA-F]{2}(\\.[0-9a-fA-F]{2}){0,56}(.)?$"
		},
		"timestamp": {
			"$id": "#/patterns/timestamp",
			"type": "string",
			"pattern": "^(\\d{4})-((0[13578]|1[02])-(0[1-9]|1\\d|2\\d|3[01])|(0[469]|11)-(0[1-9]|1\\d|2\\d|30)|02-(0[1-9]|1\\d|2\\d))T(0\\d|1\\d|2[0-3])(:([0-5]\\d)){2}.(\\d{3})\\+(0\\d|1\\d|2[0-3]):([0-5]\\d)$"
		}
	}
}