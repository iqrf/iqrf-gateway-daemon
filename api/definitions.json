{
	"general": {
		"msgId": {
			"$id": "#/general/msgId",
			"title": "Message ID",
			"description": "Message identification for binding request with response.",
			"type": "string"
		},
		"mType": {
			"$id": "#/general/mType",
			"title": "Message type"
		},
		"timeout": {
			"$id": "#/general/timeout",
			"title": "Request timeout",
			"description": "Timeout to wait for IQRF DPA response.",
			"type": "integer",
			"minimum": 500
		},
		"nAdr": {
			"$id": "#/general/nAdr",
			"title": "Node address",
			"description": "Network device address.",
			"type": "integer",
			"minimum": 0,
			"maximum": 239
		},
		"pNum": {
			"$id": "#/general/pNum",
			"title": "Peripheral number",
			"description": "Integer that corresponds to the respective peripheral.",
			"type": "integer",
			"oneOf": [
				{
					"enum": [0,1,2,3,4,5,6,7,9,10,12,13,74,75,94,113]
				},
				{
					"minimum": 32,
					"maximum": 62
				}
			]
		},
		"hwpId": {
			"$id": "#/general/hwpid",
			"title": "Device HWPID",
			"description": "Hardware profile identification.",
			"type": "integer",
			"minimum": 0,
			"maximum": 65535,
			"default": 65535
		},
		"request": {
			"pCmd": {
				"$id": "#/general/request/pCmd",
				"title": "Peripheral command",
				"description": "Integer that corresponds to the respective peripheral command.",
				"type": "integer",
				"minimum": 0,
				"maximum": 127
			},
			"pData": {
				"$id": "#/general/request/pData",
				"title": "Request packet data",
				"description": "Binary buffer with DPA request data.",
				"type": "array",
				"additionalItems": false,
				"minItems": 0,
				"maxItems": 58,
				"items": {
					"$id": "#/general/pData/items",
					"title": "Data byte",
					"description": "Single packet data byte.",
					"type": "integer",
					"minimum": 0,
					"maximum": 255
				}
			},
			"returnVerbose": {
				"$id": "#/general/request/returnVerbose",
				"title": "Verbose response",
				"description": "Flag that includes additional parameters in the response.",
				"type": "boolean"
			},
			"selectedNodes": {
				"$id": "#/general/request/selectedNodes",
				"title": "Array of nodes",
				"description": "Array of integer values corresponding to the selected node addresses. Use default value to select all nodes and use sleepAfterFrc parameter.",
				"type": "array",
				"additionalItems": false,
				"items": {
					"$id": "#/general/request/selectedNodes/items",
					"title": "Node address",
					"description": "Address of node device in network.",
					"type": "integer",
					"minimum": 0,
					"maximum": 239
				}
			}
		},
		"response": {
			"pCmd": {
				"$id": "#/general/response/pCmd",
				"title": "Peripheral command response",
				"description": "Integer that corresponds to the respective peripheral command response.",
				"type": "integer",
				"minimum": 128,
				"maximum": 255
			},
			"pData": {
				"$id": "#/general/response/pData",
				"title": "Response packet data",
				"description": "Binary buffer with DPA response data.",
				"type": "array",
				"additionalItems": false,
				"minItems": 0,
				"maxItems": 56,
				"items": {
					"$id": "#/general/response/pData/items",
					"title": "Data byte",
					"description": "Single packet data byte.",
					"type": "integer",
					"minimum": 0,
					"maximum": 255
				}
			},
			"rCode": {
				"$id": "#/general/response/rCode",
				"title": "Return code",
				"description": "DPA error code.",
				"type": "integer",
				"minimum": 0
			},
			"dpaVal": {
				"$id": "#/general/response/dpaVal",
				"title": "DPA value",
				"description": "DPA value.",
				"type": "integer",
				"minimum": 0
			},
			"errorStr": {
				"$id": "#/general/response/errorStr",
				"title": "Error string",
				"description": "Error description from JS drivers.",
				"type": "string"							
			},
			"insId": {
				"$id": "#/general/response/insId",
				"title": "Instance ID",
				"description": "IQRF GW daemon instance identification.",
				"ty,pe": "string"
			},
			"status": {
				"$id": "#/general/response/status",
				"title": "Status code",
				"description": "Status of operation.",
				"type": "integer"
			},
			"statusStr": {
				"$id": "#/general/response/statusStr",
				"title": "Status string",
				"description": "IQRF GW daemon API (general or mType) status in string form.",
				"type": "string"
			},
			"raw": {
				"$id": "#/general/response/raw",
				"title": "Raw DPA messages",
				"description": "Returns array of objects req-cnf-rsp, see its description.",
				"type": "array",
				"additionalItems": false,
				"items": {
					"$id": "#/general/response/raw/items",
					"title": "Raw DPA messages object",
					"description": "Object containing Request, Confirmation and Response DPA messages and their timestamps.",
					"type": "object",
					"required": [
						"request",
						"requestTs",
						"confirmation",
						"confirmationTs",
						"response",
						"responseTs"
					],
					"additionalProperties": false,
					"properties": {
						"request": {
							"$id": "#/general/response/raw/items/properties/request",
							"title": "Request DPA",
							"oneOf": [
								{
									"$ref": "#/patterns/requestDpa"
								},
								{
									"const": ""
								}
							]
						},
						"requestTs": {
							"$id": "#/general/response/raw/items/properties/requestTs",
							"title": "Request timestamp",
							"description": "YYYY-MM-DDTHH:MM:SS.SSS±HH:MM",
							"oneOf": [
								{
									"$ref": "#/patterns/timestamp"
								},
								{
									"const": ""
								}
							]
						},
						"confirmation": {
							"$id": "#/general/response/raw/items/properties/confirmation",
							"title": "Confirmation DPA",
							"$ref": "#/patterns/confirmationDpa"
						},
						"confirmationTs": {
							"$id": "#/general/response/raw/items/properties/confirmationTs",
							"title": "Confirmation timestamp",
							"description": "YYYY-MM-DDTHH:MM:SS.SSS±HH:MM",
							"oneOf": [
								{
									"$ref": "#/patterns/timestamp"
								},
								{
									"const": ""
								}
							]
						},
						"response": {
							"$id": "#/general/response/raw/items/properties/response",
							"title": "Response DPA",
							"oneOf": [
								{
									"$ref": "#/patterns/responseDpa"
								},
								{
									"const": ""
								}
							]
						},
						"responseTs": {
							"$id": "#/general/response/raw/items/properties/responseTs",
							"title": "Response timestamp",
							"description": "YYYY-MM-DDTHH:MM:SS.SSS±HH:MM",
							"oneOf": [
								{
									"$ref": "#/patterns/timestamp"
								},
								{
									"const": ""
								}
							]
						}
					}
				}
			}
		}
	},
	"embed": {
		"led": {
			"onOff": {
				"$id": "#/embed/led/onOff",
				"title": "LED status",
				"description": "LED ON/OFF status.",
				"type": "boolean"
			}
		},
		"uart": {
			"readTimeout": {
				"$id": "#/embed/uart/readTimeout",
				"title": "Read timeout",
				"description": "Timeout in 10ms unit to wait for data to be read after data is written. Set to 255 to read no data.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			},
			"writtenData": {
				"$id": "#/embed/uart/writtenData",
				"title": "Data to write",
				"description": "Data to be written to TX buffer.",
				"type": "array",
				"minItems": 1,
				"maxItems": 58,
				"additionalItems": false,
				"items": {
					"title": "Data byte",
					"description": "Byte of data to be written to TX buffer.",
					"type": "integer",
					"minimum": 0,
					"maximum": 255
				}
			},
			"readData": {
				"$id": "#/embed/uart/readData",
				"title": "Data read",
				"description": "Data read from the RX buffer.",
				"type": "array",
				"maxItems": 56,
				"additionalItems": false,
				"items": {
					"title": "Data byte",
					"description": "Data byte read from the RX buffer.",
					"type": "integer",
					"minimum": 0,
					"maximum": 255
				}
			}
		}
	},
	"raw": {
		"request": {
			"$id": "#/raw/request",
			"title": "Request DPA",
			"$ref": "#/patterns/requestDpa"
		},
		"response": {
			"$id": "#/raw/response",
			"title": "Response DPA",
			"$ref": "#/patterns/responseDpa"
		}
	},
	"standard": {
		"index": {
			"$id": "#/standard/index",
			"title": "Device index",
			"description": "Zero based index of the device to set.",
			"type": "integer",
			"minimum": 0,
			"maximum": 31
		},
		"time": {
			"$id": "#/standard/time",
			"title": "ON timer",
			"description": "Time in seconds. Allowed values are <1;127> or 60*<1;127>.",
			"type": "integer",
			"anyOf": [
				{
					"minimum": 1,
					"maximum": 127
				},
				{
					"minimum": 60,
					"maximum": 7620,
					"multipleOf": 60
				}
			]
		},
		"dali": {
			"commands": {
				"$id": "#/standard/dali/commands",
				"title": "Array of DALI commands",
				"description": "Array of 2 bytes (16 bits) wide values, each representing one DALI command at the standard DALI format YAAAAAAS+DDDDDDDD.",
				"type": "array",
				"additionalItems": false,
				"minItems": 1,
				"items": {
					"title": "DALI command",
					"description": "16bit DALI command value",
					"type": "integer",
					"minimum": 0,
					"maximum": 65535
				}
			},
			"status": {
				"$id": "#/standard/dali/status",
				"title": "DALI status",
				"description": "DALI command status: See IQRF DALI standard for details.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			},
			"value": {
				"$id": "#/standard/dali/value",
				"title": "DALI value",
				"description": "DALI command value: See IQRF DALI standard for details.",
				"type": "integer",
				"minimum": 0,
				"maximum": 255
			}
		},
		"light": {
			"power": {
				"$id": "#/standard/light/power",
				"title": "Light power",
				"type": "integer",
				"oneOf": [
					{
						"minimum": 0,
						"maximum": 100
					},
					{
						"const": 127
					}
				]
			},
			"prevVals": {
				"$id": "#/standard/light/prevVals",
				"title": "Previous power",
				"description": "Array integers corresponding to the previous power level of each selected light. If the unimplemented light was selected the returned value is 0.",
				"type": "array",
				"additionalItems": false,
				"items": {
					"title": "Light power",
					"description": "Power of a selected light",
					"type": "integer",
					"minimum": 0,
					"maximum": 100
				}
			}
		}
	},
	"scheduler": {
		"clientId": {
			"$id": "#/scheduler/clientId",
			"title": "Client ID",
			"description": "Client identifier associated with a subset of scheduler tasks.",
			"type": "string"
		},
		"taskId": {
			"$id": "#/scheduler/taskId",
			"title": "Task ID",
			"description": "Scheduler task identifier.",
			"type": "integer",
			"minimum": 0
		},
		"task": {
			"$id": "#/scheduler/task",
			"title": "Scheduler task(s)",
			"description": "Scheduler task object or array of scheduler task objects.",
			"oneOf": [
				{
					"$ref": "#/scheduler/taskDetail"
				},
				{
					"title": "Scheduler tasks",
					"description": "Array of scheduler task objects.",
					"type": "array",
					"minItems": 1,
					"additionalItems": false,
					"items": {
						"$ref": "#/scheduler/taskDetail"
					}
				}
			]
		},
		"taskDetail": {
			"$id": "#/scheduler/taskDetail",
			"title": "Scheduler task",
			"description": "Scheduler task object.",
			"type": "object",
			"required": [
				"messaging",
				"message"
			],
			"additionalProperties": false,
			"properties": {
				"messaging": {
					"title": "Messaging",
					"description": "Messaging service identifier(s), used to determine which service shall send messages.",
					"oneOf": [
						{
							"type": "string",
							"example": "MqttMessaging"
						},
						{
							"type": "array",
							"minItems": 1,
							"additionalItems": false,
							"items": {
								"type": "string",
								"pattern": "^[^&]+$"
							},
							"example": [
								"MqMessaging",
								"MqttMessaging"
							]
						}
					]
				},
				"message": {
					"oneOf": [
						{
							"$ref": "file://infoDaemon_Enumeration-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_GetBinaryOutputs-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_GetDalis-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_GetLights-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_GetMidMetaData-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_GetNodeMetaData-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_GetNodes-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_GetSensors-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_MidMetaDataAnnotate-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_OrphanedMids-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_Reset-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_SetMidMetaData-request-1-0-0.json"
						},
						{
							"$ref": "file://infoDaemon_SetNodeMetaData-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_AutoNetwork-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_Backup-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_BondNodeLocal-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_EnumerateDevice-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_OtaUpload-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_ReadTrConf-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_RemoveBond-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_RemoveBondOnlyInC-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_Restore-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_SmartConnect-request-1-0-0.json"
						},
						{
							"$ref": "file://iqmeshNetwork_WriteTrConf-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfBinaryoutput_Enumerate-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfBinaryoutput_SetOutput-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfDali_Frc-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfDali_SendCommands-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfDali_SendCommandsAsync-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_AddrInfo-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_AuthorizeBond-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_Backup-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_BondNode-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_BondedDevices-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_ClearAllBonds-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_ClearRemotelyBondedMid-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_DiscoveredDevices-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_Discovery-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_DiscoveryData-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_EnableRemoteBonding-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_ReadRemotelyBondedMid-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_RebondNode-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_RemoveBond-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_Restore-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_SetDpaParams-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_SetHops-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_SetMID-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedCoordinator_SmartConnect-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedEeeprom_Read-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedEeeprom_Write-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedEeprom_Read-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedEeprom_Write-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedExplore_Enumerate-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedExplore_MorePeripheralsInformation-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedExplore_PeripheralInformation-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedFrc_ExtraResult-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedFrc_Send-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedFrc_SendSelective-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedFrc_SetParams-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedIo_Direction-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedIo_Get-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedIo_Set-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedLedg_Flashing-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedLedg_Get-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedLedg_Pulse-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedLedg_Set-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedLedr_Flashing-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedLedr_Get-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedLedr_Pulse-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedLedr_Set-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedNode_Backup-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedNode_ClearRemotelyBondedMid-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedNode_EnableRemoteBonding-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedNode_Read-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedNode_ReadRemotelyBondedMid-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedNode_RemoveBond-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedNode_Restore-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedNode_ValidateBonds-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_Batch-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_FactorySettings-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_Indicate-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_LoadCode-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_Read-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_ReadCfg-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_Reset-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_Restart-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_Rfpgm-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_SelectiveBatch-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_SetSecurity-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_Sleep-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_TestRfSignal-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_WriteCfg-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedOs_WriteCfgByte-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedRam_Read-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedRam_Write-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedSpi_WriteRead-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedThermometer_Read-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedUart_ClearWriteRead-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedUart_Close-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedUart_Open-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfEmbedUart_WriteRead-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfLight_DecrementPower-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfLight_Enumerate-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfLight_IncrementPower-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfLight_SetPower-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfRaw-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfRawHdp-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfSensor_Enumerate-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfSensor_Frc-request-1-0-0.json"
						},
						{
							"$ref": "file://iqrfSensor_ReadSensorsWithTypes-request-1-0-0.json"
						}
					]
				}
			}
		},
		"timeSpec": {
			"$id": "#/scheduler/timeSpec",
			"title": "Time specification",
			"description": "Configuration of time-based task execution.",
			"type": "object",
			"required": [
				"cronTime",
				"exactTime",
				"startTime",
				"periodic",
				"period"
			],
			"additionalProperties": false,
			"properties": {
				"cronTime": {
					"title": "Cron time",
					"description": "7 field cron time syntax.",
					"type": "array",
					"minItems": 7,
					"maxItems": 7,
					"additionalItems": false,
					"items": [
						{
							"title": "Seconds field",
							"description": "5 = 5 seconds past minute, * = every second, */5 = every 5 seconds.",
							"type": "string",
							"pattern": "^([0-9]|[1-5][0-9])|\\*(/\\d+)?$"
						},
						{
							"title": "Minutes field",
							"description": "5 = 5 minutes past hour, * = every minute, */5 = every 5 minutes.",
							"type": "string",
							"pattern": "^([0-9]|[1-5][0-9])|\\*(/\\d+)?$"
						},
						{
							"title": "Hours field",
							"description": "5 = at 5 AM, * = every hour, */5 = every 5 hours.",
							"type": "string",
							"pattern": "^([0-9]|1[0-9]|2[0-3])|\\*(/\\d+)?$"
						},
						{
							"title": "Days of month field",
							"description": "5 = 5th day of the month, * = every day, */5 = every 5 days.",
							"type": "string",
							"pattern": "^([12][0-9]|3[01])|\\*(/\\d+)?$"
						},
						{
							"title": "Months field",
							"description": "5 = 5th month of the year, * = every month, */5 = every 5 months.",
							"type": "string",
							"pattern": "^([0-9]|1[0-2])|\\*(/\\d+)?$"
						},
						{
							"title": "Day of the week field",
							"description": "5 = only on Friday, * = every week day, */5 = every 5 days a week; 0 sunday, 1 - monday, 6 - saturday.",
							"type": "string",
							"pattern": "^[0-6]|\\*(/\\d+)?$"
						},
						{
							"title": "Years field",
							"description": "2025 = only in year 2025, * = every year, */5 = every 5 years; 1970+.",
							"type": "string",
							"pattern": "^19[789]\\d|2\\d{3}|\\*(/\\d+)?$"
						}
					]
				},
				"exactTime": {
					"title": "Oneshot task",
					"description": "Schedule task to execute once at a specific time.",
					"type": "boolean"
				},
				"startTime": {
					"title": "Scheduled time",
					"description": "Scheduled execution time for oneshot task.",
					"oneOf": [
						{
							"$ref": "#/patterns/timestamp"
						},
						{
							"const": ""
						}
					]
				},
				"periodic": {
					"title": "Periodic task",
					"description": "Schedule task to be executed periodically.",
					"type": "boolean"
				},
				"period": {
					"title": "Task period",
					"description": "Period to wait between executing a task.",
					"type": "integer",
					"minimum": 0
				}
			}
		},
		"persist": {
			"$id": "#/scheduler/persist",
			"title": "Task persistence.",
			"description": "If set to true, task will persist through Daemon restart.",
			"type": "boolean"
		}
	},
	"patterns": {
		"requestDpa": {
			"$id": "#/patterns/requestDpa",
			"type": "string",
			"description": "Binary buffer with DPA request",
			"pattern": "^([0-9a-fA-F]){2}\\.00\\.(0[0-9a-dA-D]|2[0-9a-fA-F]|3[0-9a-fA-F]|4[aAbB]|5[eE]|71|7[fF]|[fF][eE]|[fF]{2})\\.[0-7][0-9a-fA-F](\\.[0-9a-fA-F]{2}){2}(\\.[0-9a-fA-F]{2}){0,58}(.)?$"
		},
		"confirmationDpa": {
			"$id": "#/patterns/confirmationDpa",
			"type": "string",
			"description": "Binary buffer with DPA confirmation",
			"oneOf": [
				{
					"pattern": "^([0-9a-fA-F]){2}\\.00\\.(0[0-9a-dA-D]|2[0-9a-fA-F]|3[0-9a-fA-F]|4[aAbB]|5[eE]|71|7[fF]|[fF][eE]|[fF]{2})\\.[0-7][0-9a-fA-F](\\.[0-9a-fA-F]{2}){2}\\.[fF]{2}(\\.[0-9a-fA-F]{2}){4}(.)?$"
				},
				{
					"const": ""
				}
			]
		},
		"responseDpa": {
			"$id": "#/patterns/responseDpa",
			"type": "string",
			"description": "Binary buffer with DPA response",
			"pattern": "^([0-9a-fA-F]){2}\\.00\\.(0[0-9a-dA-D]|2[0-9a-fA-F]|3[0-9a-eA-E]|4[aAbB]|5[eE]|71|7[fF]|[fF][eE]|[fF]{2})\\.(3[fF]|[8-9a-fA-F][0-9a-fA-F])(\\.[0-9a-fA-F]{2}){2}\\.(0[0-9]|10|[23][0-9a-fA-F]|40|80|[fF]{2})\\.[0-9a-fA-F]{2}(\\.[0-9a-fA-F]{2}){0,56}(.)?$"
		},
		"timestamp": {
			"$id": "#/patterns/timestamp",
			"type": "string",
			"pattern": "^(\\d{4})-((0[13578]|1[02])-(0[1-9]|1\\d|2\\d|3[01])|(0[469]|11)-(0[1-9]|1\\d|2\\d|30)|02-(0[1-9]|1\\d|2\\d))T(0\\d|1\\d|2[0-3])(:([0-5]\\d)){2}.(\\d{3})\\+(0\\d|1\\d|2[0-3]):([0-5]\\d)$"
		}
	}
}