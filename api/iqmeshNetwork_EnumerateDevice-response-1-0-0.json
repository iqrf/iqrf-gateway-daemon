{
  "$schema": "https://json-schema.org/draft-07/schema",
  "title": "IQMESH Network - Enumerate Device response",
  "description": "(c) IQRF Tech",
  "type": "object",
  "required": [
    "mType",
    "data"
  ],
  "additionalProperties": false,
  "properties": {
    "mType": {
      "allOf": [
        { "$ref": "definitions.json#/message/type" },
        { "const": "iqmeshNetwork_EnumerateDevice" }
      ]
    },
    "data": {
      "title": "Message data",
      "description": "Message metadata and body",
      "type": "object",
      "required": [
        "msgId",
        "rsp",
        "status"
      ],
      "additionalProperties": false,
      "properties": {
        "msgId": {
          "$ref": "definitions.json#/message/id"
        },
        "rsp": {
          "title": "Response",
          "description": "Holds response data",
          "type": "object",
          "required": [
            "deviceAddr"
          ],
          "additionalProperties": false,
          "properties": {
            "deviceAddr": {
              "$ref": "definitions.json#/node/address"
            },
            "manufacturer": {
              "$ref": "definitions.json#/device/manufacturer"
            },
            "product": {
              "$ref": "definitions.json#/device/product"
            },
            "standards": {
              "$ref": "definitions.json#/enumeration/standards"
            },
            "discovery": {
              "title": "Discovery",
              "description": "First response.",
              "type": "object",
              "required": [
                "discovered",
                "vrn",
                "zone",
                "parent"
              ],
              "properties": {
                "discovered": {
                  "$ref": "definitions.json#/node/discovered"
                },
                "vrn": {
                  "$ref": "definitions.json#/node/vrn"
                },
                "zone": {
                  "$ref": "definitions.json#/node/zone"
                },
                "parent": {
                  "$ref": "definitions.json#/node/parent"
                }
              }
            },
            "osRead": {
              "title": "OS Read",
              "description": "Embedded peripheral OS - Read response.",
              "type": "object",
              "required": [
                "mid",
                "osVersion",
                "osBuild"
              ],
              "properties": {
                "mid": {
                  "$ref": "definitions.json#/transciever/idStr"
                },
                "osVersion": {
                  "$ref": "definitions.json#/os/versionStr"
                },
                "osBuild": {
                  "$ref": "definitions.json#/os/buildStr"
                },
                "trMcuType": {
                  "$ref": "definitions.json#/transciever/typeParsed"
                },
                "rssi": {
                  "$ref": "definitions.json#/node/rssiStr"
                },
                "supplyVoltage": {
                  "$ref": "definitions.json#/device/supplyVoltageStr"
                },
                "flags": {
                  "$ref": "definitions.json#/os/flagsParsed"
                },
                "slotLimits": {
                  "$ref": "definitions.json#/node/timeslotLimitsParsed"
                }
              }
            },
            "peripheralEnumeration": {
              "title": "Peripheral Enumeration",
              "description": "Device exploration - Peripheral enumeration response.",
              "type": "object",
              "required": [
                "dpaVer",
                "hwpId",
                "hwpIdVer"
              ],
              "properties": {
                "dpaVer": {
                  "$ref": "definitions.json#/dpa/versionStr"
                },
                "hwpId": {
                  "$ref": "definitions.json#/response/hwpId"
                },
                "hwpIdVer": {
                  "$ref": "definitions.json#/device/hwpIdVersion"
                },
                "embPers": {
                  "$ref": "definitions.json#/peripheral/embedded"
                },
                "perNr": {
                  "$ref": "definitions.json#/peripheral/userCnt"
                },
                "userPers": {
                  "$ref": "definitions.json#/peripheral/user"
                },
                "flags": {
                  "$ref": "definitions.json#/enumeration/flagsParsed"
                }
              }
            },
            "trConfiguration": {
              "title": "TR Configuration",
              "description": "Embedded peripheral OS - Read TR Configuration response.",
              "properties": {
                "embPeripherals": {
                  "description": "Array of supported peripherals (their ordinal numbers) on the node, which are enabled in the TR configuration.",
                  "$ref": "definitions.json#/peripheral/embedded"
                },
                "coordinator": {
                  "title": "Coordinator",
                  "description": "If coordinator is enabled.",
                  "type": "boolean"
                },
                "node": {
                  "title": "Node",
                  "description": "If node is enabled.",
                  "type": "boolean"
                },
                "os": {
                  "title": "OS",
                  "description": "If OS is enabled.",
                  "type": "boolean"
                },
                "eeprom": {
                  "title": "EEPROM",
                  "description": "If EEPROM is enabled.",
                  "type": "boolean"
                },
                "eeeprom": {
                  "title": "EEEPROM",
                  "description": "If EEEPROM is enabled.",
                  "type": "boolean"
                },
                "ram": {
                  "title": "RAM",
                  "description": "If RAM is enabled.",
                  "type": "boolean"
                },
                "ledr": {
                  "title": "Red LED",
                  "description": "If LEDR is enabled.",
                  "type": "boolean"
                },
                "ledg": {
                  "title": "Green LED",
                  "description": "If LEDG is enabled.",
                  "type": "boolean"
                },
                "spi": {
                  "title": "SPI",
                  "description": "If SPI is enabled.",
                  "type": "boolean"
                },
                "io": {
                  "title": "IO",
                  "description": "If IO is enabled.",
                  "type": "boolean"
                },
                "thermometer": {
                  "title": "Thermometer",
                  "description": "If thermometer is enabled.",
                  "type": "boolean"
                },
                "pwm": {
                  "title": "PWM",
                  "description": "If PWM is enabled.",
                  "type": "boolean"
                },
                "uart": {
                  "title": "UART",
                  "description": "If UART is enabled.",
                  "type": "boolean"
                },
                "frc": {
                  "title": "FRC",
                  "description": "If FRC is enabled.",
                  "type": "boolean"
                },

                "rfBand": {
                  "title": "Radio frequency band",
                  "description": "Used RF band (in MHz).",
                  "type": "string",
                  "enum": [
                    "868",
                    "916",
                    "433"
                  ]
                },
                "rfChannelA": {
                  "title": "Main RF Channel - A",
                  "description": "Main RF channel A of the network. Valid numbers depend on used RF band.",
                  "type": "integer"
                },
                "rfChannelB": {
                  "title": "Secondary RF Channel - B",
                  "description": "Secondary B channel is used by RFPGM only.",
                  "type": "integer"
                },
                "rfSubChannelA": {
                  "title": "Subordinate RF Channel - A",
                  "description": "Main RF channel A of the optional subordinate network in case the node also plays a role of the coordinator of such network. Valid numbers depend on used RF band. Available for DPA<400.",
                  "type": "integer"
                },
                "rfSubChannelB": {
                  "title": "Subordinate RF Channel - B",
                  "description": "Same as above but second B channel.",
                  "type": "integer"
                },
                "txPower": {
                  "title": "Transmission power",
                  "description": "RF output power. Valid numbers 0-7.",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 7
                },
                "rxFilter": {
                  "title": "Radio signal filter",
                  "description": "RF signal filter. Valid numbers 0-64.",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 64
                },
                "lpRxTimeout": {
                  "title": "LP RX timeout",
                  "description": "Timeout for receiving RF packets at LP mode at N device.",
                  "type": "integer"
                },
                "rfAltDsmChannel": {
                  "title": "Alternative DPA Service mode channel",
                  "description": "A nonzero value specifies an alternative DPA service mode channel.",
                  "type": "integer"
                },
                "localFrcReception": {
                  "title": "Local FRC reception",
                  "description": "If set, then Local FRC reception is enabled at [N].",
                  "type": "boolean"
                },
                "rfPgmEnableAfterReset": {
                  "title": "RFPGM after reset",
                  "description": "If sets, then activates RFPGM invoking by TR module reset.",
                  "type": "boolean"
                },
                "rfPgmTerminateAfter1Min": {
                  "title": "Terminate RFPGM on timeout",
                  "description": "If sets, then terminates RFPGM automatically ~1 minute after reset.",
                  "type": "boolean"
                },
                "rfPgmTerminateMcuPin": {
                  "title": "Terminate RFPGM on PIN",
                  "description": "If sets, then terminates RFPGM by dedicated pin of the TR module.",
                  "type": "boolean"
                },
                "rfPgmDualChannel": {
                  "title": "Dual channel RFPGM",
                  "description": "Enables dual channel function.",
                  "type": "boolean"
                },
                "rfPgmLpMode": {
                  "title": "RFPGM LP mode",
                  "description": "RFPGM receiving mode setting. If set, then LP (low power) Rx mode is used during RFPGM. Otherwise STD (standard) Rx mode is used.",
                  "type": "boolean"
                },
                "rfPgmIncorrectUpload": {
                  "title": "RFPGM incorrect upload",
                  "description": "Read only. Indicates that the last RFPGM has successfully been completed.",
                  "type": "boolean"
                },

                "customDpaHandler": {
                  "title": "Custom DPA handler",
                  "description": "If set, then a Custom DPA handler is called in case of an event.",
                  "type": "boolean"
                },
                "dpaPeerToPeer": {
                  "title": "DPA P2P",
                  "description": "If set, then DP2P is enabled at [N].",
                  "type": "boolean"
                },
                "nodeDpaInterface": {
                  "title": "Node DPA interface",
                  "description": "If set, then Node device can be controlled by a SPI or UART interface. Valid only in DPA version < 4.00",
                  "type": "boolean"
                },
                "uartBaudrate": {
                  "title": "UART Baudrate",
                  "description": "Baud rate of the UART interface if one is used.",
                  "type": "integer"
                },
                "dpaAutoexec": {
                  "title": "DPA Autoexec",
                  "description": "If set, then DPA Autoexec is run at a later stage of the module boot time.",
                  "type": "boolean"
                },
                "routingOff": {
                  "title": "Routing Off",
                  "description": "If set, then the Node device does not route packets on the background.",
                  "type": "boolean"
                },
                "ioSetup": {
                  "title": "IO Setup",
                  "description": "If set, then DPA IO Setup is run at an early stage of the module boot time.",
                  "type": "boolean"
                },
                "peerToPeer": {
                  "title": "P2P",
                  "description": "If set, then device receives also peer-to-peer (non-networking) packets and raises PeerToPeer event.",
                  "type": "boolean"
                },
                "neverSleep": {
                  "title": "Do not sleep",
                  "description": "If set, then unbonded Node using default IQRF buttons never sleeps during the button bonding. From DPA v3.03",
                  "type": "boolean"
                },
                "stdAndLpNetwork": {
                  "title": "STD+LP Network",
                  "description": "If the bit is set, then the [C] controls the STD+LP network; otherwise, it controls the STD network. The bit can only be changed if the network is empty (no [Ns] are bonded) otherwise the network will stop working. From DPA v4.00",
                  "type": "boolean"
                },
                "thermometerSensorPresent": {
                  "title": "Thermometer sensor",
                  "description": "If set, on-board thermometer sensor chip is present.",
                  "type": "boolean"
                },
                "serialEepromPresent": {
                  "title": "Serial EEPROM",
                  "description": "If set, serial EEPROM chip is present.",
                  "type": "boolean"
                },
                "ilType": {
                  "title": "TR Type - IL",
                  "description": "If set, transciever is IL type for Israel region.",
                  "type": "boolean"
                }
              }
            },
            "morePeripheralsInfo": {
              "title": "Information about peripherals",
              "description": "If requested, this object contains the result of Get information of more peripherals result.",
              "type": "array",
              "items": {
                "$ref": "definitions.json#/peripheral/information"
              },
              "maxItems": 14
            }
          }
        },
        "raw": {
          "$ref": "definitions.json#/response/raw"
        },
        "insId": {
          "$ref": "definitions.json#/response/insId"
        },
        "status": {
          "$ref": "definitions.json#/response/status"
        },
        "statusStr": {
          "$ref": "definitions.json#/response/statusStr"
        }
      }
    }
  }
}
