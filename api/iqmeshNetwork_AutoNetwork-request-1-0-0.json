{
	"$schema": "http://json-schema.org/draft-07/schema",
	"title": "IQMESH Network - AutoNetwork",
	"type": "object",
	"required": [
		"mType",
		"data"
	],
	"additionalProperties": false,
	"properties": {
		"mType": {
			"$ref": "file://definitions.json#/general/mType",
			"description": "IQMESH Network management - AutoNetwork request.",
			"const": "iqmeshNetwork_AutoNetwork"
		},
		"data": {
			"$id": "#/properties/data",
			"title": "Message data",
			"description": "Message metadata and body",
			"type": "object",
			"required": [
				"msgId",
				"req"
			],
			"additionalProperties": false,
			"properties": {
				"msgId": {"$ref": "file://definitions.json#/general/msgId"},
				"req": {
					"$id": "#/properties/data/properties/req",
					"title": "Request data",
					"description": "Request body object",
					"type": "object",
					"required": [
						"stopConditions"
					],
					"additionalProperties": false,
					"properties": {
						"discoveryTxPower": {"$ref": "file://definitions.json#/embed/coordinator/txPower"},
						"discoveryBeforeStart": {
							"$id": "#/properties/data/properties/req/properties/discoveryBeforeStart",
							"title": "Discovery before start",
							"description": "Run Discovery before starting the AutoNetwork process.",
							"type": "boolean",
							"default": true
						},
						"skipDiscoveryEachWave": {
							"$id": "#/properties/data/properties/req/properties/skipDiscoveryEachWave",
							"title": "Skip wave Discovery",
							"description": "Skip Discovery in each wave.",
							"type": "boolean",
							"default": false
						},
						"unbondUnrespondingNodes": {
							"$id": "#/properties/data/properties/req/properties/unbondUnrespondingNodes",
							"title": "Unbond unresponding nodes",
							"description": "Unbond nodes that do not respond in each wave to resolve bonding conflicts.",
							"type": "boolean",
							"default": true
						},
						"skipPrebonding": {
							"$id": "#/properties/data/properties/req/properties/skipPrebonding",
							"title": "Skip pre-bonding",
							"description": "Skip SmartConnect process.",
							"type": "boolean",
							"default": false
						},
						"actionRetries": {
							"$id": "#/properties/data/properties/req/properties/actionRetries",
							"title": "DPA transactions retries",
							"description": "Number of DPA transaction retries in case of a failure.",
							"type": "integer",
							"minimum": 1,
							"default": 1
						},
						"overlappingNetworks": {
							"$id": "#/properties/data/properties/req/properties/overlappingNetworks",
							"title": "Overlapping networks",
							"description": "Network building configuration.",
							"type": "object",
							"required": [
								"networks",
								"network"
							],
							"additionalProperties": false,
							"properties": {
								"networks": {
									"$id": "#/properties/data/properties/req/properties/overlappingNetworks/properties/networks",
									"title": "Number of networks",
									"description": "Number of the networks to be built.",
									"type": "integer",
									"minimum": 1,
									"maximum": 50
								},
								"network": {
									"$id": "#/properties/data/properties/req/properties/overlappingNetworks/properties/network",
									"title": "Network number",
									"description": "Network number that will be build.",
									"type": "integer",
									"minimum": 1,
									"maximum": 50
								}
							}
						},
						"hwpidFiltering": {
							"$id": "#/properties/data/properties/req/properties/hwpidFiltering",
							"title": "HWPID filtering",
							"description": "Array of HWPIDs to allow to be added to the network. If a node device HWPID is not among them, it is ignored.",
							"type": "array",
							"items": {"$ref": "file://definitions.json#/general/request/hwpId"}
						},
						"stopConditions": {
							"$id": "#/properties/data/properties/req/properties/stopConditions",
							"title": "Stop conditions",
							"description": "Conditions to be met to stop the AutoNetwork process.",
							"type": "object",
							"required": [
								"emptyWaves"
							],
							"properties": {
								"waves": {
									"$id": "#/properties/data/properties/req/properties/stopConditions/properties/waves",
									"title": "Maximum number of waves.",
									"description": "Stops the AutoNetwork process when the last wave has been completed.",
									"type": "integer",
									"minimum": 1,
									"maximum": 127,
									"default": 2
								},
								"emptyWaves": {
									"$id": "#/properties/data/properties/req/properties/stopConditions/properties/emptyWaves",
									"title": "Empty waves",
									"description": "Stops the AutoNetwork process when a specified number of waves where no new nodes were added to the network have been completed.",
									"type": "integer",
									"minimum": 1,
									"maximum": 127,
									"default": 2
								},
								"numberOfTotalNodes": {
									"$id": "#/properties/data/properties/req/properties/stopConditions/properties/numberOfTotalNodes",
									"title": "Total node count",
									"description": "Stops the AutoNetwork process when the total number of nodes in the network reaches this value.",
									"type": "integer",
									"minimum": 1,
									"maximum": 239
								},
								"numberOfNewNodes": {
									"$id": "#/properties/data/properties/req/properties/stopConditions/properties/numberOfNewNodes",
									"title": "New node count",
									"description": "Stops the AutoNetwork process when the specified number of new nodes have been added to the network.",
									"type": "integer",
									"minimum": 1,
									"maximum": 239
								},
								"abortOnTooManyNodesFound": {
									"$id": "#/properties/data/properties/req/properties/stopConditions/properties/abortOnTooManyNodesFound",
									"title": "Abort on too many nodes",
									"description": "Aborts the AutoNetwork process if too many nodes were found.",
									"type": "boolean",
									"default": false
								}
							}
						}
					}
				},
				"repeat": {"$ref": "file://definitions.json#/iqmesh/general/repeat"},
				"returnVerbose": {"$ref": "file://definitions.json#/general/request/returnVerbose"}
			}
		}
	}
}
