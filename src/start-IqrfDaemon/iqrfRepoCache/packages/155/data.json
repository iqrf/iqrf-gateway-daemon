{"dpa": "0402", "driver": "/* <none> */", "handlerHash": "Not computed", "handlerUrl": "[0000_0000_none]", "hwpid": 0, "hwpidVer": 0, "notes": "[none]", "os": "08C8", "packageID": 155, "standards": [{"driver": "//############################################################################################\r\n\r\n/* Title: Global IQRF driver library routines\r\nSee also: <https://www.iqrf.org/DpaTechGuide/>\r\n\r\nBecause of potential usage of JScript at *Microsoft.ClearScript.Windows.JScriptEngine* the following features cannot used:\r\n\r\n* 'let' instead of 'var' where appropriate\r\n* 'const'\r\n* default parameter values\r\n* binary literals\r\n* enums\r\n*/\r\n\r\n/*\r\nToDo\r\n*/\r\n\r\n/*DriverDescription\r\n{ 'ID' : -1,\r\n  'Type' : 'Standard',  \r\n  'Internal' : false,\r\n  'Versions' : [\r\n    { 'Version' : 0, 'Notes' : [\r\n        'Initial release' ]\r\n    }\r\n  ] }\r\nDriverDescription*/\r\n\r\n\"use strict\";\r\n\r\n// JavaScript 'namespace' helper routine\r\nvar globalObject = this;\r\n\r\n/* Function: namespace\r\nDeclares a new namespace.\r\n\r\nParameters:\r\n  name - string: Namespace name. Use dots for multilevel namespace.\r\n*/\r\nvar namespace = function ( name )\r\n{\r\n  var tokens = name.split( '.' );\r\n  var object = globalObject;\r\n  while ( tokens.length > 0 )\r\n  {\r\n    var token = tokens.shift();\r\n    object = object[token] = object[token] || {};\r\n  }\r\n  return object;\r\n};\r\n\r\n//############################################################################################\r\n\r\n// Array.isArray is not defined at JScript\r\nif ( Array.isArray === undefined )\r\n{\r\n  Array.isArray = function ( obj ) \r\n  {\r\n    return obj.constructor === Array;\r\n  };\r\n}\r\n\r\n//############################################################################################\r\n// Namespace: iqrf\r\nnamespace( 'iqrf' );\r\n\r\n/* String: iqrf.PNUM_Coordinator\r\nCoordinator peripheral byte value as a hexadecimal string.\r\n*/\r\niqrf.PNUM_Coordinator = '00';\r\n/* String: iqrf.PNUM_Node\r\nNode peripheral byte value as a hexadecimal string.\r\n*/\r\niqrf.PNUM_Node = '01';\r\n/* String: iqrf.PNUM_OS\r\nOS peripheral byte value as a hexadecimal string.\r\n*/\r\niqrf.PNUM_OS = '02';\r\n/* String: iqrf.PNUM_EEPROM\r\nEEPROM peripheral byte value as a hexadecimal string.\r\n*/\r\niqrf.PNUM_EEPROM = '03';\r\n/* String: iqrf.PNUM_EEEPROM\r\nExternal EEPROM peripheral byte value as a hexadecimal string.\r\n*/\r\niqrf.PNUM_EEEPROM = '04';\r\n/* String: iqrf.PNUM_RAM\r\nRAM peripheral byte value as a hexadecimal string.\r\n*/\r\niqrf.PNUM_RAM = '05';\r\n/* String: iqrf.PNUM_LEDR\r\nRed LED peripheral byte value as a hexadecimal string.\r\n*/\r\niqrf.PNUM_LEDR = '06';\r\n/* String: iqrf.PNUM_LEDG\r\nGreen LED peripheral byte value as a hexadecimal string.\r\n*/\r\niqrf.PNUM_LEDG = '07';\r\n/* String: iqrf.PNUM_SPI\r\nSPI peripheral byte value as a hexadecimal string.\r\n*/\r\niqrf.PNUM_SPI = '08';\r\n/* String: iqrf.PNUM_IO\r\nIO peripheral byte value as a hexadecimal string.\r\n*/\r\niqrf.PNUM_IO = '09';\r\n/* String: iqrf.PNUM_Thermometer\r\nThermometer peripheral byte value as a hexadecimal string.\r\n*/\r\niqrf.PNUM_Thermometer = '0A';\r\n/* String: iqrf.PNUM_PWM\r\nPWM peripheral byte value as a hexadecimal string.\r\n*/\r\niqrf.PNUM_PWM = '0B';\r\n/* String: iqrf.PNUM_UART\r\nUART peripheral byte value as a hexadecimal string.\r\n*/\r\niqrf.PNUM_UART = '0C';\r\n/* String: iqrf.PNUM_FRC\r\nFRC peripheral byte value as a hexadecimal string.\r\n*/\r\niqrf.PNUM_FRC = '0D';\r\n/* String: iqrf.PNUM_Enumeration\r\nEnumeration peripheral byte value as a hexadecimal string.\r\n*/\r\niqrf.PNUM_Enumeration = 'FF';\r\n\r\n// PCMD response flag\r\niqrf.PCMD_ResponseFlag = 0x80;\r\n\r\n/* Constructor: iqrf.DpaRawHdpMessage\r\nCreates a raw-hdp DPA message with specified PNUM and PCMD.\r\n\r\nParameters:\r\n  pnum - string: PNUM value.\r\n  pcmd - string: PCMD value.\r\n  rdata - string: [optional] PDATA value as a string of dot separated bytes.\r\n*/\r\n\r\niqrf.DpaRawHdpMessage = function ( pnum, pcmd, rdata )\r\n{\r\n  // 'Asserts'\r\n  iqrf.ParseStringByte( pnum );\r\n  iqrf.ParseStringByte( pcmd );\r\n\r\n  this.pnum = pnum;\r\n  this.pcmd = pcmd;\r\n\r\n  this.ctype = 'dpa';\r\n  this.type = 'raw-hdp';\r\n  this.hwpid = 'FfFf';\r\n\r\n  if ( rdata !== undefined )\r\n  {\r\n    if ( typeof rdata !== 'string' )\r\n      throw new Error( 'iqrf.DpaRawHdpMessage: Optional string parameter rdata is defined but type is ' + typeof rdata );\r\n\r\n    if ( rdata.length !== 0 )\r\n    {\r\n      // 'Assert'\r\n      iqrf.ParseStringBytes( rdata );\r\n\r\n      this.rdata = rdata;\r\n    }\r\n  }\r\n};\r\n\r\n/* Constructor: iqrf.DpaRawHdpMessageCoordinator\r\nSame as <iqrf.DpaRawHdpMessage> but it also sets nadr to '00'.\r\n*/\r\niqrf.DpaRawHdpMessageCoordinator = function ( pnum, pcmd, rdata )\r\n{\r\n  var result = new iqrf.DpaRawHdpMessage( pnum, pcmd, rdata );\r\n  result.nadr = '00';\r\n  return result;\r\n};\r\n\r\n/* Function: iqrf.stricmp\r\nCompares two string in case insensitive way (not using locale).\r\n\r\nParameters:\r\n  str1 - string: 1st string to compare.\r\n  str2 - string: 2nd string to compare.\r\n\r\nReturns:\r\n  boolean: true if strings are equal, otherwise false.\r\n*/\r\niqrf.stricmp = function ( str1, str2 )\r\n{\r\n  return str1.toUpperCase() === str2.toUpperCase();\r\n};\r\n\r\n/* Function: iqrf.indexOf\r\nReturns the index of the first occurrence of a value in an array.\r\nReason for the implementation is that some engines (JScript) does not support Array.indexOf().\r\n\r\nParameters:\r\n  arr - array: An array.\r\n  val - object: The value to locate in arr.\r\n  useStricmp - boolean: [optional] if true then iqrf.stricmp() is used for the object match. Default is false.\r\n\r\nReturns:\r\n  number: The index of the first occurrence of val in the arr, or -1 if val is not found.  \r\n*/\r\niqrf.indexOf = function ( arr, val, useStricmp )\r\n{\r\n  // Test if the indexOf() is supported (e.g. JScriptEngine does not, V8ScriptEngine does)\r\n  if ( arr.indexOf !== undefined && useStricmp !== true )\r\n    return arr.indexOf( val );\r\n\r\n  var arr_length = arr.length;\r\n  for ( var indexOfResult = 0; indexOfResult < arr_length; indexOfResult++ )\r\n    if ( useStricmp === true )\r\n    {\r\n      if ( iqrf.stricmp( arr[indexOfResult], val ) )\r\n        return indexOfResult;\r\n    }\r\n    else\r\n    {\r\n      if ( arr[indexOfResult] === val )\r\n        return indexOfResult;\r\n    }\r\n\r\n  return -1;\r\n};\r\n\r\n/* Function: iqrf.CheckResponsePnumPcmdDlen\r\nChecks DPA Response.\r\n\r\nParameters:\r\n  response - object: DPA Response message (raw-hdp format)\r\n  pnum - string: Required PNUM, e.g. '01'.\r\n  pcmd - string: Required PCMD(s), e.g. '03', '04.05'.\r\n  dlen - string: [optional] Required PDATA (rdata part) length. Negative number specifies a minimum length. When not used (undefined), then no check is performed.\r\n\r\nReturns:\r\n  array: Array of bytes containing rdata bytes from the original DPA Response message.  \r\n*/\r\niqrf.CheckResponsePnumPcmdDlen = function ( response, pnum, pcmd, dlen )\r\n{\r\n  if ( response.rcode !== '00' )\r\n    throw new Error( 'iqrf.CheckResponsePnumPcmdDlen: Field response.rcode is not \\'00\\' but \\'' + response.rcode + '\\', status=' + response.status );\r\n\r\n  if ( !iqrf.stricmp( response.pnum, pnum ) )\r\n    throw new Error( 'iqrf.CheckResponsePnumPcmdDlen: Invalid pnum=' + response.pnum + ', expected ' + pnum );\r\n\r\n  if ( -1 === iqrf.indexOf( pcmd.split( '.' ), response.pcmd, true ) )\r\n    throw new Error( 'iqrf.CheckResponsePnumPcmdDlen: Invalid pcmd=' + response.pcmd + ', expected ' + pcmd );\r\n\r\n  var result = iqrf.ParseRdata( response );\r\n  if ( dlen !== undefined )\r\n  {\r\n    if ( dlen >= 0 )\r\n    {\r\n      if ( result.length !== dlen )\r\n        throw new Error( 'iqrf.CheckResponsePnumPcmdDlen: Invalid response length=' + result.length + ', expected ' + dlen );\r\n    }\r\n    else\r\n      if ( result.length < -dlen )\r\n        throw new Error( 'iqrf.CheckResponsePnumPcmdDlen: Invalid response length=' + result.length + ', expected at least ' + -dlen );\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/* Function: iqrf.ParseStringByte\r\nConverts hexadecimal byte from string into a number.\r\n\r\nParameters:\r\n  byte - string: string to convert.\r\n\r\nReturns:\r\n  number: Byte value of the string.  \r\n*/\r\niqrf.ParseStringByte = function ( byte )\r\n{\r\n  if ( typeof byte !== 'string' )\r\n    throw new Error( 'ParseStringByte: Parameter byte expected string but is ' + typeof byte );\r\n\r\n  if ( byte.length !== 2 )\r\n    throw new Error( 'ParseStringByte: Parameter byte expected 2 characters long but is ' + byte.length + ' characters long' );\r\n\r\n  var result = parseInt( byte, 16 );\r\n  if ( isNaN( result ) )\r\n    throw new Error( 'ParseStringByte: Parameter byte ' + byte + ' cannot be converted from hexadecimal' );\r\n\r\n  return result;\r\n};\r\n\r\n/* Function: iqrf.ParseStringBytes\r\nSplits dot separated bytes from string into array of bytes.\r\n\r\nParameters:\r\n  bytes - string: [optional] Input string with bytes.\r\n\r\nReturns:\r\n  array: Array of bytes containing bytes from the string. If parameter bytes is not used an ampty array is returned.\r\n*/\r\niqrf.ParseStringBytes = function ( bytes )\r\n{\r\n  var result = [];\r\n  if ( bytes !== undefined )\r\n  {\r\n    if ( typeof bytes !== 'string' )\r\n      throw new Error( 'iqrf.ParseStringBytes: Type of parameter bytes is not string, but ' + typeof bytes );\r\n\r\n    if ( bytes.length !== 0 )\r\n    {\r\n      var bytesSplit = bytes.split( '.' );\r\n      while ( bytesSplit.length > 0 )\r\n        result[result.length] = iqrf.ParseStringByte( bytesSplit.shift() );\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/* Function: iqrf.ParseRdata\r\nSplits rdata from DPA message (raw-hdp format) into array of bytes.\r\n\r\nParameters:\r\n  response - object: DPA message (raw-hdp format).\r\n\r\nReturns:\r\n  array: Array of bytes containing rdata bytes from the original DPA message.  \r\n*/\r\niqrf.ParseRdata = function ( response )\r\n{\r\n  return iqrf.ParseStringBytes( response.rdata );\r\n};\r\n\r\n/* Function: iqrf.ToHexStringByte\r\nConverts byte value to the 2 character long hexadecimal string.\r\n\r\nParameters:\r\n  value - number: Input byte value.\r\n\r\nReturns:\r\n  string: 2 character long hexadecimal string.  \r\n*/\r\niqrf.ToHexStringByte = function ( value )\r\n{\r\n  if ( typeof value !== 'number' )\r\n    throw new Error( 'iqrf.ToHexStringByte: Parameter value is not number but ' + typeof value );\r\n\r\n  if ( value < 0 || value > 0xFF )\r\n    throw new Error( 'iqrf.ToHexStringByte: Parameter value ' + String( value ) + ' out of range' );\r\n\r\n  var result = value.toString( 16 );\r\n  if ( result.length !== 2 )\r\n    result = '0' + result;\r\n  return result;\r\n};\r\n\r\n/* Function: iqrf.IntToHexStringBytesArray\r\nConverts integer value to hexadecimal string of the specified length containing the bytes the little-endian value consists of.\r\n\r\nParameters:\r\n  value - number: Input integer value.\r\n  length - number: Number of bytes the integer consists of.\r\n\r\nReturns:\r\n  string: String list of the individual bytes.  \r\n*/\r\niqrf.IntToHexStringBytesArray = function ( value, length )\r\n{\r\n  if ( typeof value !== 'number' )\r\n    throw new Error( 'iqrf.IntToHexStringBytesArray: Parameter value is not number but ' + typeof value );\r\n\r\n  if ( typeof length !== 'number' || length < 1 )\r\n    throw new Error( 'iqrf.IntToHexStringBytesArray: Parameter length is invalid: ' + length );\r\n\r\n  var result = '';\r\n  do\r\n  {\r\n    if ( result.length !== 0 )\r\n      result += '.';\r\n    result += iqrf.ToHexStringByte( value & 0xFF );\r\n\r\n    value >>= 8;\r\n  }\r\n  while ( --length !== 0 );\r\n\r\n  // ToDo: Improve (e.g. 2197816638 >> 8 == -8191995)\r\n  if ( value !== 0 && value !== -1 )\r\n    throw new Error( 'iqrf.IntToHexStringBytesArray: Parameter value is out of range' );\r\n\r\n  return result;\r\n};\r\n\r\n/* Function: iqrf.BytesToHexStringBytesArray\r\nConverts array of bytes to the string representation (list of dot separated 2 character long byte values).\r\n\r\nParameters:\r\n  bytes - array: Array of bytes.\r\n  prefixDot - boolean: [optional] If true then the result is always prefixed by a dot character. Default is false.\r\n  startIndex - number: [optional] Staring index of the byte to convert from. Default is 0.\r\n  endIndex - number: [optional] Ending index of the byte to convert to. Default is bytes.length - 1.\r\n\r\nReturns:\r\n  string: String list of the individual bytes.  \r\n*/\r\niqrf.BytesToHexStringBytesArray = function ( bytes, prefixDot, startIndex, endIndex )\r\n{\r\n  var result = '';\r\n  if ( bytes !== undefined )\r\n  {\r\n    if ( !Array.isArray( bytes ) )\r\n      throw new Error( 'iqrf.BytesToHexStringBytesArray: Parameter bytes is not an array but ' + typeof bytes );\r\n\r\n    if ( startIndex === undefined )\r\n      startIndex = 0;\r\n\r\n    if ( endIndex === undefined )\r\n      endIndex = bytes.length - 1;\r\n\r\n    for ( var index = startIndex; index <= endIndex; index++ )\r\n    {\r\n      if ( result.length !== 0 || prefixDot === true )\r\n        result += '.';\r\n      result += iqrf.ToHexStringByte( bytes[index] );\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/* Function: iqrf.BitmapToIndexes\r\nReturns an array of indexes of set bits in the bitmap.\r\n\r\nParameters:\r\n  bitmap - array: Array of bytes.\r\n  indexFrom - number: Starting index of the byte in the bitmap.\r\n  indexTo - number: Ending index of the byte in the bitmap.\r\n  offset - number: [optional] Value to start indexing from. Default value is 0.\r\n\r\nReturns:\r\n  array: Array of integers specifying the offset indexes of bits set in the bitmap.  \r\n*/\r\niqrf.BitmapToIndexes = function ( bitmap, indexFrom, indexTo, offset )\r\n{\r\n  if ( !Array.isArray( bitmap ) )\r\n    throw new Error( 'iqrf.BitmapToIndexes: Parameter bitmap is not an array but ' + typeof bitmap );\r\n\r\n  if ( offset === undefined )\r\n    offset = 0;\r\n\r\n  var result = [];\r\n  for ( var index = indexFrom; index <= indexTo; index++ )\r\n  {\r\n    var bitmapByte = bitmap[index];\r\n    if ( bitmapByte === 0 )\r\n      offset += 8;\r\n    else\r\n      for ( var bitMask = 0x01; bitMask !== 0x100; bitMask <<= 1 )\r\n      {\r\n        if ( ( bitmapByte & bitMask ) !== 0 )\r\n          result[result.length] = offset;\r\n        offset++;\r\n      }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/* Function: iqrf.IndexesToBitmap\r\nReturns an array of bytes with the selected indexes.\r\n\r\nParameters:\r\n  indexes - array: array of integers each specifying the index of bit to set in the bitmap.\r\n  bitmapSize - number: Size of the bitmap in bytes.\r\n\r\nReturns:\r\n  array: Array of bytes with the bit set according to the indexes parameter.  \r\n*/\r\niqrf.IndexesToBitmap = function ( indexes, bitmapSize )\r\n{\r\n  if ( !Array.isArray( indexes ) )\r\n    throw new Error( 'iqrf.IndexesToBitmap: Parameter bitmap is not an array but ' + typeof indexes );\r\n\r\n  var bitmap = [];\r\n  for ( var index = 0; index < bitmapSize; index++ )\r\n    bitmap[index] = 0;\r\n\r\n  var indexes_length = indexes.length;\r\n  for ( index = 0; index < indexes_length; index++ )\r\n  {\r\n    var oneIndex = indexes[index];\r\n    var bitmapIndex = Math.floor( oneIndex / 8 );\r\n    if ( bitmapIndex >= bitmapSize )\r\n      throw new Error( 'iqrf.IndexesToBitmap: Index ' + oneIndex + ' out of bitmap size ' + bitmapSize );\r\n\r\n    bitmap[bitmapIndex] |= 1 << ( oneIndex % 8 );\r\n  }\r\n\r\n  return bitmap;\r\n};\r\n\r\n/* Function: iqrf.NormalizeStringByte\r\nConverts string byte into 2 character string for sure.\r\n\r\nParameters:\r\n  byte - string: string byte value to normalize.\r\n\r\nReturns:\r\n  string: 2 character long hexadecimal string.\r\n*/\r\niqrf.NormalizeStringByte = function ( byte )\r\n{\r\n  return iqrf.ToHexStringByte( iqrf.ParseStringByte( byte ) );\r\n};\r\n\r\n/* Function: iqrf.UInt16toInt16\r\nConverts one's complement signed value stored at unsigned word (2 bytes or 16 bits) into signed 16 bit value.\r\n\r\nParameters:\r\n  uint16 - number: Input unsigned 16 bit value containing 16 bit signed value.\r\n\r\nReturns:\r\n  number: Signed 16 bit value.\r\n*/\r\niqrf.UInt16toInt16 = function ( uint16 )\r\n{\r\n  if ( uint16 < 0 || uint16 > 0xFfFf )\r\n    throw new Error( 'iqrf.UInt16toInt16: Parameter uint16 = ' + uint16 + ' is out of range' );\r\n\r\n  return uint16 < 0x8000 ? uint16 : uint16 - 0x10000;\r\n};\r\n\r\n/* Function: iqrf.UInt8toInt8\r\nConverts one's complement signed value stored at unsigned word (1 byte or 8 bits) into signed 8 bit value.\r\n\r\nParameters:\r\n  uint8 - number: Input unsigned 8 bit value containing 8 bit signed value.\r\n\r\nReturns:\r\n  number: Signed 8 bit value.\r\n*/\r\niqrf.UInt8toInt8 = function ( uint8 )\r\n{\r\n  if ( uint8 < 0 || uint8 > 0xFf )\r\n    throw new Error( 'iqrf.UInt8toInt8: Parameter uint8 = ' + uint8 + ' is out of range' );\r\n\r\n  return uint8 < 0x80 ? uint8 : uint8 - 0x100;\r\n};\r\n\r\n/* Function: iqrf.Round\r\nRounds number to specified number of decimal places.\r\n\r\nParameters:\r\n  value - number: Input number to round.\r\n  decimals - number: Number of decimal places to round number to.\r\n\r\nReturns:\r\n  number: Rounded number.\r\n*/\r\niqrf.Round = function ( value, decimals )\r\n{\r\n  return Number( Math.round( value + 'e' + decimals ) + 'e-' + decimals );\r\n};\r\n\r\n//############################################################################################\r\n", "name": "Driver Library", "notes": "Initial release", "standardID": -1, "version": 0.0, "versionFlags": 0}, {"driver": "//############################################################################################\r\n\r\n/* Title: Embedded Coordinator peripheral driver\r\nSee also: <https://www.iqrf.org/DpaTechGuide/>\r\n*/\r\n\r\n/*DriverDescription\r\n{ 'ID' : 0x00,\r\n  'Type' : 'Standard',\r\n  'Internal' : false,\r\n  'Versions' : [\r\n    { 'Version' : 2.00, 'VersionFlags' : 1, 'Notes' : [\r\n        'Changes for DPA 4.00',\r\n        'Discarded functions for DPA commands CMD_COORDINATOR_READ_REMOTELY_BONDED_MID, CMD_COORDINATOR_CLEAR_REMOTELY_BONDED_MID, CMD_COORDINATOR_ENABLE_REMOTE_BONDING, CMD_COORDINATOR_REBOND_NODE, CMD_COORDINATOR_DISCOVERY_DATA, and CMD_NODE_REMOVE_BOND_ADDRESS.',\r\n        'Parameter bondingMask at BondNode_Request renamed to bondingTestRetries.'\r\n        ]\r\n    },    \r\n    { 'Version' : 1.00, 'VersionFlags' : 1, 'Notes' : [\r\n        'Added SmartConnect support for DPA > 3.02.',\r\n        'DiscoveredDevices_Response and BondedDevices_Response ignore addresses above 239.',\r\n        'Added SetMID.'\r\n        ]\r\n    },\r\n    { 'Version' : 0.00, 'Notes' : [\r\n        'Initial release',\r\n        ]\r\n    }\r\n  ] }\r\nDriverDescription*/\r\n\r\n\"use strict\";\r\n// Namespace: iqrf.embed.coordinator\r\n// All prepared DPA requests have nadr set to '00'.\r\nnamespace( 'iqrf.embed.coordinator' );\r\n\r\n// --------------\r\n/* Function: iqrf.embed.coordinator.AddrInfo_Request\r\nEncodes DPA request to get basic network information.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.coordinator.AddrInfo_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_Coordinator, '00' );\r\n};\r\n\r\n/* Function: iqrf.embed.coordinator.AddrInfo_Response\r\nDecodes DPA response from getting basic network information.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  object: Object with the following fields (see DPA documentation https://www.iqrf.org/DpaTechGuide for details):\r\n\r\n* devNr - number: \r\n* did - number: \r\n*/\r\niqrf.embed.coordinator.AddrInfo_Response = function ( response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Coordinator, '80', 2 );\r\n\r\n  var result =\r\n  {\r\n    devNr: responseData[0],\r\n    did: responseData[1]\r\n  };\r\n\r\n  return result;\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.coordinator.DiscoveredDevices_Request\r\nEncodes DPA request to get list of discovered devices\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.coordinator.DiscoveredDevices_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_Coordinator, '01' );\r\n};\r\n\r\n/* Function: iqrf.embed.coordinator.DiscoveredDevices_Response\r\nDecodes DPA response from getting list of discovered devices.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  array: Array if integer values corresponding to the addresses of the discovered devices.\r\n*/\r\niqrf.embed.coordinator.DiscoveredDevices_Response = function ( response )\r\n{\r\n  return iqrf.BitmapToIndexes( iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Coordinator, '81', 32 ), 0, 29 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.coordinator.BondedDevices_Request\r\nEncodes DPA request to get list of bonded devices\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.coordinator.BondedDevices_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_Coordinator, '02' );\r\n};\r\n\r\n/* Function: iqrf.embed.coordinator.BondedDevices_Response\r\nDecodes DPA response from getting list of bonded devices.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  array: Array if integer values corresponding to the addresses of the bonded devices.\r\n*/\r\niqrf.embed.coordinator.BondedDevices_Response = function ( response )\r\n{\r\n  return iqrf.BitmapToIndexes( iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Coordinator, '82', 32 ), 0, 29 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.coordinator.ClearAllBonds_Request\r\nEncodes DPA request to clear all bonds.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.coordinator.ClearAllBonds_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_Coordinator, '03' );\r\n};\r\n\r\n/* Function: iqrf.embed.coordinator.ClearAllBonds_Response\r\nDecodes DPA response from clearing all bonds.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.coordinator.ClearAllBonds_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Coordinator, '83', 0 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.coordinator.BondNode_Request\r\nEncodes DPA request to bond a node.\r\n\r\nParameters:\r\n  reqAddr - number: Requested address.\r\n  bondingTestRetries - number: Bonding mask.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.coordinator.BondNode_Request = function ( reqAddr, bondingTestRetries )\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_Coordinator, '04', iqrf.ToHexStringByte( reqAddr ) + '.' + iqrf.ToHexStringByte( bondingTestRetries ) );\r\n};\r\n\r\n/* Function: iqrf.embed.coordinator.BondNode_Response\r\nDecodes DPA response from bonding a node.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  object: Object with the following fields:\r\n\r\n* bondAddr - number: Address of the node newly bonded to the network.\r\n* devNr - number: Number of bonded network nodes.\r\n*/\r\niqrf.embed.coordinator.BondNode_Response = function ( response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Coordinator, '84', 2 );\r\n\r\n  var result =\r\n  {\r\n    bondAddr: responseData[0],\r\n    devNr: responseData[1]\r\n  };\r\n\r\n  return result;\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.coordinator.RemoveBond_Request\r\nEncodes DPA request to remove bond.\r\n\r\nParameters:\r\n  bondAddr - number: Address of the node to remove the bond to.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.coordinator.RemoveBond_Request = function ( bondAddr )\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_Coordinator, '05', iqrf.ToHexStringByte( bondAddr ) );\r\n};\r\n\r\n/* Function: iqrf.embed.coordinator.RemoveBond_Response\r\nDecodes DPA response from removing bond.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  number: Number of bonded network nodes.\r\n*/\r\niqrf.embed.coordinator.RemoveBond_Response = function ( response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Coordinator, '85', 1 );\r\n  return responseData[0];\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.coordinator.Discovery_Request\r\nEncodes DPA request to run discovery.\r\n\r\nParameters:\r\n  txPower - number: TX Power used for discovery. \r\n  maxAddr - number: Nonzero value specifies maximum node address to be part of the discovery process. \r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.coordinator.Discovery_Request = function ( txPower, maxAddr )\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_Coordinator, '07', iqrf.ToHexStringByte( txPower ) + '.' + iqrf.ToHexStringByte( maxAddr ) );\r\n};\r\n\r\n/* Function: iqrf.embed.coordinator.Discovery_Response\r\nDecodes DPA response from running discovery.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  number: Number of discovered network nodes.\r\n*/\r\niqrf.embed.coordinator.Discovery_Response = function ( response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Coordinator, '87', 1 );\r\n  return responseData[0];\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.coordinator.SetDpaParams_Request\r\nEncodes DPA request to set DPA parameter.\r\n\r\nParameters:\r\n  dpaParam - number: DPA param to set.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.coordinator.SetDpaParams_Request = function ( dpaParam )\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_Coordinator, '08', iqrf.ToHexStringByte( dpaParam ) );\r\n};\r\n\r\n/* Function: iqrf.embed.coordinator.SetDpaParams_Response\r\nDecodes DPA response from setting DPA parameter.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  number: Previous DPA parameter value.\r\n*/\r\niqrf.embed.coordinator.SetDpaParams_Response = function ( response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Coordinator, '88', 1 );\r\n  return responseData[0];\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.coordinator.SetHops_Request\r\nEncodes DPA request to specify number of hops\r\n\r\nParameters:\r\n  requestHops - number: see DPA documentation https://www.iqrf.org/DpaTechGuide for details.\r\n  responseHops - number: see DPA documentation https://www.iqrf.org/DpaTechGuide for details.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.coordinator.SetHops_Request = function ( requestHops, responseHops )\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_Coordinator, '09', iqrf.ToHexStringByte( requestHops ) + '.' + iqrf.ToHexStringByte( responseHops ) );\r\n};\r\n\r\n/* Function: iqrf.embed.coordinator.SetHops_Response\r\nDecodes DPA response from specifying number of hops.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\nobject: Object with the following fields storing previous values:\r\n\r\n* requestHops - number: \r\n* responseHops - number: \r\n*/\r\niqrf.embed.coordinator.SetHops_Response = function ( response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Coordinator, '89', 2 );\r\n\r\n  var result =\r\n  {\r\n    requestHops: responseData[0],\r\n    responseHops: responseData[1]\r\n  };\r\n\r\n  return result;\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.coordinator.Backup_Request\r\nEncodes DPA request to backup coordinator.\r\n\r\nParameters:\r\n  index - number: Index of the block of data.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.coordinator.Backup_Request = function ( index )\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_Coordinator, '0B', iqrf.ToHexStringByte( index ) );\r\n};\r\n\r\n/* Function: iqrf.embed.coordinator.Backup_Response\r\nDecodes DPA response from backing up coordinator.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  array: Array of bytes with the backup content.\r\n*/\r\niqrf.embed.coordinator.Backup_Response = function ( response )\r\n{\r\n  return iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Coordinator, '8B', 49 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.coordinator.Restore_Request\r\nEncodes DPA request to restore coordinator.\r\n\r\nParameters:\r\n  networkData - array: One block of the coordinator network info data previously obtained by a backup command.  \r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.coordinator.Restore_Request = function ( networkData )\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_Coordinator, '0C', iqrf.BytesToHexStringBytesArray( networkData ) );\r\n};\r\n\r\n/* Function: iqrf.embed.coordinator.Restore_Response\r\nDecodes DPA response from restoring coordinator.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.coordinator.Restore_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Coordinator, '8C', 0 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.coordinator.AuthorizeBond_Request\r\nEncodes DPA request to authorize previously remotely pre-bonded node.\r\n\r\nParameters:\r\n  reqAddr - number: see DPA documentation https://www.iqrf.org/DpaTechGuide for details.\r\n  mid - number: see DPA documentation https://www.iqrf.org/DpaTechGuide for details.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.coordinator.AuthorizeBond_Request = function ( reqAddr, mid )\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_Coordinator, '0D', iqrf.ToHexStringByte( reqAddr ) + '.' + iqrf.IntToHexStringBytesArray( mid, 4 ) );\r\n};\r\n\r\n/* Function: iqrf.embed.coordinator.AuthorizeBond_Response\r\nDecodes DPA response from authorizing previously remotely pre-bonded node.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  object: Object with the following fields:\r\n\r\n* bondAddr - number: Address of the node newly bonded to the network.\r\n* devNr - number: Number of bonded network nodes.\r\n*/\r\niqrf.embed.coordinator.AuthorizeBond_Response = function ( response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Coordinator, '8D', 2 );\r\n\r\n  var result =\r\n  {\r\n    bondAddr: responseData[0],\r\n    devNr: responseData[1]\r\n  };\r\n\r\n  return result;\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.coordinator.SmartConnect_Request\r\nEncodes DPA request for Smart Connect.\r\nFrom version 1.00 for DPA > 3.02.\r\n\r\nParameters:\r\n  reqAddr - number: see DPA documentation https://www.iqrf.org/DpaTechGuide for details.\r\n  bondingTestRetries - number: see DPA documentation https://www.iqrf.org/DpaTechGuide for details.\r\n  ibk - array: see DPA documentation https://www.iqrf.org/DpaTechGuide for details.\r\n  mid - number: see DPA documentation https://www.iqrf.org/DpaTechGuide for details.\r\n  virtualDeviceAddress - number: see DPA documentation https://www.iqrf.org/DpaTechGuide for details.\r\n  userData - array:  see DPA documentation https://www.iqrf.org/DpaTechGuide for details.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\n\r\niqrf.embed.coordinator.SmartConnect_Request = function ( reqAddr, bondingTestRetries, ibk, mid, virtualDeviceAddress, userData )\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_Coordinator, '12',\r\n    iqrf.ToHexStringByte( reqAddr ) + '.' +\r\n    iqrf.ToHexStringByte( bondingTestRetries ) + '.' +\r\n    iqrf.BytesToHexStringBytesArray( ibk ) + '.' +\r\n    iqrf.IntToHexStringBytesArray( mid, 4 ) + '.00.00.' +\r\n    iqrf.ToHexStringByte( virtualDeviceAddress ) + '.00.00.00.00.00.00.00.00.00.' +\r\n    iqrf.BytesToHexStringBytesArray( userData ) );\r\n};\r\n\r\n/* Function: iqrf.embed.coordinator.SmartConnect_Response\r\nDecodes DPA response from Smart Connect.\r\nFrom version 1.00 for DPA > 3.02.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  object: Object with the following fields:\r\n\r\n* bondAddr - number: Address of the node newly bonded to the network.\r\n* devNr - number: Number of bonded network nodes.\r\n*/\r\niqrf.embed.coordinator.SmartConnect_Response = function ( response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Coordinator, '92', 2 );\r\n\r\n  var result =\r\n  {\r\n    bondAddr: responseData[0],\r\n    devNr: responseData[1]\r\n  };\r\n\r\n  return result;\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.coordinator.SetMID_Request\r\nEncodes DPA request to set the MID.\r\nFrom version 1.00 for DPA > 3.02.\r\n\r\nParameters:\r\n  bondAddr - number: Address of the node.\r\n  mid - number: MID to write to the Coordinator's database.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.coordinator.SetMID_Request = function ( bondAddr, mid )\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_Coordinator, '13', iqrf.IntToHexStringBytesArray( mid, 4 ) + '.' + iqrf.ToHexStringByte( bondAddr ) );\r\n};\r\n\r\n/* Function: iqrf.embed.coordinator.SetMID_Response\r\nDecodes DPA response from setting the MID.\r\nFrom version 1.00 for DPA > 3.02.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.coordinator.SetMID_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Coordinator, '93', 0 );\r\n};\r\n\r\n//############################################################################################\r\n", "name": "Embed: Coordinator", "notes": "Changes for DPA 4.00\nDiscarded functions for DPA commands CMD_COORDINATOR_READ_REMOTELY_BONDED_MID, CMD_COORDINATOR_CLEAR_REMOTELY_BONDED_MID, CMD_COORDINATOR_ENABLE_REMOTE_BONDING, CMD_COORDINATOR_REBOND_NODE, CMD_COORDINATOR_DISCOVERY_DATA, and CMD_NODE_REMOVE_BOND_ADDRESS.\nParameter bondingMask at BondNode_Request renamed to bondingTestRetries.", "standardID": 0, "version": 2.0, "versionFlags": 1}, {"driver": "//############################################################################################\r\n\r\n/* Title: Embedded Node peripheral driver\r\nSee also: <https://www.iqrf.org/DpaTechGuide/>\r\n*/\r\n\r\n/*DriverDescription\r\n{ 'ID' : 0x01,\r\n  'Type' : 'Standard',\r\n  'Internal' : false,\r\n  'Versions' : [\r\n    { 'Version' : 1.00, 'VersionFlags' : 1, 'Notes' : [\r\n        'Changes for DPA 4.00',\r\n        'Discarded functions for DPA commands CMD_NODE_READ_REMOTELY_BONDED_MID, CMD_NODE_CLEAR_REMOTELY_BONDED_MID, and CMD_NODE_ENABLE_REMOTE_BONDING.'\r\n        ]\r\n    },    \r\n    { 'Version' : 0, 'Notes' : [\r\n        'Initial release',\r\n        ]\r\n    }\r\n  ] }\r\nDriverDescription*/\r\n\r\n\"use strict\";\r\n// Namespace: iqrf.embed.node\r\nnamespace( 'iqrf.embed.node' );\r\n\r\n// --------------\r\n/* Function: iqrf.embed.node.Read_Request\r\nEncodes DPA request to read Node information.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.node.Read_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_Node, '00' );\r\n};\r\n\r\n/* Function: iqrf.embed.node.Read_Response\r\nDecodes DPA response from reading Node information.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  object: Object with the following fields (see DPA documentation https://www.iqrf.org/DpaTechGuide/index.html?page=NodeRead.html for details):\r\n\r\n* ntwADDR - number: \r\n* ntwVRN - number: \r\n* ntwZIN - number:  \r\n* ntwDID - number: \r\n* ntwPVRN - number: \r\n* ntwUSERADDRESS - number: \r\n* ntwID - number: \r\n* ntwVRNFNZ - number: \r\n* ntwCFG - number: \r\n* flags - number: \r\n*/\r\niqrf.embed.node.Read_Response = function ( response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Node, '80', 12 );\r\n\r\n  var result =\r\n  {\r\n    ntwADDR: responseData[0],\r\n    ntwVRN: responseData[1],\r\n    ntwZIN: responseData[2],\r\n    ntwDID: responseData[3],\r\n    ntwPVRN: responseData[4],\r\n    ntwUSERADDRESS: responseData[5] + ( responseData[6] * 0x100 ),\r\n    ntwID: responseData[7] + ( responseData[8] * 0x100 ),\r\n    ntwVRNFNZ: responseData[9],\r\n    ntwCFG: responseData[10],\r\n    flags: responseData[11]\r\n  };\r\n\r\n  return result;\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.node.RemoveBond_Request\r\nEncodes DPA request to remove bond.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.node.RemoveBond_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_Node, '01' );\r\n};\r\n\r\n/* Function: iqrf.embed.node.RemoveBond_Response\r\nDecodes DPA response from removing bond.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.node.RemoveBond_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Node, '81', 0 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.node.RemoveBondAddress_Request\r\nEncodes DPA request to remove bond address.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.node.RemoveBondAddress_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_Node, '05' );\r\n};\r\n\r\n/* Function: iqrf.embed.node.RemoveBondAddress_Response\r\nDecodes DPA response from removing bond address.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.node.RemoveBondAddress_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Node, '85', 0 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.node.Backup_Request\r\nEncodes DPA request to backup node.\r\n\r\nParameters:\r\n  index - number: Index of the block of data.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.node.Backup_Request = function ( index )\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_Node, '06', iqrf.ToHexStringByte( index ) );\r\n};\r\n\r\n/* Function: iqrf.embed.node.Backup_Response\r\nDecodes DPA response from backing up node.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  array: Array of bytes with the backup content.\r\n*/\r\niqrf.embed.node.Backup_Response = function ( response )\r\n{\r\n  return iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Node, '86', 49 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.node.Restore_Request\r\nEncodes DPA request to restore node.\r\n\r\nParameters:\r\n  networkData - array: One block of the coordinator network info data previously obtained by a backup command.  \r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.node.Restore_Request = function ( networkData )\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_Node, '07', iqrf.BytesToHexStringBytesArray( networkData ) );\r\n};\r\n\r\n/* Function: iqrf.embed.node.Restore_Response\r\nDecodes DPA response from restoring node.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.node.Restore_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Node, '87', 0 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.node.ValidateBonds_Request\r\nEncodes DPA request to validate bonds.\r\n\r\nParameters:\r\n  nodes - array: Array of objects with the following fields (see DPA documentation https://www.iqrf.org/DpaTechGuide for details):\r\n\r\n*  bondAddr - number: Address of the node to validate.\r\n*  mid - number: MID to check against.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.node.ValidateBonds_Request = function ( nodes )\r\n{\r\n  var data = '';\r\n  var nodes_length = nodes.length;\r\n  for ( var index = 0; index < nodes_length; index++ )\r\n  {\r\n    var oneNode = nodes[index];\r\n    data += iqrf.ToHexStringByte( oneNode.bondAddr ) + '.' + iqrf.IntToHexStringBytesArray( oneNode.mid, 4 );\r\n  }\r\n\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_Node, '08', data );\r\n};\r\n\r\n/* Function: iqrf.embed.node.ValidateBonds_Response\r\nDecodes DPA response from validating bonds.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.node.ValidateBonds_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Node, '88', 0 );\r\n};\r\n\r\n\r\n//############################################################################################\r\n", "name": "Embed: Node", "notes": "Changes for DPA 4.00\nDiscarded functions for DPA commands CMD_NODE_READ_REMOTELY_BONDED_MID, CMD_NODE_CLEAR_REMOTELY_BONDED_MID, and CMD_NODE_ENABLE_REMOTE_BONDING.", "standardID": 1, "version": 1.0, "versionFlags": 1}, {"driver": "//############################################################################################\r\n\r\n/* Title: Embedded OS peripheral driver\r\nSee also: <https://www.iqrf.org/DpaTechGuide/>\r\n*/\r\n\r\n/*DriverDescription\r\n{ 'ID' : 0x02,\r\n  'Type' : 'Standard',\r\n  'Internal' : false,\r\n  'Versions' : [\r\n    { 'Version' : 1.00, 'VersionFlags' : 1, 'Notes' : [\r\n        'Read_Response returns ibk field compatible with DPA > 3.02',\r\n        'WriteCfg_Request - checksum parameter removed',\r\n        'TestRfSignal added'\r\n        ]\r\n    },\r\n    { 'Version' : 0.00, 'Notes' : [\r\n        'Initial release',\r\n        ]\r\n    }\r\n  ] }\r\nDriverDescription*/\r\n\r\n\"use strict\";\r\n// Namespace: iqrf.embed.os\r\nnamespace( 'iqrf.embed.os' );\r\n\r\n/* Function: iqrf.embed.os.Read_Request\r\nEncodes DPA request to read OS.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.os.Read_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_OS, '00' );\r\n};\r\n\r\n/* Function: iqrf.embed.os.Read_Response\r\nDecodes DPA response from reading OS.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  object: Object with the following fields (see DPA documentation https://www.iqrf.org/DpaTechGuide/ for details):\r\n\r\n* mid - number: \r\n* osVersion - number: \r\n* trMcuType - number: \r\n* osBuild - number: \r\n* rssi - number: \r\n* supplyVoltage - number: contains real voltage value\r\n* flags - number: \r\n* slotLimits - number: \r\n* ibk - array: (from version 1.00 for DPA > 3.02)\r\n*/\r\niqrf.embed.os.Read_Response = function ( response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_OS, '80', 28 );\r\n\r\n  var result =\r\n    {\r\n      mid: responseData[0] + ( responseData[1] * 0x100 ) + ( responseData[2] * 0x10000 ) + ( responseData[3] * 0x1000000 ),\r\n      osVersion: responseData[4],\r\n      trMcuType: responseData[5],\r\n      osBuild: responseData[6] + ( responseData[7] * 0x100 ),\r\n      rssi: responseData[8],\r\n      supplyVoltage: 261.12 / ( 127 - responseData[9] ),\r\n      flags: responseData[10],\r\n      slotLimits: responseData[11],\r\n      ibk: responseData.slice( 12, 28 )\r\n    };\r\n\r\n  return result;\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.os.Reset_Request\r\nEncodes DPA request to reset.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.os.Reset_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_OS, '01' );\r\n};\r\n\r\n/* Function: iqrf.embed.os.Reset_Response\r\nDecodes DPA response from reset.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.os.Reset_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_OS, '81', 0 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.os.ReadCfg_Request\r\nEncodes DPA request to read configuration.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.os.ReadCfg_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_OS, '02' );\r\n};\r\n\r\n/* Function: iqrf.embed.os.ReadCfg_Response\r\nDecodes DPA response from reading configuration.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  object: Object with the following fields (see DPA documentation https://www.iqrf.org/DpaTechGuide for details):\r\n\r\n* checksum - number: \r\n* configuration - array: \r\n* rfpgm - number: \r\n* undocumented - number: \r\n*/\r\niqrf.embed.os.ReadCfg_Response = function ( response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_OS, '82', 34 );\r\n\r\n  var result =\r\n    {\r\n      checksum: responseData[0],\r\n      configuration: responseData.slice( 1, 32 ),\r\n      rfpgm: responseData[32],\r\n      undocumented: responseData[33]\r\n    };\r\n\r\n  return result;\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.os.Rfpgm_Request\r\nEncodes DPA request to start RFPGM.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.os.Rfpgm_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_OS, '03' );\r\n};\r\n\r\n/* Function: iqrf.embed.os.Rfpgm_Response\r\nDecodes DPA response from starting RFPGM.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.os.Rfpgm_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_OS, '83', 0 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.os.Sleep_Request\r\nEncodes DPA request to sleep.\r\n\r\nParameters:\r\n  time - number: See DPA documentation https://www.iqrf.org/DpaTechGuide for details.\r\n  control - number: See DPA documentation https://www.iqrf.org/DpaTechGuide for details.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.os.Sleep_Request = function ( time, control )\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_OS, '04', iqrf.IntToHexStringBytesArray( time, 2 ) + '.' + iqrf.ToHexStringByte( control ) );\r\n};\r\n\r\n/* Function: iqrf.embed.os.Sleep_Response\r\nDecodes DPA response from sleeping.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.os.Sleep_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_OS, '84', 0 );\r\n};\r\n\r\niqrf.embed.os.Batch_ConstructRequests = function ( requests )\r\n{\r\n  var data = '';\r\n  var requests_length = requests.length;\r\n  for ( var index = 0; index < requests_length; index++ )\r\n  {\r\n    var oneRequest = requests[index];\r\n    var hwpid = parseInt( oneRequest.hwpid, 16 );\r\n    var oneData =\r\n      iqrf.NormalizeStringByte( oneRequest.pnum ) + '.' +\r\n      iqrf.NormalizeStringByte( oneRequest.pcmd ) + '.' +\r\n      iqrf.ToHexStringByte( hwpid & 0xFF ) + '.' +\r\n      iqrf.ToHexStringByte( hwpid >> 8 );\r\n\r\n    if ( oneRequest.rdata !== undefined )\r\n      oneData += '.' + iqrf.BytesToHexStringBytesArray( iqrf.ParseStringBytes( oneRequest.rdata ) );\r\n\r\n    oneData = iqrf.ToHexStringByte( 1 + ( 1 + oneData.length ) / 3 ) + '.' + oneData;\r\n\r\n    if ( data.length !== 0 )\r\n      data += '.';\r\n    data += oneData;\r\n  }\r\n\r\n  return data + '.00';\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.os.Batch_Request\r\nEncodes DPA request to execute a batch.\r\n\r\nParameters:\r\n  requests - array: Array of objects (requests) created by other ?_Request functions.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.os.Batch_Request = function ( requests )\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_OS, '05', iqrf.embed.os.Batch_ConstructRequests( requests ) );\r\n};\r\n\r\n/* Function: iqrf.embed.os.Batch_Response\r\nDecodes DPA response from executing a batch.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.os.Batch_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_OS, '85', 0 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.os.SetSecurity_Request\r\nEncodes DPA request to set various security parameters.\r\n\r\nParameters:\r\n  type - number: see DPA documentation https://www.iqrf.org/DpaTechGuide for details.\r\n  data - array: see DPA documentation https://www.iqrf.org/DpaTechGuide for details. \r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.os.SetSecurity_Request = function ( type, data )\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_OS, '06', iqrf.ToHexStringByte( type ) + iqrf.BytesToHexStringBytesArray( data, true ) );\r\n};\r\n\r\n/* Function: iqrf.embed.os.SetSecurity_Response\r\nDecodes DPA response from setting various security parameters.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.os.SetSecurity_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_OS, '86', 0 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.os.Restart_Request\r\nEncodes DPA request to restart device.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.os.Restart_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_OS, '08' );\r\n};\r\n\r\n/* Function: iqrf.embed.os.Restart_Response\r\nDecodes DPA response from restarting device.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.os.Restart_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_OS, '88', 0 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.os.WriteCfgByte_Request\r\nEncodes DPA request to write configuration bytes.\r\n\r\nParameters:\r\n  bytes - array: Array of objects with the following fields (see DPA documentation https://www.iqrf.org/DpaTechGuide for details):\r\n\r\n* address - number: \r\n* value - number: \r\n* mask - number: \r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.os.WriteCfgByte_Request = function ( bytes )\r\n{\r\n  var data = '';\r\n  var bytes_length = bytes.length;\r\n  for ( var index = 0; index < bytes_length; index++ )\r\n  {\r\n    if ( data.length !== 0 )\r\n      data += '.';\r\n\r\n    var oneByte = bytes[index];\r\n    data +=\r\n      iqrf.ToHexStringByte( oneByte.address ) + '.' +\r\n      iqrf.ToHexStringByte( oneByte.value ) + '.' +\r\n      iqrf.ToHexStringByte( oneByte.mask );\r\n  }\r\n\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_OS, '09', data );\r\n};\r\n\r\n/* Function: iqrf.embed.os.WriteCfgByte_Response\r\nDecodes DPA response from writing configuration bytes.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.os.WriteCfgByte_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_OS, '89', 0 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.os.LoadCode_Request\r\nEncodes DPA request to load code.\r\n\r\nParameters:\r\n  flags - number: see DPA documentation https://www.iqrf.org/DpaTechGuide for details.\r\n  address - number: see DPA documentation https://www.iqrf.org/DpaTechGuide for details.\r\n  length - number: see DPA documentation https://www.iqrf.org/DpaTechGuide for details.\r\n  checkSum - number: see DPA documentation https://www.iqrf.org/DpaTechGuide for details.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.os.LoadCode_Request = function ( flags, address, length, checkSum )\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_OS, '0A',\r\n    iqrf.ToHexStringByte( flags ) + '.' +\r\n    iqrf.IntToHexStringBytesArray( address, 2 ) + '.' +\r\n    iqrf.IntToHexStringBytesArray( length, 2 ) + '.' +\r\n    iqrf.IntToHexStringBytesArray( checkSum, 2 ) );\r\n};\r\n\r\n/* Function: iqrf.embed.os.LoadCode_Response\r\nDecodes DPA response from loading code.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  number: Loading code result value.\r\n*/\r\niqrf.embed.os.LoadCode_Response = function ( response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_OS, '8A', 1 );\r\n  return responseData[0];\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.os.SelectiveBatch_Request\r\nEncodes DPA request to execute a selective batch.\r\n\r\nParameters:\r\n  selectedNodes - array: Array if integer values corresponding to the selected nodes.\r\n  requests - array: Array of objects (requests) created by other ?_Request functions.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.os.SelectiveBatch_Request = function ( selectedNodes, requests )\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_OS, '0B',\r\n    iqrf.BytesToHexStringBytesArray( iqrf.IndexesToBitmap( selectedNodes, 30 ) ) + '.' + iqrf.embed.os.Batch_ConstructRequests( requests ) );\r\n};\r\n\r\n/* Function: iqrf.embed.os.SelectiveBatch_Response\r\nDecodes DPA response from executing a selective batch.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.os.SelectiveBatch_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_OS, '8B', 0 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.os.TestRfSignal_Request\r\nEncodes DPA request to test RF signal.\r\n\r\nParameters:\r\n  channel - number: The channel to test. \r\n  rxFilter - number: RX filter value passed as a parameter to checkRF().\r\n  time  - number: Time interval to test the signal. Unit is 10 ms. \r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.os.TestRfSignal_Request = function ( channel, rxFilter, time )\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_OS, '0C',\r\n    iqrf.ToHexStringByte( channel ) + '.' + iqrf.ToHexStringByte( rxFilter ) + '.' + iqrf.IntToHexStringBytesArray( time, 2 ) );\r\n};\r\n\r\n/* Function: iqrf.embed.os.TestRfSignal_Response\r\nDecodes DPA response from testing RF signal.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  number: See FRC_TestRFsignal FRC command documentation.\r\n*/\r\niqrf.embed.os.TestRfSignal_Response = function ( response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_OS, '8C', 1 );\r\n\r\n  return responseData[0];\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.os.WriteCfg_Request\r\nEncodes DPA request to write configuration.\r\n\r\nParameters:\r\n  configuration - array: see DPA documentation https://www.iqrf.org/DpaTechGuide for details.\r\n  rfpgm - number: see DPA documentation https://www.iqrf.org/DpaTechGuide for details.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.os.WriteCfg_Request = function ( configuration, rfpgm )\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_OS, '0F', '00' + iqrf.BytesToHexStringBytesArray( configuration, true ) + '.' + iqrf.ToHexStringByte( rfpgm ) );\r\n};\r\n\r\n/* Function: iqrf.embed.os.WriteCfg_Response\r\nDecodes DPA response from writing configuration.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.os.WriteCfg_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_OS, '8F', 0 );\r\n};\r\n\r\n//############################################################################################\r\n", "name": "Embed: OS", "notes": "Read_Response returns ibk field compatible with DPA > 3.02\nWriteCfg_Request - checksum parameter removed\nTestRfSignal added", "standardID": 2, "version": 1.0, "versionFlags": 1}, {"driver": "//############################################################################################\r\n\r\n/* Title: Embedded EEPROM peripheral driver\r\nSee also: <https://www.iqrf.org/DpaTechGuide/>\r\n*/\r\n\r\n/*DriverDescription\r\n{ 'ID' : 0x03,\r\n  'Type' : 'Standard',\r\n  'Internal' : false,\r\n  'Versions' : [\r\n    { 'Version' : 0, 'Notes' : [\r\n        'Initial release',\r\n        ]\r\n    }\r\n  ] }\r\nDriverDescription*/\r\n\r\n\"use strict\";\r\n// Namespace: iqrf.embed.eeprom\r\nnamespace( 'iqrf.embed.eeprom' );\r\n\r\n// --------------\r\n/* Function: iqrf.embed.eeprom.Read_Request\r\nEncodes DPA request to read from memory.\r\n\r\nParameters:\r\n  address - number: Memory address to read from.\r\n  len - number: Length of data to read.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.eeprom.Read_Request = function ( address, len )\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_EEPROM, '00', iqrf.ToHexStringByte( address ) + '.' + iqrf.ToHexStringByte( len ) );\r\n};\r\n\r\n/* Function: iqrf.embed.eeprom.Read_Response\r\nDecodes DPA response from reading from memory.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  array: Read data.\r\n*/\r\niqrf.embed.eeprom.Read_Response = function ( response )\r\n{\r\n  return iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_EEPROM, '80' );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.eeprom.Write_Request\r\nEncodes DPA request to write to memory.\r\n\r\nParameters:\r\n  address - number: Address to write data to.\r\n  pdata - array: Data to write.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.eeprom.Write_Request = function ( address, pdata )\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_EEPROM, '01', iqrf.ToHexStringByte( address ) + iqrf.BytesToHexStringBytesArray( pdata, true ) );\r\n};\r\n\r\n/* Function: iqrf.embed.eeprom.Write_Response\r\nDecodes DPA response from writing to memory.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.eeprom.Write_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_EEPROM, '81', 0 );\r\n};\r\n\r\n//############################################################################################\r\n", "name": "Embed: EEPROM", "notes": "Initial release", "standardID": 3, "version": 0.0, "versionFlags": 0}, {"driver": "//############################################################################################\r\n\r\n/* Title: Embedded External EEPROM (aka EEEPROM) peripheral driver\r\nSee also: <https://www.iqrf.org/DpaTechGuide/>\r\n*/\r\n\r\n/*DriverDescription\r\n{ 'ID' : 0x04,\r\n  'Type' : 'Standard',\r\n  'Internal' : false,\r\n  'Versions' : [\r\n    { 'Version' : 0, 'Notes' : [\r\n        'Initial release',\r\n        ]\r\n    }\r\n  ] }\r\nDriverDescription*/\r\n\r\n\"use strict\";\r\n// Namespace: iqrf.embed.eeeprom\r\nnamespace( 'iqrf.embed.eeeprom' );\r\n\r\n// --------------\r\n/* Function: iqrf.embed.eeeprom.Read_Request\r\nEncodes DPA request to read from memory.\r\n\r\nParameters:\r\n  address - number: Memory address to read from.\r\n  len - number: Length of data to read.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.eeeprom.Read_Request = function ( address, len )\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_EEEPROM, '02', iqrf.IntToHexStringBytesArray( address, 2 ) + '.' + iqrf.ToHexStringByte( len ) );\r\n};\r\n\r\n/* Function: iqrf.embed.eeeprom.Read_Response\r\nDecodes DPA response from reading from memory.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  array: Read data.\r\n*/\r\niqrf.embed.eeeprom.Read_Response = function ( response )\r\n{\r\n  return iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_EEEPROM, '82' );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.eeeprom.Write_Request\r\nEncodes DPA request to write to memory.\r\n\r\nParameters:\r\n  address - number: Address to write data to.\r\n  pdata - number: Data to write.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.eeeprom.Write_Request = function ( address, pdata )\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_EEEPROM, '03', iqrf.IntToHexStringBytesArray( address, 2 ) + iqrf.BytesToHexStringBytesArray( pdata, true ) );\r\n};\r\n\r\n/* Function: iqrf.embed.eeeprom.Write_Response\r\nDecodes DPA response from writing to memory.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.eeeprom.Write_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_EEEPROM, '83', 0 );\r\n};\r\n\r\n//############################################################################################\r\n", "name": "Embed: EEEPROM", "notes": "Initial release", "standardID": 4, "version": 0.0, "versionFlags": 0}, {"driver": "//############################################################################################\r\n\r\n/* Title: Embedded RAM peripheral driver\r\nSee also: <https://www.iqrf.org/DpaTechGuide/>\r\n*/\r\n\r\n/*DriverDescription\r\n{ 'ID' : 0x05,\r\n  'Type' : 'Standard',\r\n  'Internal' : false,\r\n  'Versions' : [\r\n    { 'Version' : 0, 'Notes' : [\r\n        'Initial release',\r\n        ]\r\n    }\r\n  ] }\r\nDriverDescription*/\r\n\r\n\"use strict\";\r\n// Namespace: iqrf.embed.ram\r\nnamespace( 'iqrf.embed.ram' );\r\n\r\n// --------------\r\n/* Function: iqrf.embed.ram.Read_Request\r\nEncodes DPA request to read from memory.\r\n\r\nParameters:\r\n  address - number: Memory address to read from.\r\n  len - number: Length of data to read.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.ram.Read_Request = function ( address, len )\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_RAM, '00', iqrf.ToHexStringByte( address ) + '.' + iqrf.ToHexStringByte( len ) );\r\n};\r\n\r\n/* Function: iqrf.embed.ram.Read_Response\r\nDecodes DPA response from reading from memory.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  array: Read data.\r\n*/\r\niqrf.embed.ram.Read_Response = function ( response )\r\n{\r\n  return iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_RAM, '80' );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.ram.Write_Request\r\nEncodes DPA request to write to memory.\r\n\r\nParameters:\r\n  address - number: Address to write data to.\r\n  pdata - array: Data to write.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.ram.Write_Request = function ( address, pdata )\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_RAM, '01', iqrf.ToHexStringByte( address ) + iqrf.BytesToHexStringBytesArray( pdata, true ) );\r\n};\r\n\r\n/* Function: iqrf.embed.ram.Write_Response\r\nDecodes DPA response from writing to memory.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.ram.Write_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_RAM, '81', 0 );\r\n};\r\n\r\n//############################################################################################\r\n", "name": "Embed: RAM", "notes": "Initial release", "standardID": 5, "version": 0.0, "versionFlags": 0}, {"driver": "//############################################################################################\r\n\r\n/* Title: Embedded Red LED peripheral driver\r\nSee also: <https://www.iqrf.org/DpaTechGuide/>\r\n*/\r\n\r\n/*DriverDescription\r\n{ 'ID' : 0x06,\r\n  'Type' : 'Standard',\r\n  'Internal' : false,\r\n  'Versions' : [\r\n    { 'Version' : 1.00, 'VersionFlags' : 1, 'Notes' : [\r\n        'Get_Request and Get_Response removed.',\r\n        'Added Flashing command.'\r\n        ]\r\n    },\r\n    { 'Version' : 0, 'Notes' : [\r\n        'Initial release',\r\n        ]\r\n    }\r\n  ] }\r\nDriverDescription*/\r\n\r\n\"use strict\";\r\n// Namespace: iqrf.embed.ledr\r\nnamespace( 'iqrf.embed.ledr' );\r\n\r\n// --------------\r\n/* Function: iqrf.embed.ledr.Set_Request\r\nEncodes DPA request to set the LED.\r\n\r\nParameters:\r\n  onOff - boolean: Required LED state. true is on, false is off.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.ledr.Set_Request = function ( onOff )\r\n{\r\n  if ( typeof onOff !== 'boolean' )\r\n    throw new Error( 'iqrf.embed.ledr.Set_Request: Parameter onOff expected to be boolean but not ' + typeof onOff );\r\n\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_LEDR, iqrf.ToHexStringByte( onOff ? 1 : 0 ) );\r\n};\r\n\r\n/* Function: iqrf.embed.ledr.Set_Response\r\nDecodes DPA response from setting the LED.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.ledr.Set_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_LEDR, '80.81', 0 );\r\n};\r\n\r\n/* Function: iqrf.embed.ledr.Pulse_Request\r\nEncodes DPA request to pulse the LED.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.ledr.Pulse_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_LEDR, '03' );\r\n};\r\n\r\n/* Function: iqrf.embed.ledr.Pulse_Response\r\nDecodes DPA response from pulsing the LED.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.ledr.Pulse_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_LEDR, '83', 0 );\r\n};\r\n\r\n/* Function: iqrf.embed.ledr.Flashing_Request\r\nEncodes DPA request for flashing the LED.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.ledr.Flashing_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_LEDR, '04' );\r\n};\r\n\r\n/* Function: iqrf.embed.ledr.Flashing_Response\r\nDecodes DPA response from flashing the LED.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.ledr.Flashing_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_LEDR, '84', 0 );\r\n};\r\n\r\n//############################################################################################\r\n", "name": "Embed: Red LED", "notes": "Get_Request and Get_Response removed.\nAdded Flashing command.", "standardID": 6, "version": 1.0, "versionFlags": 1}, {"driver": "//############################################################################################\r\n\r\n/* Title: Embedded Green LED peripheral driver\r\nSee also: <https://www.iqrf.org/DpaTechGuide/>\r\n*/\r\n\r\n/*DriverDescription\r\n{ 'ID' : 0x07,\r\n  'Type' : 'Standard',\r\n  'Internal' : false,\r\n  'Versions' : [\r\n    { 'Version' : 1.00, 'VersionFlags' : 1, 'Notes' : [\r\n        'Get_Request and Get_Response removed.',\r\n        'Added Flashing command.'\r\n        ]\r\n    },\r\n    { 'Version' : 0, 'Notes' : [\r\n        'Initial release',\r\n        ]\r\n    }\r\n  ] }\r\nDriverDescription*/\r\n\r\n\"use strict\";\r\n// Namespace: iqrf.embed.ledg\r\nnamespace( 'iqrf.embed.ledg' );\r\n\r\n// --------------\r\n/* Function: iqrf.embed.ledg.Set_Request\r\nEncodes DPA request to set the LED.\r\n\r\nParameters:\r\n  onOff - boolean: Required LED state. true is on, false is off.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.ledg.Set_Request = function ( onOff )\r\n{\r\n  if ( typeof onOff !== 'boolean' )\r\n    throw new Error( 'iqrf.embed.ledg.Set_Request: Parameter onOff expected to be boolean but not ' + typeof onOff );\r\n\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_LEDG, iqrf.ToHexStringByte( onOff ? 1 : 0 ) );\r\n};\r\n\r\n/* Function: iqrf.embed.ledg.Set_Response\r\nDecodes DPA response from setting the LED.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.ledg.Set_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_LEDG, '80.81', 0 );\r\n};\r\n\r\n/* Function: iqrf.embed.ledg.Pulse_Request\r\nEncodes DPA request to pulse the LED.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.ledg.Pulse_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_LEDG, '03' );\r\n};\r\n\r\n/* Function: iqrf.embed.ledg.Pulse_Response\r\nDecodes DPA response from pulsing the LED.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.ledg.Pulse_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_LEDG, '83', 0 );\r\n};\r\n\r\n/* Function: iqrf.embed.ledg.Flashing_Request\r\nEncodes DPA request for flashing the LED.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.ledg.Flashing_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_LEDG, '04' );\r\n};\r\n\r\n/* Function: iqrf.embed.ledg.Flashing_Response\r\nDecodes DPA response from flashing the LED.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.ledg.Flashing_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_LEDG, '84', 0 );\r\n};\r\n\r\n//############################################################################################\r\n", "name": "Embed: Green LED", "notes": "Get_Request and Get_Response removed.\nAdded Flashing command.", "standardID": 7, "version": 1.0, "versionFlags": 1}, {"driver": "//############################################################################################\r\n\r\n/* Title: Embedded SPI peripheral driver\r\nSee also: <https://www.iqrf.org/DpaTechGuide/>\r\n*/\r\n\r\n/*DriverDescription\r\n{ 'ID' : 0x08,\r\n  'Type' : 'Standard',\r\n  'Internal' : false,\r\n  'Versions' : [\r\n    { 'Version' : 0, 'Notes' : [\r\n        'Initial release',\r\n        ]\r\n    }\r\n  ] }\r\nDriverDescription*/\r\n\r\n\"use strict\";\r\n// Namespace: iqrf.embed.spi\r\nnamespace( 'iqrf.embed.spi' );\r\n\r\n// --------------\r\n/* Function: iqrf.embed.spi.WriteRead_Request\r\nEncodes DPA request to write and/or read data to/from SPI peripheral.\r\n\r\nParameters:\r\n  readTimeout - number:\r\n  writtenData - array: Array of bytes.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.spi.WriteRead_Request = function ( readTimeout, writtenData )\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_SPI, '00', iqrf.ToHexStringByte( readTimeout ) + iqrf.BytesToHexStringBytesArray( writtenData, true ) );\r\n};\r\n\r\n/* Function: iqrf.embed.spi.WriteRead_Response\r\nDecodes DPA response from writing and/or reading data to/from SPI peripheral.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  array: Read data.\r\n*/\r\niqrf.embed.spi.WriteRead_Response = function ( response )\r\n{\r\n  return iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_SPI, '80' );\r\n};\r\n\r\n//############################################################################################\r\n", "name": "Embed: SPI", "notes": "Initial release", "standardID": 8, "version": 0.0, "versionFlags": 0}, {"driver": "//############################################################################################\r\n\r\n/* Title: Embedded IO peripheral driver\r\nSee also: <https://www.iqrf.org/DpaTechGuide/>\r\n*/\r\n\r\n/*DriverDescription\r\n{ 'ID' : 0x09,\r\n  'Type' : 'Standard',\r\n  'Internal' : false,\r\n  'Versions' : [\r\n    { 'Version' : 0, 'Notes' : [\r\n        'Initial release' ]\r\n    }\r\n  ] }\r\nDriverDescription*/\r\n\r\n\"use strict\";\r\n// Namespace: iqrf.embed.io\r\nnamespace( 'iqrf.embed.io' );\r\n\r\n// --------------\r\n/* Function: iqrf.embed.io.Direction_Request\r\nEncodes DPA request to set direction of IOs.\r\n\r\nParameters:\r\n  ports - attay: Array of objects with the following fields (see DPA documentation https://www.iqrf.org/DpaTechGuide for details):\r\n\r\n* port - number: \r\n* mask - number: \r\n* value - number:\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.io.Direction_Request = function ( ports )\r\n{\r\n  var data = '';\r\n  var ports_length = ports.length;\r\n  for ( var index = 0; index < ports_length; index++ )\r\n  {\r\n    if ( data.length !== 0 )\r\n      data += '.';\r\n\r\n    var onePort = ports[index];\r\n    data +=\r\n      iqrf.ToHexStringByte( onePort.port ) + '.' +\r\n      iqrf.ToHexStringByte( onePort.mask ) + '.' +\r\n      iqrf.ToHexStringByte( onePort.value );\r\n  }\r\n\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_IO, '00', data );\r\n};\r\n\r\n/* Function: iqrf.embed.io.Direction_Response\r\nDecodes DPA response from setting direction of IOs.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.io.Direction_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_IO, '80', 0 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.io.Set_Request\r\nEncodes DPA request to set IOs.\r\n\r\nParameters:\r\n  ports - array: Array of objects with the following fields (see DPA documentation https://www.iqrf.org/DpaTechGuide for details):\r\n\r\n* port - number: \r\n* mask - number: \r\n* value - number: \r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.io.Set_Request = function ( ports )\r\n{\r\n  var data = '';\r\n  var ports_length = ports.length;\r\n  for ( var index = 0; index < ports_length; index++ )\r\n  {\r\n    if ( data.length !== 0 )\r\n      data += '.';\r\n\r\n    var onePort = ports[index];\r\n    data +=\r\n      iqrf.ToHexStringByte( onePort.port ) + '.' +\r\n      iqrf.ToHexStringByte( onePort.mask ) + '.' +\r\n      iqrf.ToHexStringByte( onePort.value );\r\n  }\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_IO, '01', data );\r\n};\r\n\r\n/* Function: iqrf.embed.io.Set_Response\r\nDecodes DPA response from setting IOs.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.io.Set_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_IO, '81', 0 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.io.Get_Request\r\nEncodes DPA request to read the input state of all supported the MCU ports.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.io.Get_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_IO, '02' );\r\n};\r\n\r\n/* Function: iqrf.embed.io.Get_Response\r\nDecodes DPA response from reading the input state of all supported the MCU ports.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  array: Ports values (see DPA documentation https://www.iqrf.org/DpaTechGuide for details).\r\n*/\r\niqrf.embed.io.Get_Response = function ( response )\r\n{\r\n  return iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_IO, '82', -5 );\r\n};\r\n\r\n//############################################################################################\r\n", "name": "Embed: IO", "notes": "Initial release", "standardID": 9, "version": 0.0, "versionFlags": 0}, {"driver": "//############################################################################################\r\n\r\n/* Title: Embedded Thermometer peripheral driver\r\nSee also: <https://www.iqrf.org/DpaTechGuide/>\r\n*/\r\n\r\n/*DriverDescription\r\n{ 'ID' : 0x0A,\r\n  'Type' : 'Standard',\r\n  'Internal' : false,\r\n  'Versions' : [\r\n    { 'Version' : 0, 'Notes' : [\r\n        'Initial release',\r\n        ]\r\n    }\r\n  ] }\r\nDriverDescription*/\r\n\r\n\"use strict\";\r\n// Namespace: iqrf.embed.thermometer\r\nnamespace( 'iqrf.embed.thermometer' );\r\n\r\n/* Function: iqrf.embed.thermometer.Read_Request\r\nEncodes DPA request to read temperature.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.thermometer.Read_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_Thermometer, '00' );\r\n};\r\n\r\n/* Function: iqrf.embed.thermometer.Read_Response\r\nDecodes DPA response from reading temperature.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturn:\r\n  number: Temperature value.\r\n*/\r\niqrf.embed.thermometer.Read_Response = function ( response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Thermometer, '80', 3 );\r\n  if ( responseData[0] === 0x80 )\r\n    throw new Error( 'iqrf.embed.thermometer.Read_Response: Temperature sensor missing' );\r\n\r\n  return ( responseData[1] + ( responseData[2] * 0x100 ) ) / 16.0;\r\n};\r\n\r\n//############################################################################################\r\n", "name": "Embed: Thermometer", "notes": "Initial release", "standardID": 10, "version": 0.0, "versionFlags": 0}, {"driver": "//############################################################################################\r\n\r\n/* Title: Embedded UART peripheral driver\r\nSee also: <https://www.iqrf.org/DpaTechGuide/>\r\n*/\r\n\r\n/*DriverDescription\r\n{ 'ID' : 0x0C,\r\n  'Type' : 'Standard',\r\n  'Internal' : false,\r\n  'Versions' : [\r\n    { 'Version' : 0, 'Notes' : [\r\n        'Initial release',\r\n        ]\r\n    }\r\n  ] }\r\nDriverDescription*/\r\n\r\n\"use strict\";\r\n// Namespace: iqrf.embed.uart\r\nnamespace( 'iqrf.embed.uart' );\r\n\r\n// Baudrates\r\n/* Const: iqrf.embed.uart.DpaBaud_1200\r\n*/\r\niqrf.embed.uart.DpaBaud_1200 = 0x00;\r\n/* Const: iqrf.embed.uart.DpaBaud_2400\r\n*/\r\niqrf.embed.uart.DpaBaud_2400 = 0x01;\r\n/* Const: iqrf.embed.uart.DpaBaud_4800\r\n*/\r\niqrf.embed.uart.DpaBaud_4800 = 0x02;\r\n/* Const: iqrf.embed.uart.DpaBaud_9600\r\n*/\r\niqrf.embed.uart.DpaBaud_9600 = 0x03;\r\n/* Const: iqrf.embed.uart.DpaBaud_19200\r\n*/\r\niqrf.embed.uart.DpaBaud_19200 = 0x04;\r\n/* Const: iqrf.embed.uart.DpaBaud_38400\r\n*/\r\niqrf.embed.uart.DpaBaud_38400 = 0x05;\r\n/* Const: iqrf.embed.uart.DpaBaud_57600\r\n*/\r\niqrf.embed.uart.DpaBaud_57600 = 0x06;\r\n/* Const: iqrf.embed.uart.DpaBaud_115200\r\n*/\r\niqrf.embed.uart.DpaBaud_115200 = 0x07;\r\n/* Const: iqrf.embed.uart.DpaBaud_230400\r\n*/\r\niqrf.embed.uart.DpaBaud_230400 = 0x08;\r\n\r\n// --------------\r\n/* Function: iqrf.embed.uart.Open_Request\r\nEncodes DPA request to open UART peripheral.\r\n\r\nParameters:\r\n  baudRate - number: BaudRate value. See iqrf.embed.uart.DpaBaud_??? constants.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.uart.Open_Request = function ( baudRate )\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_UART, '00', iqrf.ToHexStringByte( baudRate ) );\r\n};\r\n\r\n/* Function: iqrf.embed.uart.Open_Response\r\nDecodes DPA response from opening UART peripheral\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.uart.Open_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_UART, '80', 0 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.uart.Close_Request\r\nEncodes DPA request to close UART peripheral.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.uart.Close_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_UART, '01' );\r\n};\r\n\r\n/* Function: iqrf.embed.uart.Close_Response\r\nDecodes DPA response from closing UART peripheral.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.embed.uart.Close_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_UART, '81', 0 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.uart.WriteRead_Request\r\nEncodes DPA request to write and/or read data to/from UART peripheral.\r\n\r\nParameters:\r\n  readTimeout - number: \r\n  writtenData - array: Array of bytes.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.uart.WriteRead_Request = function ( readTimeout, writtenData )\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_UART, '02', iqrf.ToHexStringByte( readTimeout ) + iqrf.BytesToHexStringBytesArray( writtenData, true ) );\r\n};\r\n\r\n/* Function: iqrf.embed.uart.WriteRead_Response\r\nDecodes DPA response from writing and/or reading data to/from UART peripheral.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  Read data.\r\n*/\r\niqrf.embed.uart.WriteRead_Response = function ( response )\r\n{\r\n  return iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_UART, '82' );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.uart.ClearWriteRead_Request\r\nEncodes DPA request to clear rx buffer and then write and/or read data to/from UART peripheral.\r\n\r\nParameters:\r\n  readTimeout - number: \r\n  writtenData - array: Array of bytes.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.uart.ClearWriteRead_Request = function ( readTimeout, writtenData )\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_UART, '03', iqrf.ToHexStringByte( readTimeout ) + iqrf.BytesToHexStringBytesArray( writtenData, true ) );\r\n};\r\n\r\n/* Function: iqrf.embed.uart.ClearWriteRead_Response\r\nDecodes DPA response from clearing rx buffer and writing and/or reading data to/from UART peripheral.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  array: Read data.\r\n*/\r\niqrf.embed.uart.ClearWriteRead_Response = function ( response )\r\n{\r\n  return iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_UART, '83' );\r\n};\r\n\r\n//############################################################################################\r\n", "name": "Embed: UART", "notes": "Initial release", "standardID": 12, "version": 0.0, "versionFlags": 0}, {"driver": "//############################################################################################\r\n\r\n/* Title: Embedded FRC peripheral driver\r\nSee also: <https://www.iqrf.org/DpaTechGuide/>\r\n*/\r\n\r\n/*DriverDescription\r\n{ 'ID' : 0x0D,\r\n  'Type' : 'Standard',\r\n  'Internal' : false,\r\n  'Versions' : [\r\n    { 'Version' : 0, 'Notes' : [\r\n        'Initial release',\r\n        ]\r\n    }\r\n  ] }\r\nDriverDescription*/\r\n\r\n\"use strict\";\r\n// Namespace: iqrf.embed.frc\r\n// All prepared DPA requests have nadr set to '00'.\r\nnamespace( 'iqrf.embed.frc' );\r\n\r\n// --------------\r\n/* Function: iqrf.embed.frc.Send_Request\r\nEncodes DPA request to send a FRC command\r\n\r\nParameters:\r\n  frcCommand - number: Specifies data to be collected. \r\n  userData - array: User data.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.frc.Send_Request = function ( frcCommand, userData )\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_FRC, '00', iqrf.ToHexStringByte( frcCommand ) + iqrf.BytesToHexStringBytesArray( userData, true ) );\r\n};\r\n\r\n/* Function: iqrf.embed.frc.Send_Response\r\nDecodes DPA response from sending a FRC command. It also handles response from iqrf.embed.frc.SendSelective_Request.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  object: Object with the following fields (see DPA documentation https://www.iqrf.org/DpaTechGuide/ for details):\r\n\r\n* status - number\r\n* frcData - array\r\n*/\r\niqrf.embed.frc.Send_Response = function ( response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_FRC, '80.82', -2 );\r\n\r\n  var result =\r\n  {\r\n    status: responseData[0],\r\n    frcData: responseData.slice( 1, responseData.length )\r\n  };\r\n\r\n  return result;\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.frc.ExtraResult_Request\r\nEncodes DPA request to read remaining bytes of the FRC result.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.frc.ExtraResult_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_FRC, '01' );\r\n};\r\n\r\n/* Function: iqrf.embed.frc.ExtraResult_Response\r\nDecodes DPA response from reading remaining bytes of the FRC result.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  array: Remaining FRC data.\r\n*/\r\niqrf.embed.frc.ExtraResult_Response = function ( response )\r\n{\r\n  return iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_FRC, '81', -1 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.frc.SendSelective_Request\r\nEncodes DPA request to send a selective FRC command.\r\n\r\nParameters:\r\n  frcCommand - number: Specifies data to be collected.\r\n  selectedNodes - array: Array if integer values corresponding to the selected nodes.\r\n  userData - array: User data.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.frc.SendSelective_Request = function ( frcCommand, selectedNodes, userData )\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_FRC, '02',\r\n    iqrf.ToHexStringByte( frcCommand ) +\r\n    iqrf.BytesToHexStringBytesArray( iqrf.IndexesToBitmap( selectedNodes, 30 ), true ) +\r\n    iqrf.BytesToHexStringBytesArray( userData, true ) );\r\n};\r\n\r\n/* Function: iqrf.embed.frc.SendSelective_Response\r\nDecodes DPA response from sending a selective FRC command.  It also handles response from iqrf.embed.frc.Send_Request.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  Object with the following fields (see DPA documentation https://www.iqrf.org/DpaTechGuide/ for details):\r\n\r\n* status - number\r\n* frcData - array\r\n*/\r\niqrf.embed.frc.SendSelective_Response = function ( response )\r\n{\r\n  return iqrf.embed.frc.Send_Response( response );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.frc.SetParams_Request\r\nEncodes DPA request to set global FRC parameters.\r\n\r\nParameters:\r\n  frcResponseTime - number: See DPA documentation https://www.iqrf.org/DpaTechGuide for details.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.frc.SetParams_Request = function ( frcResponseTime )\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_FRC, '03', iqrf.ToHexStringByte( frcResponseTime ) );\r\n};\r\n\r\n/* Function: iqrf.embed.frc.SetParams_Response\r\nDecodes DPA response from setting global FRC parameters.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  number: Previous FRCresponseTime value. \r\n*/\r\niqrf.embed.frc.SetParams_Response = function ( response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_FRC, '83', 1 );\r\n  return responseData[0];\r\n};\r\n\r\n/* Function: iqrf.embed.frc.ParseResponses\r\nDecodes DPA responses returned by iqrf.embed.frc.Send[Selective]_Response and iqrf.embed.frc.ExtraResult_Response\r\n\r\nParameters:\r\n  frcCommand - number: FRC command passed to iqrf.embed.frc.Send[Selective]_Request\r\n  sendResponse - object: Return value from iqrf.embed.frc.Send[Selective]_Response\r\n  extraResultResponse - array: [optional] Return value from iqrf.embed.frc.ExtraResult_Response. For smaller networks extra FRC result might not be needed.\r\n\r\nReturns:\r\n  array: Based on the FRC command the items of the array are 2 bits, 1 byte, 2-byte or 4-byte numbers.\r\n\r\n\r\n--- Text\r\nExample:\r\n\r\n* Input\r\n// Both sendResponse.frcData[] and extraResultResponse full of 0s except:\r\nsendResponse.frcData[2]  = 6\r\nsendResponse.frcData[34] = 2\r\n\r\n* Result (all other array items are 0)\r\n// for 2 bits FRC command\r\n{\r\n  \"17\": 3,\r\n  \"18\": 1\r\n}\r\n\r\n// for 1 byte FRC command\r\n{\r\n  \"2\": 6,\r\n  \"34\": 2\r\n}\r\n\r\n// for 2 bytes FRC command\r\n{\r\n  \"1\": 6,\r\n  \"17\": 2\r\n}\r\n\r\n// for 4 bytes FRC command\r\n{\r\n  \"8\": 131072\r\n}\r\n---\r\n*/\r\niqrf.embed.frc.ParseResponses = function ( frcCommand, sendResponse, extraResultResponse )\r\n{\r\n  if ( frcCommand < 0 || frcCommand > 0xff )\r\n    throw new Error( 'iqrf.embed.frc.ParseResponses: Parameter frcCommand = ' + frcCommand + ' is out of range.' );\r\n\r\n  var frcData;\r\n  if ( extraResultResponse !== undefined )\r\n    frcData = sendResponse.frcData.concat( extraResultResponse );\r\n  else\r\n    frcData = sendResponse.frcData;\r\n\r\n  var result = [];\r\n\r\n  var frcData_length = frcData.length;\r\n  if ( frcCommand <= 0x7F )\r\n  {\r\n    // 2 bits FRC\r\n    for ( var index = 0; index <= 239; index++ )\r\n    {\r\n      var mask = 1 << ( index % 8 );\r\n      var valueIndex = Math.floor( index / 8 );\r\n\r\n      if ( ( valueIndex + 32 ) >= frcData_length )\r\n        break;\r\n\r\n      var frcValue = 0;\r\n      if ( ( frcData[valueIndex] & mask ) !== 0 )\r\n        frcValue = 0x01;\r\n\r\n      if ( ( frcData[valueIndex + 32] & mask ) !== 0 )\r\n        frcValue |= 0x02;\r\n\r\n      result[index] = frcValue;\r\n    }\r\n  }\r\n  else if ( frcCommand <= 0xDF )\r\n    // 1 byte FRC\r\n    for ( var byteIndex = 0; byteIndex < frcData_length; byteIndex++ )\r\n    {\r\n      var frcValue1B = frcData[byteIndex];\r\n      result[byteIndex] = frcValue1B;\r\n    }\r\n  else if ( frcCommand <= 0xF7 )\r\n    // 2 bytes FRC\r\n    for ( var byte2index = 2; byte2index < frcData_length - 1; byte2index += 2 )\r\n    {\r\n      var frcValue2B = frcData[byte2index] + ( frcData[byte2index + 1] * 0x100 );\r\n      result[byte2index / 2] = frcValue2B;\r\n    }\r\n  else\r\n    // 4 bytes FRC\r\n    for ( var byte4index = 4; byte4index < frcData_length - 3; byte4index += 4 )\r\n    {\r\n      var frcValue4B = frcData[byte4index] + ( frcData[byte4index + 1] * 0x100 ) + ( frcData[byte4index + 2] * 0x10000 ) + ( frcData[byte4index + 3] * 0x1000000 );\r\n      result[byte4index / 4] = frcValue4B;\r\n    }\r\n\r\n  // Make sure there are no data from coordinator for sure\r\n  result[0] = 0;\r\n  return result;\r\n};\r\n\r\n//############################################################################################\r\n", "name": "Embed: FRC", "notes": "Initial release", "standardID": 13, "version": 0.0, "versionFlags": 0}, {"driver": "//############################################################################################\r\n\r\n/* Title: Embedded DPA exploration driver\r\nSee also: <https://www.iqrf.org/DpaTechGuide/>\r\n*/\r\n\r\n/*DriverDescription\r\n{ 'ID' : 0xFF,\r\n  'Type' : 'Standard',\r\n  'Internal' : false,\r\n  'Versions' : [\r\n    { 'Version' : 0, 'Notes' : [\r\n        '1st line',\r\n        '2nd line' ]\r\n    }\r\n  ] }\r\nDriverDescription*/\r\n\r\n\"use strict\";\r\n// Namespace: iqrf.embed.explore\r\nnamespace( 'iqrf.embed.explore' );\r\n\r\n/* Function: iqrf.embed.explore.Enumerate_Request\r\nEncodes DPA request to enumerate DPA peripherals.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.explore.Enumerate_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.PNUM_Enumeration, '3f' );\r\n};\r\n\r\n/* Function: iqrf.embed.explore.Enumerate_Response\r\nDecodes DPA response from enumerating DPA peripherals.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  object: Object with the following fields (see DPA documentation https://www.iqrf.org/DpaTechGuide/ for details):\r\n\r\n* dpaVer - number:\r\n* perNr - number:\r\n* embeddedPers - number:\r\n* hwpid - number:\r\n* hwpidVer - number:\r\n* flags - number:\r\n* userPer - array:\r\n*/\r\niqrf.embed.explore.Enumerate_Response = function ( response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_Enumeration, 'bf', -12 );\r\n  var result =\r\n    {\r\n      dpaVer: responseData[0] + ( responseData[1] * 0x100 ),\r\n      perNr: responseData[2],\r\n      embeddedPers: iqrf.BitmapToIndexes( responseData, 3, 6 ),\r\n      hwpid: responseData[7] + ( responseData[8] * 0x100 ),\r\n      hwpidVer: responseData[9] + ( responseData[10] * 0x100 ),\r\n      flags: responseData[11],\r\n      userPer: iqrf.BitmapToIndexes( responseData, 12, responseData.length - 1, 0x20 )\r\n    };\r\n\r\n  return result;\r\n};\r\n\r\n/* Function: iqrf.embed.explore.PeripheralInformation_Request\r\nEncodes DPA request to get information about a peripheral.\r\n\r\nParameters:\r\n  per - number: Peripheral to get information about.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.explore.PeripheralInformation_Request = function ( per )\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.ToHexStringByte( per ), '3f' );\r\n};\r\n\r\n/* Function: iqrf.embed.explore.PeripheralInformation_Response\r\nDecodes DPA response from getting information about a peripheral.\r\n\r\nParameters:\r\n  per - number: Peripheral the information is about.\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  object: Object with the following fields (see DPA documentation https://www.iqrf.org/DpaTechGuide/ for details):\r\n\r\n* perTe - number:\r\n* perT - number:\r\n* par1 - number:\r\n* par2 - number:\r\n*/\r\niqrf.embed.explore.PeripheralInformation_Response = function ( per, response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.ToHexStringByte( per ), 'bf', 4 );\r\n  var result =\r\n    {\r\n      perTe: responseData[0],\r\n      perT: responseData[1],\r\n      par1: responseData[2],\r\n      par2: responseData[3]\r\n    };\r\n\r\n  return result;\r\n};\r\n\r\n/* Function: iqrf.embed.explore.MorePeripheralsInformation_Request\r\nEncodes DPA request to get information about more peripherals.\r\n\r\nParameters:\r\n  per - number: 1st peripheral to get information about.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.explore.MorePeripheralsInformation_Request = function ( per )\r\n{\r\n  return new iqrf.DpaRawHdpMessage( 'ff', iqrf.ToHexStringByte( per ) );\r\n};\r\n\r\n/* Function: iqrf.embed.explore.MorePeripheralsInformation_Response\r\nDecodes DPA response from getting information about more peripherals.\r\n\r\nParameters:\r\n  per - number: 1st peripheral the information is about.\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  array: Array of objects with the following fields (see DPA documentation https://www.iqrf.org/DpaTechGuide/ for details):\r\n\r\n* perTe - number:\r\n* perT - number:\r\n* par1 - number: \r\n* par2 - number: \r\n*/\r\niqrf.embed.explore.MorePeripheralsInformation_Response = function ( per, response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, 'ff', iqrf.ToHexStringByte( parseInt( per, 16 ) | 0x80 ) );\r\n\r\n  var result = [];\r\n  var responseData_length = responseData.length;\r\n  for ( var index = 0; index < responseData_length; index += 4 )\r\n    result[result.length] =\r\n      {\r\n        perTe: responseData[index + 0],\r\n        perT: responseData[index + 1],\r\n        par1: responseData[index + 2],\r\n        par2: responseData[index + 3]\r\n      };\r\n\r\n  return result;\r\n};\r\n\r\n//############################################################################################\r\n", "name": "Embed: DPA Exploration", "notes": "1st line\n2nd line", "standardID": 255, "version": 0.0, "versionFlags": 0}]}