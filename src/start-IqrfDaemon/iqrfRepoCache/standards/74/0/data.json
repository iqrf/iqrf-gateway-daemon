{"name": "IQRF: DALI", "versionFlags": 0, "notes": "Initial release", "driver": "//############################################################################################\r\n\r\n/* Title: IQRF Standards DALI driver\r\nSee also: <https://www.iqrfalliance.org/techDocs/>\r\n*/\r\n\r\n/*DriverDescription\r\n{ 'ID' : 0x4A,\r\n  'Type' : 'Standard',\r\n  'Internal' : false,\r\n  'Versions' : [\r\n    { 'Version' : 0, 'Notes' : [\r\n        'Initial release' ]\r\n    }\r\n  ] }\r\nDriverDescription*/\r\n\r\n\"use strict\";\r\n// Namespace: iqrf.DALI\r\nnamespace( 'iqrf.DALI' );\r\n\r\n// IQRF Standards DALI PNUM value\r\niqrf.DALI.PNUM = '4A';\r\n\r\n// FRC commands\r\n/* Const: iqrf.DALI.STD_DALI_SEND_FRC\r\nFRC command to return answer of the provided DALI command.\r\n*/\r\niqrf.DALI.STD_DALI_SEND_FRC = 0xE0;\r\n\r\niqrf.DALI.DaliSendCmds_Request = function ( commands, pcmd )\r\n{\r\n  var data = '';\r\n  var commands_length = commands.length;\r\n  if ( commands_length < 1 )\r\n    throw new Error( 'iqrf.DALI.DaliSendCmds_Request: No DALI commands specified.' );\r\n\r\n  for ( var index = 0; index < commands_length; index++ )\r\n  {\r\n    var oneCmd = commands[index];\r\n    if ( typeof oneCmd !== 'number' || oneCmd < 0 || oneCmd > 0xFfFf )\r\n      throw new Error( 'iqrf.DALI.DaliSendCmds_Request: Invalid DALI command value ' + oneCmd );\r\n\r\n    if ( data.length !== 0 )\r\n      data += '.';\r\n    data += iqrf.ToHexStringByte( oneCmd >> 8 ) + '.' + iqrf.ToHexStringByte( oneCmd & 0xFF );\r\n  }\r\n  return new iqrf.DpaRawHdpMessage( iqrf.DALI.PNUM, pcmd, data );\r\n};\r\n\r\n/* Function: iqrf.DALI.SendCommands_Request\r\nSend DALI commands and returns answers synchronously.\r\n\r\nParameters:\r\n  commands - array: Array of 2 bytes (16 bits) wide values, each representing one DALI command at the standard DALI format YAAAAAAS+DDDDDDDD.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.DALI.SendCommands_Request = function ( commands )\r\n{\r\n  return iqrf.DALI.DaliSendCmds_Request( commands, '00' );\r\n};\r\n\r\n/* Function: iqrf.DALI.SendCommands_Response\r\nDecodes DPA response from sending DALI commands synchronously.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  array: Array of objects each representing answer to the respective DALI command.\r\n\r\n      * status - number: See IQRF DALI standard for details.\r\n      * value - number: See IQRF DALI standard for details.\r\n*/\r\niqrf.DALI.SendCommands_Response = function ( response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.DALI.PNUM, '80', -2 );\r\n\r\n  var result = [];\r\n  var responseData_length = responseData.length;\r\n  for ( var index = 0; index < responseData_length; )\r\n  {\r\n    result[result.length] =\r\n      {\r\n        status: responseData[index++],\r\n        value: responseData[index++]\r\n      };\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/* Function: iqrf.DALI.SendCommandsAsync_Request\r\nSend DALI commands and returns answers asynchronously.\r\n\r\nParameters:\r\n  commands - array: Array of 2 bytes (16 bits) wide values, each representing one DALI command at the standard DALI format YAAAAAAS+DDDDDDDD.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.DALI.SendCommandsAsync_Request = function ( commands )\r\n{\r\n  return iqrf.DALI.DaliSendCmds_Request( commands, '01' );\r\n};\r\n\r\n/* Function: iqrf.DALI.SendCommandsAsync_Response\r\nDecodes DPA response from sending DALI commands synchronously.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n*/\r\niqrf.DALI.SendCommandsAsync_Response = function ( response )\r\n{\r\n  iqrf.CheckResponsePnumPcmdDlen( response, iqrf.DALI.PNUM, '81', 0 );\r\n};\r\n\r\n/* Function: iqrf.DALI.Frc_Request\r\nPrepares FRC request to read standard sensor values.\r\n_Requires FRC embedded peripheral driver_.\r\n\r\nParameters:\r\n  command - number: DALI command, see <iqrf.DALI.SendCommands_Request>\r\n  selectedNodes - array: [optional] Array if integer values corresponding to the selected nodes. Use default value or empty array to select all nodes.\r\n\r\nReturns: \r\n  array: 2 items long array. 1st item is a prepared request to initiate the RFC. 2nd item is a prepared request to get additional FRC data from the network. For smaller networks extra FRC result might not be needed.\r\n*/\r\niqrf.DALI.Frc_Request = function ( command, selectedNodes )\r\n{\r\n  var userData = [0x4A, command >> 8, command & 0xFF, 0];\r\n\r\n  var result = [];\r\n  result[0] = selectedNodes === undefined || selectedNodes.length === 0 ? iqrf.embed.frc.Send_Request( iqrf.DALI.STD_DALI_SEND_FRC, userData ) : iqrf.embed.frc.SendSelective_Request( iqrf.DALI.STD_DALI_SEND_FRC, selectedNodes, userData );\r\n  result[1] = iqrf.embed.frc.ExtraResult_Request();\r\n  return result;\r\n};\r\n\r\n/* Function: iqrf.DALI.Frc_Response\r\nParses FRC response into DALI answer values.\r\n_Requires FRC embedded peripheral driver_.\r\n\r\nParameters:\r\n  responseFrcSend - object: Return value from iqrf.embed.frc.Send[Selective]_Response\r\n  responseFrcExtraResult - array: [optional] Return value from iqrf.embed.frc.ExtraResult_Response. For smaller networks extra FRC result might not be needed.\r\n\r\nReturns:\r\n  array: Array of objects for every DALI answer. Object array index represent the node address (or index in case selectedNodes parameter was used). The object has the same fields as object at the return  value of <iqrf.DALI.SendCommands_Response>.\r\n*/\r\niqrf.DALI.Frc_Response = function ( responseFrcSend, responseFrcExtraResult )\r\n{\r\n  var responseFrcExtraResultParsed;\r\n  if ( responseFrcExtraResult !== undefined )\r\n    responseFrcExtraResultParsed = iqrf.embed.frc.ExtraResult_Response( responseFrcExtraResult );\r\n  var parsedFrc = iqrf.embed.frc.ParseResponses( iqrf.DALI.STD_DALI_SEND_FRC, iqrf.embed.frc.Send_Response( responseFrcSend ), responseFrcExtraResultParsed );\r\n\r\n  var result = [];\r\n  for ( var index in parsedFrc )\r\n  {\r\n    var frcValue = parsedFrc[index];\r\n    result[index] =\r\n      {\r\n        status: frcValue >> 8,\r\n        value: frcValue & 0xFF\r\n      };\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n//############################################################################################\r\n", "version": 0.0, "standardID": 74}