{"driver": "//############################################################################################\r\n\r\n/* Title: Embedded FRC peripheral driver\r\nSee also: <https://www.iqrf.org/DpaTechGuide/>\r\n*/\r\n\r\n/*DriverDescription\r\n{ 'ID' : 0x0D,\r\n  'Type' : 'Standard',\r\n  'Internal' : false,\r\n  'Versions' : [\r\n    { 'Version' : 0, 'Notes' : [\r\n        'Initial release',\r\n        ]\r\n    }\r\n  ] }\r\nDriverDescription*/\r\n\r\n\"use strict\";\r\n// Namespace: iqrf.embed.frc\r\n// All prepared DPA requests have nadr set to '00'.\r\nnamespace( 'iqrf.embed.frc' );\r\n\r\n// --------------\r\n/* Function: iqrf.embed.frc.Send_Request\r\nEncodes DPA request to send a FRC command\r\n\r\nParameters:\r\n  frcCommand - number: Specifies data to be collected. \r\n  userData - array: User data.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.frc.Send_Request = function ( frcCommand, userData )\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_FRC, '00', iqrf.ToHexStringByte( frcCommand ) + iqrf.BytesToHexStringBytesArray( userData, true ) );\r\n};\r\n\r\n/* Function: iqrf.embed.frc.Send_Response\r\nDecodes DPA response from sending a FRC command. It also handles response from iqrf.embed.frc.SendSelective_Request.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  object: Object with the following fields (see DPA documentation https://www.iqrf.org/DpaTechGuide/ for details):\r\n\r\n* status - number\r\n* frcData - array\r\n*/\r\niqrf.embed.frc.Send_Response = function ( response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_FRC, '80.82', -2 );\r\n\r\n  var result =\r\n  {\r\n    status: responseData[0],\r\n    frcData: responseData.slice( 1, responseData.length )\r\n  };\r\n\r\n  return result;\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.frc.ExtraResult_Request\r\nEncodes DPA request to read remaining bytes of the FRC result.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.frc.ExtraResult_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_FRC, '01' );\r\n};\r\n\r\n/* Function: iqrf.embed.frc.ExtraResult_Response\r\nDecodes DPA response from reading remaining bytes of the FRC result.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  array: Remaining FRC data.\r\n*/\r\niqrf.embed.frc.ExtraResult_Response = function ( response )\r\n{\r\n  return iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_FRC, '81', -1 );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.frc.SendSelective_Request\r\nEncodes DPA request to send a selective FRC command.\r\n\r\nParameters:\r\n  frcCommand - number: Specifies data to be collected.\r\n  selectedNodes - array: Array if integer values corresponding to the selected nodes.\r\n  userData - array: User data.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.frc.SendSelective_Request = function ( frcCommand, selectedNodes, userData )\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_FRC, '02',\r\n    iqrf.ToHexStringByte( frcCommand ) +\r\n    iqrf.BytesToHexStringBytesArray( iqrf.IndexesToBitmap( selectedNodes, 30 ), true ) +\r\n    iqrf.BytesToHexStringBytesArray( userData, true ) );\r\n};\r\n\r\n/* Function: iqrf.embed.frc.SendSelective_Response\r\nDecodes DPA response from sending a selective FRC command.  It also handles response from iqrf.embed.frc.Send_Request.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  Object with the following fields (see DPA documentation https://www.iqrf.org/DpaTechGuide/ for details):\r\n\r\n* status - number\r\n* frcData - array\r\n*/\r\niqrf.embed.frc.SendSelective_Response = function ( response )\r\n{\r\n  return iqrf.embed.frc.Send_Response( response );\r\n};\r\n\r\n// --------------\r\n/* Function: iqrf.embed.frc.SetParams_Request\r\nEncodes DPA request to set global FRC parameters.\r\n\r\nParameters:\r\n  frcResponseTime - number: See DPA documentation https://www.iqrf.org/DpaTechGuide for details.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.embed.frc.SetParams_Request = function ( frcResponseTime )\r\n{\r\n  return new iqrf.DpaRawHdpMessageCoordinator( iqrf.PNUM_FRC, '03', iqrf.ToHexStringByte( frcResponseTime ) );\r\n};\r\n\r\n/* Function: iqrf.embed.frc.SetParams_Response\r\nDecodes DPA response from setting global FRC parameters.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  number: Previous FRCresponseTime value. \r\n*/\r\niqrf.embed.frc.SetParams_Response = function ( response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.PNUM_FRC, '83', 1 );\r\n  return responseData[0];\r\n};\r\n\r\n/* Function: iqrf.embed.frc.ParseResponses\r\nDecodes DPA responses returned by iqrf.embed.frc.Send[Selective]_Response and iqrf.embed.frc.ExtraResult_Response\r\n\r\nParameters:\r\n  frcCommand - number: FRC command passed to iqrf.embed.frc.Send[Selective]_Request\r\n  sendResponse - object: Return value from iqrf.embed.frc.Send[Selective]_Response\r\n  extraResultResponse - array: [optional] Return value from iqrf.embed.frc.ExtraResult_Response. For smaller networks extra FRC result might not be needed.\r\n\r\nReturns:\r\n  array: Based on the FRC command the items of the array are 2 bits, 1 byte, 2-byte or 4-byte numbers.\r\n\r\n\r\n--- Text\r\nExample:\r\n\r\n* Input\r\n// Both sendResponse.frcData[] and extraResultResponse full of 0s except:\r\nsendResponse.frcData[2]  = 6\r\nsendResponse.frcData[34] = 2\r\n\r\n* Result (all other array items are 0)\r\n// for 2 bits FRC command\r\n{\r\n  \"17\": 3,\r\n  \"18\": 1\r\n}\r\n\r\n// for 1 byte FRC command\r\n{\r\n  \"2\": 6,\r\n  \"34\": 2\r\n}\r\n\r\n// for 2 bytes FRC command\r\n{\r\n  \"1\": 6,\r\n  \"17\": 2\r\n}\r\n\r\n// for 4 bytes FRC command\r\n{\r\n  \"8\": 131072\r\n}\r\n---\r\n*/\r\niqrf.embed.frc.ParseResponses = function ( frcCommand, sendResponse, extraResultResponse )\r\n{\r\n  if ( frcCommand < 0 || frcCommand > 0xff )\r\n    throw new Error( 'iqrf.embed.frc.ParseResponses: Parameter frcCommand = ' + frcCommand + ' is out of range.' );\r\n\r\n  var frcData;\r\n  if ( extraResultResponse !== undefined )\r\n    frcData = sendResponse.frcData.concat( extraResultResponse );\r\n  else\r\n    frcData = sendResponse.frcData;\r\n\r\n  var result = [];\r\n\r\n  var frcData_length = frcData.length;\r\n  if ( frcCommand <= 0x7F )\r\n  {\r\n    // 2 bits FRC\r\n    for ( var index = 0; index <= 239; index++ )\r\n    {\r\n      var mask = 1 << ( index % 8 );\r\n      var valueIndex = Math.floor( index / 8 );\r\n\r\n      if ( ( valueIndex + 32 ) >= frcData_length )\r\n        break;\r\n\r\n      var frcValue = 0;\r\n      if ( ( frcData[valueIndex] & mask ) !== 0 )\r\n        frcValue = 0x01;\r\n\r\n      if ( ( frcData[valueIndex + 32] & mask ) !== 0 )\r\n        frcValue |= 0x02;\r\n\r\n      result[index] = frcValue;\r\n    }\r\n  }\r\n  else if ( frcCommand <= 0xDF )\r\n    // 1 byte FRC\r\n    for ( var byteIndex = 0; byteIndex < frcData_length; byteIndex++ )\r\n    {\r\n      var frcValue1B = frcData[byteIndex];\r\n      result[byteIndex] = frcValue1B;\r\n    }\r\n  else if ( frcCommand <= 0xF7 )\r\n    // 2 bytes FRC\r\n    for ( var byte2index = 2; byte2index < frcData_length - 1; byte2index += 2 )\r\n    {\r\n      var frcValue2B = frcData[byte2index] + ( frcData[byte2index + 1] * 0x100 );\r\n      result[byte2index / 2] = frcValue2B;\r\n    }\r\n  else\r\n    // 4 bytes FRC\r\n    for ( var byte4index = 4; byte4index < frcData_length - 3; byte4index += 4 )\r\n    {\r\n      var frcValue4B = frcData[byte4index] + ( frcData[byte4index + 1] * 0x100 ) + ( frcData[byte4index + 2] * 0x10000 ) + ( frcData[byte4index + 3] * 0x1000000 );\r\n      result[byte4index / 4] = frcValue4B;\r\n    }\r\n\r\n  // Make sure there are no data from coordinator for sure\r\n  result[0] = 0;\r\n  return result;\r\n};\r\n\r\n//############################################################################################\r\n", "name": "Embed: FRC", "notes": "Initial release", "standardID": 13, "version": 0.0, "versionFlags": 0}