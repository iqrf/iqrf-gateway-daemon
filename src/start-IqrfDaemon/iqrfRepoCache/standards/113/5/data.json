{"driver": "//############################################################################################\r\n\r\n/* Title: IQRF Standards Light driver\r\nSee also: <https://www.iqrfalliance.org/techDocs/>\r\n*/\r\n\r\n/*DriverDescription\r\n{ 'ID' : 0x71,\r\n  'Type' : 'Standard',\r\n  'Internal' : false,\r\n  'Versions' : [\r\n    { 'Version' : 5, 'Notes' : [\r\n        'Initial release' ]\r\n    }\r\n  ] }\r\nDriverDescription*/\r\n\r\n\"use strict\";\r\n// Namespace: iqrf.light\r\nnamespace( 'iqrf.light' );\r\n\r\n// IQRF Standards Light PNUM value\r\niqrf.light.PNUM = '71';\r\n\r\n// FRC commands\r\n/* Const: iqrf.light.STD_LIGHT_ONOFF_FRC\r\nFRC command to return 2-bits light On/Off state.\r\n*/\r\niqrf.light.STD_LIGHT_ONOFF_FRC = 0x10;\r\n// FRC commands\r\n/* Const: iqrf.light.STD_LIGHT_ALARM_FRC\r\nFRC command to return 2-bits light alarm state.\r\n*/\r\niqrf.light.STD_LIGHT_ALARM_FRC = 0x11;\r\n\r\n/* Function: iqrf.light.Enumerate_Request\r\nEncodes DPA request to enumerate lights.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.light.Enumerate_Request = function ()\r\n{\r\n  return new iqrf.DpaRawHdpMessage( iqrf.light.PNUM, '3e' );\r\n};\r\n\r\n/* Function: iqrf.light.Enumerate_Response\r\nDecodes DPA response from lights enumeration.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  number: Number of implemented lights.\r\n*/\r\niqrf.light.Enumerate_Response = function ( response )\r\n{\r\n  var responseData = iqrf.CheckResponsePnumPcmdDlen( response, iqrf.light.PNUM, 'be', 1 );\r\n  return responseData[0];\r\n};\r\n\r\niqrf.light.LightCmd_Request = function ( lights, pcmd )\r\n{\r\n  var bitmap = 0x0000;\r\n  var data = '';\r\n  var lights_length = lights.length;\r\n  for ( var index = 0; index < lights_length; index++ )\r\n  {\r\n    var oneLight = lights[index];\r\n    bitmap |= 1 << oneLight.index;\r\n\r\n    if ( oneLight.power !== 0x7F && ( oneLight.power < 0 || oneLight.power > 100 ) )\r\n      throw new Error( 'iqrf.light.LightCmd_Request: Invalid power ' + oneLight.power + ' specified for the light ' + oneLight.index );\r\n\r\n    var oneTime = undefined;\r\n    var onePower = oneLight.power;\r\n    if ( oneLight.time !== undefined )\r\n    {\r\n      if ( oneLight.time >= 1 && oneLight.time <= 127 )\r\n        oneTime = oneLight.time | 0x80;\r\n      else\r\n      {\r\n        var minutes = Math.floor( oneLight.time / 60 );\r\n        if ( oneLight.time % 60 !== 0 || minutes < 2 || minutes > 127 )\r\n          throw new Error( 'iqrf.light.LightCmd_Request: Invalid time ' + oneLight.time + ' specified for the light ' + oneLight.index );\r\n\r\n        oneTime = minutes;\r\n      }\r\n\r\n      onePower |= 0x80;\r\n    }\r\n\r\n    data += '.' + iqrf.ToHexStringByte( onePower );\r\n    if ( oneTime !== undefined )\r\n      data += '.' + iqrf.ToHexStringByte( oneTime );\r\n  }\r\n\r\n  return new iqrf.DpaRawHdpMessage( iqrf.light.PNUM, pcmd, iqrf.IntToHexStringBytesArray( bitmap, 4 ) + data );\r\n};\r\n\r\n/* Function: iqrf.light.SetPower_Request\r\nEncodes DPA request to set power of lights.\r\n\r\nParameters:\r\n  lights - array: Array of objects with the following fields (see documentation at https://www.iqrfalliance.org/techDocs/ for details):\r\n\r\n* index - number: Zero based index of the light to set.\r\n* power - number: Power level of the light from range <0;100>. Value 127 keeps current power level allowing to only report power level.\r\n* time - number: [optional] Time in seconds to keep the light on. Allowed values are <1;127> or 60*<1;127>.\r\n\r\nReturns:\r\n  iqrf.DpaRawHdpMessage: DPA request object.\r\n*/\r\niqrf.light.SetPower_Request = function ( lights )\r\n{\r\n  return iqrf.light.LightCmd_Request( lights, '00' );\r\n};\r\n\r\n/* Function: iqrf.light.SetPower_Response\r\nDecodes DPA response from setting power of lights.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  array: Array integers corresponding to the previous power level of each selected light. If the unimplemented light was selected the returned value is 0.\r\n*/\r\niqrf.light.SetPower_Response = function ( response )\r\n{\r\n  return iqrf.CheckResponsePnumPcmdDlen( response, iqrf.light.PNUM, '80', -1 );\r\n};\r\n\r\n/* Function: iqrf.light.IncrementPower_Request\r\nEncodes DPA request to increment power of lights.\r\nSame as <iqrf.light.SetPower_Request> but increases power level. See documentation for details.\r\n*/\r\niqrf.light.IncrementPower_Request = function ( lights )\r\n{\r\n  return iqrf.light.LightCmd_Request( lights, '01' );\r\n};\r\n\r\n/* Function: iqrf.light.IncrementPower_Response\r\nDecodes DPA response from incrementing power of lights.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  array: Array integers corresponding to the previous power level of each selected light. If the unimplemented light was selected the returned value is 0.\r\n*/\r\niqrf.light.IncrementPower_Response = function ( response )\r\n{\r\n  return iqrf.CheckResponsePnumPcmdDlen( response, iqrf.light.PNUM, '81', -1 );\r\n};\r\n\r\n/* Function: iqrf.light.DecrementPower_Request\r\nEncodes DPA request to decrement power of lights.\r\nSame as <iqrf.light.SetPower_Request> but decreases power level. See documentation for details.\r\n*/\r\niqrf.light.DecrementPower_Request = function ( lights )\r\n{\r\n  return iqrf.light.LightCmd_Request( lights, '02' );\r\n};\r\n\r\n/* Function: iqrf.light.DecrementPower_Response\r\nDecodes DPA response from decrementing power of lights.\r\n\r\nParameters:\r\n  response - iqrf.DpaRawHdpMessage: DPA response object.\r\n\r\nReturns:\r\n  array: Array integers corresponding to the previous power level of each selected light. If the unimplemented light was selected the returned value is 0.\r\n*/\r\niqrf.light.DecrementPower_Response = function ( response )\r\n{\r\n  return iqrf.CheckResponsePnumPcmdDlen( response, iqrf.light.PNUM, '82', -1 );\r\n};\r\n\r\n//############################################################################################\r\n", "name": "IQRF: Light", "notes": "Initial release", "standardID": 113, "version": 5.0, "versionFlags": 0}